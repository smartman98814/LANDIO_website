
/*!
 * Webflow: Front-end site library
 * @license MIT
 * Inline scripts may access the api using an async handler:
 *   var Webflow = Webflow || [];
 *   Webflow.push(readyFunction);
 */

(self["webpackChunk"] = self["webpackChunk"] || []).push([["422"], {
12372: (function (module, __unused_webpack_exports, __webpack_require__) {
var map = {
  "./af": "44445",
  "./af.js": "44445",
  "./ar": "8779",
  "./ar-dz": "30230",
  "./ar-dz.js": "30230",
  "./ar-kw": "37885",
  "./ar-kw.js": "37885",
  "./ar-ly": "18449",
  "./ar-ly.js": "18449",
  "./ar-ma": "30721",
  "./ar-ma.js": "30721",
  "./ar-sa": "39707",
  "./ar-sa.js": "39707",
  "./ar-tn": "79625",
  "./ar-tn.js": "79625",
  "./ar.js": "8779",
  "./az": "84507",
  "./az.js": "84507",
  "./be": "91008",
  "./be.js": "91008",
  "./bg": "1574",
  "./bg.js": "1574",
  "./bm": "60821",
  "./bm.js": "60821",
  "./bn": "92129",
  "./bn-bd": "3012",
  "./bn-bd.js": "3012",
  "./bn.js": "92129",
  "./bo": "64080",
  "./bo.js": "64080",
  "./br": "77473",
  "./br.js": "77473",
  "./bs": "87110",
  "./bs.js": "87110",
  "./ca": "43008",
  "./ca.js": "43008",
  "./cs": "20743",
  "./cs.js": "20743",
  "./cv": "35233",
  "./cv.js": "35233",
  "./cy": "24880",
  "./cy.js": "24880",
  "./da": "76103",
  "./da.js": "76103",
  "./de": "2781",
  "./de-at": "54828",
  "./de-at.js": "54828",
  "./de-ch": "98941",
  "./de-ch.js": "98941",
  "./de.js": "2781",
  "./dv": "22699",
  "./dv.js": "22699",
  "./el": "45997",
  "./el.js": "45997",
  "./en-au": "94829",
  "./en-au.js": "94829",
  "./en-ca": "83136",
  "./en-ca.js": "83136",
  "./en-gb": "55266",
  "./en-gb.js": "55266",
  "./en-ie": "69585",
  "./en-ie.js": "69585",
  "./en-il": "4793",
  "./en-il.js": "4793",
  "./en-in": "79131",
  "./en-in.js": "79131",
  "./en-nz": "79736",
  "./en-nz.js": "79736",
  "./en-sg": "65831",
  "./en-sg.js": "65831",
  "./eo": "8923",
  "./eo.js": "8923",
  "./es": "3905",
  "./es-do": "84268",
  "./es-do.js": "84268",
  "./es-mx": "58594",
  "./es-mx.js": "58594",
  "./es-us": "1742",
  "./es-us.js": "1742",
  "./es.js": "3905",
  "./et": "87344",
  "./et.js": "87344",
  "./eu": "68732",
  "./eu.js": "68732",
  "./fa": "33074",
  "./fa.js": "33074",
  "./fi": "22266",
  "./fi.js": "22266",
  "./fil": "29030",
  "./fil.js": "29030",
  "./fo": "51062",
  "./fo.js": "51062",
  "./fr": "21115",
  "./fr-ca": "50255",
  "./fr-ca.js": "50255",
  "./fr-ch": "4946",
  "./fr-ch.js": "4946",
  "./fr.js": "21115",
  "./fy": "738",
  "./fy.js": "738",
  "./ga": "23555",
  "./ga.js": "23555",
  "./gd": "62064",
  "./gd.js": "62064",
  "./gl": "69906",
  "./gl.js": "69906",
  "./gom-deva": "47743",
  "./gom-deva.js": "47743",
  "./gom-latn": "8219",
  "./gom-latn.js": "8219",
  "./gu": "47324",
  "./gu.js": "47324",
  "./he": "44376",
  "./he.js": "44376",
  "./hi": "70525",
  "./hi.js": "70525",
  "./hr": "74953",
  "./hr.js": "74953",
  "./hu": "77162",
  "./hu.js": "77162",
  "./hy-am": "8269",
  "./hy-am.js": "8269",
  "./id": "56133",
  "./id.js": "56133",
  "./is": "34248",
  "./is.js": "34248",
  "./it": "5432",
  "./it-ch": "37968",
  "./it-ch.js": "37968",
  "./it.js": "5432",
  "./ja": "60605",
  "./ja.js": "60605",
  "./jv": "12073",
  "./jv.js": "12073",
  "./ka": "99208",
  "./ka.js": "99208",
  "./kk": "70357",
  "./kk.js": "70357",
  "./km": "68406",
  "./km.js": "68406",
  "./kn": "58094",
  "./kn.js": "58094",
  "./ko": "52755",
  "./ko.js": "52755",
  "./ku": "36091",
  "./ku.js": "36091",
  "./ky": "51121",
  "./ky.js": "51121",
  "./lb": "9323",
  "./lb.js": "9323",
  "./lo": "68017",
  "./lo.js": "68017",
  "./lt": "28422",
  "./lt.js": "28422",
  "./lv": "42078",
  "./lv.js": "42078",
  "./me": "825",
  "./me.js": "825",
  "./mi": "41773",
  "./mi.js": "41773",
  "./mk": "60775",
  "./mk.js": "60775",
  "./ml": "13727",
  "./ml.js": "13727",
  "./mn": "97445",
  "./mn.js": "97445",
  "./mr": "78969",
  "./mr.js": "78969",
  "./ms": "26092",
  "./ms-my": "32178",
  "./ms-my.js": "32178",
  "./ms.js": "26092",
  "./mt": "80909",
  "./mt.js": "80909",
  "./my": "98378",
  "./my.js": "98378",
  "./nb": "46463",
  "./nb.js": "46463",
  "./ne": "89333",
  "./ne.js": "89333",
  "./nl": "64212",
  "./nl-be": "87496",
  "./nl-be.js": "87496",
  "./nl.js": "64212",
  "./nn": "81250",
  "./nn.js": "81250",
  "./oc-lnc": "1728",
  "./oc-lnc.js": "1728",
  "./pa-in": "82338",
  "./pa-in.js": "82338",
  "./pl": "25586",
  "./pl.js": "25586",
  "./pt": "56166",
  "./pt-br": "63124",
  "./pt-br.js": "63124",
  "./pt.js": "56166",
  "./ro": "84715",
  "./ro.js": "84715",
  "./ru": "59599",
  "./ru.js": "59599",
  "./sd": "86592",
  "./sd.js": "86592",
  "./se": "48916",
  "./se.js": "48916",
  "./si": "84228",
  "./si.js": "84228",
  "./sk": "17819",
  "./sk.js": "17819",
  "./sl": "50786",
  "./sl.js": "50786",
  "./sq": "4905",
  "./sq.js": "4905",
  "./sr": "15478",
  "./sr-cyrl": "47955",
  "./sr-cyrl.js": "47955",
  "./sr.js": "15478",
  "./ss": "43220",
  "./ss.js": "43220",
  "./sv": "22591",
  "./sv.js": "22591",
  "./sw": "42626",
  "./sw.js": "42626",
  "./ta": "59138",
  "./ta.js": "59138",
  "./te": "91821",
  "./te.js": "91821",
  "./tet": "53034",
  "./tet.js": "53034",
  "./tg": "61561",
  "./tg.js": "61561",
  "./th": "20370",
  "./th.js": "20370",
  "./tk": "48113",
  "./tk.js": "48113",
  "./tl-ph": "97743",
  "./tl-ph.js": "97743",
  "./tlh": "85970",
  "./tlh.js": "85970",
  "./tr": "16267",
  "./tr.js": "16267",
  "./tzl": "42925",
  "./tzl.js": "42925",
  "./tzm": "13483",
  "./tzm-latn": "73987",
  "./tzm-latn.js": "73987",
  "./tzm.js": "13483",
  "./ug-cn": "2433",
  "./ug-cn.js": "2433",
  "./uk": "7451",
  "./uk.js": "7451",
  "./ur": "30097",
  "./ur.js": "30097",
  "./uz": "24174",
  "./uz-latn": "41928",
  "./uz-latn.js": "41928",
  "./uz.js": "24174",
  "./vi": "73780",
  "./vi.js": "73780",
  "./x-pseudo": "10391",
  "./x-pseudo.js": "10391",
  "./yo": "35775",
  "./yo.js": "35775",
  "./zh-cn": "20635",
  "./zh-cn.js": "20635",
  "./zh-hk": "84000",
  "./zh-hk.js": "84000",
  "./zh-mo": "30360",
  "./zh-mo.js": "30360",
  "./zh-tw": "64314",
  "./zh-tw.js": "64314"
};


function webpackContext(req) {
  var id = webpackContextResolve(req);
  return __webpack_require__(id);
}
function webpackContextResolve(req) {
  if(!__webpack_require__.o(map, req)) {
    var e = new Error("Cannot find module '" + req + "'");
    e.code = 'MODULE_NOT_FOUND';
    throw e;
  }
  return map[req];
}
webpackContext.keys = function webpackContextKeys() {
  return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 12372;


}),
69147: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return StyleMapObserver;
    }
}));
const _merge = /*#__PURE__*/ _interop_require_default(__webpack_require__(90139));
const _tinycolor2 = /*#__PURE__*/ _interop_require_default(__webpack_require__(86304));
const _breakpointsconfig = __webpack_require__(66725);
const _breakpointids = __webpack_require__(82216);
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const STYLE_MAP_ATTR = 'data-wf-style-map';
/**
 * In order of application, where each query values
 * overrides the media queries above it.
 */ const orderedBreakpointIds = [
    _breakpointids.BREAKPOINT_ID_MAIN,
    _breakpointids.BREAKPOINT_ID_LARGE,
    _breakpointids.BREAKPOINT_ID_XL,
    _breakpointids.BREAKPOINT_ID_XXL,
    _breakpointids.BREAKPOINT_ID_MEDIUM,
    _breakpointids.BREAKPOINT_ID_SMALL,
    _breakpointids.BREAKPOINT_ID_TINY
];
const ORDERED_MEDIA_QUERIES = orderedBreakpointIds.map((breakpointId)=>{
    const config = _breakpointsconfig.LARGER_BREAKPOINTS_CONFIG[breakpointId];
    let prop;
    let value;
    // @ts-expect-error - TS18048 - 'config' is possibly 'undefined'.
    if ('minWidth' in config) {
        prop = 'min-width';
        value = config.minWidth;
    }
    // @ts-expect-error - TS18048 - 'config' is possibly 'undefined'.
    if ('maxWidth' in config) {
        prop = 'max-width';
        value = config.maxWidth;
    }
    if (prop === undefined || value === undefined) {
        throw new Error('Bad breakpoint config, expected either "minWidth" or "maxWidth".');
    }
    return {
        name: breakpointId,
        query: `(${prop}: ${value}px)`
    };
});
class StyleMapObserver {
    styles = undefined;
    observer = undefined;
    mediaQueries = [];
    options = {
        onChange: ()=>{}
    };
    static appliedStylesToStripeElementStyles = (appliedStylesMap)=>{
        if (!appliedStylesMap) {
            return {};
        }
        // Need to update color values to rgba because Stripe doesn't accept hsla format
        const appliedStylesMapWithUpdatedColorValues = Object.keys(appliedStylesMap).reduce((updatedStyles, styleKey)=>{
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"lang" | "active" | "placeholder" | "focus" | "after" | "before" | "hover" | "empty" | "noPseudo" | "nth-child(odd)" | "nth-child(even)" | "first-child" | "last-child" | "pressed" | "visited" | "focus-visible" | "focus-within", { ...; }>>'.
            const colorVal = appliedStylesMap[styleKey].color;
            const textShadowVal = // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"lang" | "active" | "placeholder" | "focus" | "after" | "before" | "hover" | "empty" | "noPseudo" | "nth-child(odd)" | "nth-child(even)" | "first-child" | "last-child" | "pressed" | "visited" | "focus-visible" | "focus-within", { ...; }>>'.
            appliedStylesMap[styleKey].textShadow && // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"lang" | "active" | "placeholder" | "focus" | "after" | "before" | "hover" | "empty" | "noPseudo" | "nth-child(odd)" | "nth-child(even)" | "first-child" | "last-child" | "pressed" | "visited" | "focus-visible" | "focus-within", { ...; }>>'.
            appliedStylesMap[styleKey].textShadow.split(/(?=hsla)/);
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"lang" | "active" | "placeholder" | "focus" | "after" | "before" | "hover" | "empty" | "noPseudo" | "nth-child(odd)" | "nth-child(even)" | "first-child" | "last-child" | "pressed" | "visited" | "focus-visible" | "focus-within", { ...; }>>'.
            updatedStyles[styleKey] = appliedStylesMap[styleKey];
            // Update color to rgba string
            if (colorVal) {
                updatedStyles[styleKey].color = (0, _tinycolor2.default)(colorVal).toRgbString();
            }
            // Want to update only if hsla val is within textShaodw string
            if (textShadowVal && textShadowVal.length > 1) {
                updatedStyles[styleKey].textShadow = textShadowVal[0] + (0, _tinycolor2.default)(textShadowVal[1]).toRgbString();
            }
            return updatedStyles;
        }, {});
        const styles = {
            ...appliedStylesMapWithUpdatedColorValues.noPseudo,
            ':hover': appliedStylesMapWithUpdatedColorValues.hover,
            ':focus': appliedStylesMapWithUpdatedColorValues.focus,
            '::placeholder': appliedStylesMapWithUpdatedColorValues.placeholder
        };
        return {
            base: styles,
            invalid: styles,
            empty: styles,
            complete: styles
        };
    };
    constructor(element, options){
        this.options = options;
        if (element.hasAttribute(STYLE_MAP_ATTR)) {
            const styleMapJSON = element.getAttribute(STYLE_MAP_ATTR);
            if (styleMapJSON) {
                this.setStylesFromJSON(styleMapJSON);
                const doc = element.ownerDocument;
                const win = doc.defaultView;
                this.mediaQueries = ORDERED_MEDIA_QUERIES.map((mq)=>({
                        ...mq,
                        // @ts-expect-error - TS18047 - 'win' is possibly 'null'.
                        listener: win.matchMedia(mq.query)
                    }));
                // @ts-expect-error - TS18047 - 'win' is possibly 'null'.
                this.observer = new win.MutationObserver(this.handleMutationObserver);
                this.observer.observe(element, {
                    attributes: true
                });
                this.mediaQueries.forEach(({ listener })=>{
                    listener.addListener(this.dispatch);
                });
                this.dispatch();
            }
        }
    }
    setStylesFromJSON(styleMapJSON) {
        try {
            this.styles = JSON.parse(styleMapJSON);
        } catch (e) {
            this.styles = {};
        }
    }
    getAppliedStyles() {
        if (!this.styles) {
            return;
        }
        const styles = this.styles;
        const appliedStyles = this.mediaQueries.reduce((stylesMap, { listener, name })=>listener.matches ? (0, _merge.default)(stylesMap, styles[name]) : stylesMap, {});
        return appliedStyles;
    }
    dispatch = ()=>{
        this.options.onChange(this.getAppliedStyles());
    };
    handleMutationObserver = (mutationList)=>{
        mutationList.forEach((mutation)=>{
            if (mutation.type === 'attributes' && mutation.attributeName === STYLE_MAP_ATTR && mutation.target.hasAttribute(STYLE_MAP_ATTR)) {
                const styleMapJSON = mutation.target.getAttribute(STYLE_MAP_ATTR);
                if (styleMapJSON) {
                    this.setStylesFromJSON(styleMapJSON);
                    this.dispatch();
                }
            }
        });
    };
    destroy() {
        if (this.observer) {
            this.observer.disconnect();
        }
        this.mediaQueries.forEach(({ listener })=>{
            listener.removeListener(this.dispatch);
        });
    }
}

//# sourceMappingURL=data:application/json;base64,

}),
84303: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/* globals document, window, Element, HTMLElement, CustomEvent, HTMLFormElement, HTMLInputElement, HTMLSelectElement, HTMLAnchorElement*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    register: function() {
        return register;
    }
});
const _graphqltag = /*#__PURE__*/ _interop_require_default(__webpack_require__(28160));
const _constants = __webpack_require__(10873);
const _constants1 = __webpack_require__(7462);
const _constants2 = __webpack_require__(29197);
const _constants3 = __webpack_require__(48935);
const _utils = __webpack_require__(73392);
const _get = /*#__PURE__*/ _interop_require_default(__webpack_require__(24738));
const _site = __webpack_require__(32949);
const _commerceUtils = __webpack_require__(54556);
const _RenderingUtils = __webpack_require__(86078);
const _CurrencyUtils = __webpack_require__(60937);
const _debug = /*#__PURE__*/ _interop_require_default(__webpack_require__(85986));
const _forEach = /*#__PURE__*/ _interop_require_default(__webpack_require__(32397));
const _find = /*#__PURE__*/ _interop_require_default(__webpack_require__(19777));
const _rendering = __webpack_require__(91898);
const _addToCartStore = __webpack_require__(21465);
const _PillGroup = __webpack_require__(14155);
const _siteBundles = __webpack_require__(66551);
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const { fetchFromStore, updateStore, addStoreWatcher } = (0, _addToCartStore.createNewStore)();
const getInstanceId = (form)=>{
    const instanceId = form.getAttribute(_constants.DATA_ATTR_COMMERCE_PRODUCT_ID);
    if (instanceId) {
        return instanceId;
    } else {
        throw new Error('Incorrect form instance provided, has no instance ID');
    }
};
function trackAddToCartUsage(skuId, count, itemPrice) {
    const { decimalValue, unit } = itemPrice;
    if (typeof fbq === 'function') {
        fbq('track', 'AddToCart', {
            value: count * decimalValue,
            currency: unit,
            content_ids: [
                skuId
            ],
            content_type: 'product',
            contents: [
                {
                    id: skuId,
                    quantity: count,
                    item_price: decimalValue
                }
            ]
        });
    }
    if (typeof gtag === 'function') {
        gtag('event', 'add_to_cart', {
            items: [
                {
                    id: skuId,
                    quantity: count,
                    price: decimalValue
                }
            ]
        });
    }
}
const addToCartMutation = (0, _graphqltag.default)`
  mutation AddToCart($skuId: String!, $count: Int!, $buyNow: Boolean) {
    ecommerceAddToCart(sku: $skuId, count: $count, buyNow: $buyNow) {
      ok
      itemId
      itemCount
      itemPrice {
        unit
        decimalValue
      }
    }
  }
`;
const collectionsQuery = `
      collections {
        c_sku_ {
          id
          items(filter: {f_product_: {eq: $productId}}) {
            id
            f_price_ {
              value
              unit
            }
            f_weight_
            f_width_
            f_length_
            f_height_
            f_sku_
            f_main_image_4dr {
              url
            }
            f_more_images_4dr {
              url
              alt
              file {
                origFileName
              }
            }
            f_sku_values_3dr {
              value {
                id
              }
              property {
                id
              }
            }
            inventory {
              type
              quantity
            }
            f_compare_at_price_7dr10dr {
              unit
              value
            }
            f_ec_sku_billing_method_2dr6dr14dr
          }
        }
        c_product_ {
          id
          items(filter: {id: {eq: $productId}}) {
            id
            f_default_sku_7dr {
              id
            }
            f_ec_product_type_2dr10dr {
              name
            }
          }
        }
      }`;
const getAllVariants = (0, _graphqltag.default)`
  query FetchAllVariants($productId: BasicId!) {
    database {
      id
      ${collectionsQuery}
    }
  }
`;
const getAllVariantsAndMemberships = (0, _graphqltag.default)`
  query FetchAllVariantsAndMemberships($productId: BasicId!) {
    database {
      id
      ${collectionsQuery}
      commerceMemberships(productIds: [$productId]) {
        productId
        orderId
        active
      }
    }
  }
`;
// @ts-expect-error - TS7006 - Parameter 'node' implicitly has an 'any' type.
const findCollectionItemWrapper = (node)=>{
    const dynamoItemSelector = `.${_constants3.CLASS_NAME_DYNAMIC_LIST_ITEM}:not(.${_constants3.CLASS_NAME_DYNAMIC_LIST_REPEATER_ITEM})`;
    return $(node).closest(dynamoItemSelector)[0] || document.body;
};
const addToCartFormEventTargetMatcher = (event)=>{
    if (event != null && event.target instanceof HTMLElement && event.target.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_ADD_TO_CART_FORM) {
        return event.target;
    }
    return false;
};
const getErrorType = (error)=>{
    const defaultErrorType = 'general';
    if (error && error.graphQLErrors && error.graphQLErrors.length > 0) {
        switch(error.graphQLErrors[0].code){
            case 'OutOfInventory':
                return 'quantity';
            case 'MixedCartError':
                return 'mixed-cart';
            default:
                return defaultErrorType;
        }
    }
    return defaultErrorType;
};
const handleAtcSubmit = (event, apolloClient)=>{
    event.preventDefault();
    const eventTarget = event.currentTarget;
    if (!(eventTarget instanceof HTMLFormElement && eventTarget.parentNode instanceof Element) || eventTarget.hasAttribute(_constants.ADD_TO_CART_LOADING)) {
        return;
    }
    const { parentNode } = eventTarget;
    const inputButton = eventTarget.querySelector('input[type="submit"]');
    if (!(0, _commerceUtils.isProtocolHttps)()) {
        window.alert('This site is currently unsecured so you cannot add products to your cart.');
        return;
    }
    if (!(inputButton instanceof HTMLInputElement)) {
        return;
    }
    const errorElement = parentNode.querySelector(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_ERROR}"]`);
    if (errorElement instanceof Element) {
        // @ts-expect-error - TS2339 - Property 'style' does not exist on type 'Element'.
        errorElement.style.display = 'none';
    }
    eventTarget.setAttribute(_constants.ADD_TO_CART_LOADING, '');
    const previousButtonValue = inputButton.value;
    // We moved the data here to the actual button node but will fallback to old value on the wrapper if not set
    const loadingTextFromButton = inputButton.getAttribute(_constants.DATA_ATTR_LOADING_TEXT);
    inputButton.value = loadingTextFromButton ? loadingTextFromButton : eventTarget.getAttribute(_constants.DATA_ATTR_LOADING_TEXT) || '';
    inputButton.setAttribute('aria-busy', 'true');
    const skuId = fetchFromStore(getInstanceId(eventTarget), 'selectedSku') || '';
    const formData = (0, _commerceUtils.formToObject)(eventTarget);
    const formCount = formData[_constants.NODE_NAME_COMMERCE_ADD_TO_CART_QUANTITY_INPUT];
    const count = formCount ? parseInt(formCount, 10) : 1;
    // if no SKU id, then all options need to be selected
    // this is only shown for pills, as dropdowns will be caught by reportValidity above
    if (!skuId && errorElement instanceof Element) {
        eventTarget.removeAttribute(_constants.ADD_TO_CART_LOADING);
        inputButton.value = previousButtonValue;
        inputButton.setAttribute('aria-busy', 'false');
        const errorMsg = errorElement.querySelector(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_ADD_TO_CART_ERROR}"]`);
        if (!errorMsg) {
            return;
        }
        const errorText = errorMsg.getAttribute((0, _constants.getATCErrorMessageForType)('select-all-options')) || 'Please select an option in each set.';
        errorMsg.textContent = errorText;
        // @ts-expect-error - TS2339 - Property 'style' does not exist on type 'Element'.
        errorElement.style.removeProperty('display');
        return;
    }
    // Redirect to sign up if the purchase requires a user session and there is none
    const requiresUserSession = fetchFromStore(getInstanceId(eventTarget), 'requiresUserSession');
    const hasUserSession = document.cookie.split(';').some((cookie)=>cookie.indexOf(_constants1.LOGGEDIN_COOKIE_NAME) > -1);
    if (requiresUserSession && !hasUserSession) {
        (0, _siteBundles.redirectWithUsrdir)(`/${_constants1.USYS_PAGE_SETTINGS.signup.slug}`);
        return;
    }
    apolloClient.mutate({
        mutation: addToCartMutation,
        variables: {
            skuId,
            count,
            buyNow: false
        }
    }).then(({ data })=>{
        (0, _commerceUtils.addLoadingCallback)(()=>{
            eventTarget.removeAttribute(_constants.ADD_TO_CART_LOADING);
            inputButton.value = previousButtonValue;
            inputButton.setAttribute('aria-busy', 'false');
            const cartElements = document.querySelectorAll(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_CART_WRAPPER}"][${_constants.DATA_ATTR_OPEN_PRODUCT}]`);
            cartElements.forEach((cart)=>{
                const evt = new CustomEvent(_constants.CHANGE_CART_EVENT, {
                    bubbles: true,
                    detail: {
                        open: true
                    }
                });
                cart.dispatchEvent(evt);
            });
        });
        (0, _commerceUtils.triggerRender)(null);
        const itemPrice = data.ecommerceAddToCart.itemPrice || {};
        trackAddToCartUsage(skuId, count, itemPrice);
    }).catch((error)=>{
        eventTarget.removeAttribute(_constants.ADD_TO_CART_LOADING);
        inputButton.value = previousButtonValue;
        inputButton.setAttribute('aria-busy', 'false');
        if (errorElement) {
            // @ts-expect-error - TS2339 - Property 'style' does not exist on type 'Element'.
            errorElement.style.removeProperty('display');
            const errorMsg = errorElement.querySelector(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_ADD_TO_CART_ERROR}"]`);
            if (!errorMsg) {
                return;
            }
            const errorMessage = (0, _constants.getATCErrorMessageForType)(getErrorType(error));
            const errorText = errorMsg.getAttribute(errorMessage) || '';
            errorMsg.textContent = errorText;
        }
        _debug.default.error(error);
        (0, _commerceUtils.triggerRender)(null);
    });
};
const addToCartOptionSelectEventTargetMatcher = (event)=>{
    if (event != null && event.target instanceof HTMLElement && event.target.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_SELECT) {
        return event.target;
    }
    return false;
};
const queryAllWithoutOtherItemWrapperContents = (collectionItemWrapper, selector)=>{
    return Array.from(collectionItemWrapper.querySelectorAll(selector)).filter((node)=>findCollectionItemWrapper(node) === collectionItemWrapper);
};
const queryAllReferenceRepeaters = (collectionItemWrapper)=>{
    return Array.from(collectionItemWrapper.querySelectorAll(`.${_constants3.CLASS_NAME_DYNAMIC_LIST_REPEATER_REF}`));
};
const removeClass = (element, className)=>{
    element && element.classList instanceof DOMTokenList && element.classList.remove(className);
    if (element.classList.length === 0) {
        element.removeAttribute('class');
    }
};
const showElement = (element)=>removeClass(element, 'w-dyn-hide');
const hideElement = (element)=>element && element.classList instanceof DOMTokenList && element.classList.add('w-dyn-hide');
const updateEmptyStateVisibility = (node, fn1, fn2)=>{
    const emptyStateNodes = Array.from(node.querySelectorAll('.w-dyn-empty'));
    const emptyStateMoreImageFieldNodes = emptyStateNodes.filter((n)=>{
        // @ts-expect-error - TS18046 - 'n' is of type 'unknown'.
        const itemsList = n.parentElement.querySelector('.w-dyn-items');
        return itemsList.dataset && itemsList.dataset.wfCollection && itemsList.dataset.wfCollection === 'f_more_images_4dr';
    });
    return emptyStateMoreImageFieldNodes && emptyStateMoreImageFieldNodes.map((n)=>{
        fn1(n);
        // @ts-expect-error - TS18046 - 'n' is of type 'unknown'.
        const itemsList = n.parentElement.querySelector('.w-dyn-items');
        if (itemsList && itemsList.dataset && itemsList.dataset.wfCollection && itemsList.dataset.wfCollection === 'f_more_images_4dr' && itemsList.classList instanceof DOMTokenList && itemsList.parentElement.classList.contains(_constants3.CLASS_NAME_DYNAMIC_LIST_REPEATER_REF)) {
            return fn2(itemsList);
        }
    });
};
const showEmptyStateAndHideItemsList = (node)=>{
    updateEmptyStateVisibility(node, showElement, hideElement);
};
const hideEmptyStateAndShowItemsList = (node)=>{
    updateEmptyStateVisibility(node, hideElement, showElement);
};
const updateDropdownsOnPage = (instanceId)=>(newSkuValues)=>{
        const dropdownsForProduct = Array.from(document.querySelectorAll(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_LIST}"][${_constants.DATA_ATTR_COMMERCE_PRODUCT_ID}="${instanceId}"] [${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_SELECT}"]`));
        for (const optionSetId of Object.keys(newSkuValues)){
            const optionSetValue = newSkuValues[optionSetId];
            const matchingDropdownsForOptionSet = dropdownsForProduct.filter((d)=>d.getAttribute(_constants.DATA_ATTR_COMMERCE_OPTION_SET_ID) === optionSetId);
            for (const dropdown of matchingDropdownsForOptionSet){
                dropdown.value = String(optionSetValue);
            }
        }
    };
const disableOptionsOnChange = ({ apolloClient, productId, optionSets, optionSetId })=>{
    apolloClient.query({
        query: getAllVariants,
        variables: {
            productId
        }
    }).then(({ data })=>{
        // That's a lot of question marks! What do they mean?
        // The `?.` is optional chaining, which lets you safely access deeply nested properties,
        // with it bailing out if the property doesn't exist: https://github.com/TC39/proposal-optional-chaining
        // The `??` is nullish coalescing, which is similar to `||` when wanting to ensure something is defined,
        // but only tripping if the value it's checking `null` or `undefined`, to prevent odd `false` and `false`-ish tripping false positives
        // https://github.com/tc39/proposal-nullish-coalescing
        const items = data?.database?.collections?.c_sku_?.items ?? [];
        // Get all the data we're going to use, we need to know which selectors were previously selected, which are currently
        // selected vs. which are not, and the most recently updated one
        const optionSetData = optionSets.reduce((parsedSelectorOptionSets, selectorOptionSet)=>{
            if (selectorOptionSet.value) {
                parsedSelectorOptionSets.selectedOptionSets.push(selectorOptionSet);
                if (selectorOptionSet.getAttribute(_constants.DATA_ATTR_COMMERCE_OPTION_SET_ID) === optionSetId) {
                    parsedSelectorOptionSets.recentlySelectedOptionSet = selectorOptionSet;
                } else {
                    parsedSelectorOptionSets.previouslySelectedOptionSets.push(selectorOptionSet);
                }
            } else {
                parsedSelectorOptionSets.unselectedOptionSets.push(selectorOptionSet);
            }
            return parsedSelectorOptionSets;
        }, {
            selectedOptionSets: [],
            recentlySelectedOptionSet: undefined,
            previouslySelectedOptionSets: [],
            unselectedOptionSets: []
        });
        let { selectedOptionSets, unselectedOptionSets } = optionSetData;
        const { recentlySelectedOptionSet, previouslySelectedOptionSets } = optionSetData;
        // Deselect previously selected option sets if they are uncompatible with the current selection.
        if (recentlySelectedOptionSet && selectedOptionSets.length > 1) {
            const recentlySelectedOptionSetValue = recentlySelectedOptionSet.value;
            (0, _forEach.default)(previouslySelectedOptionSets, (previouslySelectedOptionSet)=>{
                const optionSetValueCombinationWithMostRecent = [
                    recentlySelectedOptionSetValue,
                    previouslySelectedOptionSet.value
                ];
                // @ts-expect-error - TS7006 - Parameter 'item' implicitly has an 'any' type.
                const someAvailableItem = items.some((item)=>{
                    if (item.inventory.type === _constants.INVENTORY_TYPE_FINITE && item.inventory.quantity <= 0) {
                        return false;
                    }
                    const itemMappedBySkuValues = item.f_sku_values_3dr.map(// @ts-expect-error - TS7006 - Parameter 'skuValues' implicitly has an 'any' type.
                    (skuValues)=>skuValues.value.id);
                    return optionSetValueCombinationWithMostRecent.every((value)=>itemMappedBySkuValues.includes(value));
                });
                if (!someAvailableItem) {
                    previouslySelectedOptionSet.selectedIndex = 0;
                    selectedOptionSets = selectedOptionSets.filter(// @ts-expect-error - TS7006 - Parameter 'selectedOptionSet' implicitly has an 'any' type.
                    (selectedOptionSet)=>selectedOptionSet.getAttribute(_constants.DATA_ATTR_COMMERCE_OPTION_SET_ID) !== previouslySelectedOptionSet.getAttribute(_constants.DATA_ATTR_COMMERCE_OPTION_SET_ID));
                    unselectedOptionSets = unselectedOptionSets.concat(previouslySelectedOptionSet);
                }
            });
        }
        // For the (remaining after above deselection) selected ones we want to disable any options that simply have no possible stock
        (0, _forEach.default)(selectedOptionSets, (optionSet)=>{
            const id = optionSet.getAttribute(_constants.DATA_ATTR_COMMERCE_OPTION_SET_ID);
            (0, _forEach.default)(optionSet.options, (option)=>{
                if (!option.value) {
                    option.enabled = true;
                } else {
                    disableVariantsWithNoStock(items, id, option);
                }
            });
        });
        // For the remaining unselected ones we want to disable any options that aren't possible given current selections
        (0, _forEach.default)(unselectedOptionSets, (optionSet)=>{
            const id = optionSet.getAttribute(_constants.DATA_ATTR_COMMERCE_OPTION_SET_ID);
            disableVariantsWithNoStockForRemainingSelections(items, selectedOptionSets, optionSet, id);
        });
    });
};
const handleAtcOptionSelectChange = (event, apolloClient)=>{
    const eventTarget = event.currentTarget;
    if (!(eventTarget instanceof HTMLSelectElement)) {
        return;
    }
    // @ts-expect-error - TS2339 - Property 'jQuery' does not exist on type 'Window & typeof globalThis'.
    const $1 = window.jQuery;
    const optionSetId = eventTarget.getAttribute(_constants.DATA_ATTR_COMMERCE_OPTION_SET_ID);
    const optionSetValue = eventTarget.value;
    const optionListElement = $1(eventTarget).closest(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_LIST}"]`)[0];
    const addToCartForm = $1(eventTarget).closest(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_FORM}"]`)[0];
    if (!(optionListElement instanceof Element) || !optionSetId || !(addToCartForm instanceof HTMLFormElement)) {
        return;
    }
    const instanceId = getInstanceId(addToCartForm);
    const currentSkuValues = fetchFromStore(instanceId, 'skuValues');
    const newSkuValues = {
        ...currentSkuValues,
        [optionSetId]: optionSetValue
    };
    updateStore(instanceId, {
        skuValues: newSkuValues
    });
    const productId = optionListElement && optionListElement.getAttribute(_constants.DATA_ATTR_COMMERCE_PRODUCT_ID);
    const allVariantSelectorsInCartForm = (0, _commerceUtils.findAllElementsByNodeType)(_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_SELECT, addToCartForm);
    if (productId && allVariantSelectorsInCartForm.length > 0) {
        disableOptionsOnChange({
            apolloClient,
            productId,
            optionSets: allVariantSelectorsInCartForm,
            optionSetId
        });
    }
};
const updateSkuBindings = (binding, node, newSkuItem)=>{
    if ([
        'f_weight_',
        'f_width_',
        'f_length_',
        'f_height_',
        'f_sku_'
    ].some((slug)=>binding.from === slug)) {
        node[binding.to === 'innerHTML' ? 'innerText' : binding.to] = newSkuItem[binding.from] || '';
        updateTextNodeVisibility(node);
    }
    if (binding.from === 'f_price_' && newSkuItem.f_price_) {
        node[binding.to === 'innerHTML' ? 'innerText' : binding.to] = (0, _CurrencyUtils.renderPriceFromSettings)(newSkuItem.f_price_, // @ts-expect-error - TS2339 - Property '__WEBFLOW_CURRENCY_SETTINGS' does not exist on type 'Window & typeof globalThis'.
        window.__WEBFLOW_CURRENCY_SETTINGS);
        updateTextNodeVisibility(node);
    }
    if (binding.from === 'f_compare_at_price_7dr10dr') {
        if (newSkuItem.f_compare_at_price_7dr10dr) {
            // if compare-at is available, apply the binding
            node[binding.to === 'innerHTML' ? 'innerText' : binding.to] = (0, _CurrencyUtils.renderPriceFromSettings)(newSkuItem.f_compare_at_price_7dr10dr, // @ts-expect-error - TS2339 - Property '__WEBFLOW_CURRENCY_SETTINGS' does not exist on type 'Window & typeof globalThis'.
            window.__WEBFLOW_CURRENCY_SETTINGS);
        } else {
            // otherwise, we need to specifically clear it; it could have been set
            // by a previously-selected product option
            node[binding.to === 'innerHTML' ? 'innerText' : binding.to] = '';
        }
        updateTextNodeVisibility(node);
    }
    if (binding.from === 'f_main_image_4dr' || binding.from === 'f_main_image_4dr.url') {
        const mainImage = (0, _get.default)(newSkuItem, binding.from.replace(/\.url$/, ''));
        if (binding.to === 'style.background-image') {
            node.style.backgroundImage = mainImage && mainImage.url ? `url("${mainImage.url}")` : 'none';
        } else if (binding.to === 'media') {
            if (node.classList.contains('w-lightbox')) {
                updateLightboxJson(node, mainImage);
            }
        } else if (binding.to === 'src') {
            if (mainImage && mainImage.url) {
                node.src = mainImage.url;
                (0, _RenderingUtils.removeWDynBindEmptyClass)(node);
                // Temporary solution for responsive images for product variants
                if (node.hasAttribute('srcset')) {
                    node.removeAttribute('srcset');
                }
            } else {
                node.removeAttribute('src');
                node.classList.add(_constants2.CLASS_NAME_W_DYN_BIND_EMPTY);
            }
        }
    }
    if (binding.from === 'f_more_images_4dr' || binding.from.startsWith('f_more_images_4dr.')) {
        const image = (0, _get.default)(newSkuItem, binding.from.replace(/\.url$/, ''));
        if (binding.to === 'style.background-image') {
            node.style.backgroundImage = image ? `url("${image.url}")` : 'none';
        } else if (binding.to === 'media') {
            if (node.classList.contains('w-lightbox')) {
                updateLightboxJson(node, image);
            }
        } else if (binding.to === 'src') {
            if (image && image.url) {
                node.src = image.url;
                node.alt = image.alt || '';
                (0, _RenderingUtils.removeWDynBindEmptyClass)(node);
                // Temporary solution for responsive images for product variants
                if (node.hasAttribute('srcset')) {
                    node.removeAttribute('srcset');
                    node.removeAttribute('sizes');
                }
            } else {
                node.removeAttribute('src');
                node.removeAttribute('srcset');
                node.removeAttribute('sizes');
                node.removeAttribute('alt');
                node.classList.add(_constants2.CLASS_NAME_W_DYN_BIND_EMPTY);
            }
        }
    }
    if (binding.from === 'ecSkuInventoryQuantity') {
        const inventoryQuantity = (0, _get.default)(newSkuItem, 'inventory.type') === 'infinite' ? null : (0, _get.default)(newSkuItem, 'inventory.quantity');
        node[binding.to === 'innerHTML' ? 'innerText' : binding.to] = inventoryQuantity;
        updateTextNodeVisibility(node);
    }
};
const updatePageWithNewSkuValuesData = (instanceId, apolloClient)=>(newSkuValues)=>{
        // @ts-expect-error - TS2339 - Property 'jQuery' does not exist on type 'Window & typeof globalThis'.
        const $1 = window.jQuery;
        apolloClient.query({
            query: getAllVariants,
            variables: {
                productId: instanceId
            }
        }).then(({ data })=>{
            const items = data?.database?.collections?.c_sku_?.items ?? [];
            const products = data?.database?.collections?.c_product_?.items ?? [];
            const productType = products[0] ? products[0].f_ec_product_type_2dr10dr.name : 'Advanced';
            const newSkuItem = (0, _find.default)(items, (item)=>{
                if (item.f_sku_values_3dr && Array.isArray(item.f_sku_values_3dr)) {
                    const skuValues = (0, _site.simplifySkuValues)(item.f_sku_values_3dr);
                    return Object.keys(newSkuValues).every((key)=>newSkuValues[key] === skuValues[key]);
                }
            });
            if (newSkuItem && newSkuItem.id) {
                updateStore(instanceId, {
                    selectedSku: newSkuItem.id
                });
                if (newSkuItem['f_ec_sku_billing_method_2dr6dr14dr'] === 'subscription' || productType === 'Membership') {
                    updateStore(instanceId, {
                        requiresUserSession: true
                    });
                }
                const formsForProduct = document.querySelectorAll(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_FORM}"][${_constants.DATA_ATTR_COMMERCE_PRODUCT_ID}="${instanceId}"]`);
                Array.from(formsForProduct).forEach((addToCartForm)=>{
                    const collectionItemWrapper = findCollectionItemWrapper(addToCartForm);
                    const referenceRepeaters = queryAllReferenceRepeaters(collectionItemWrapper);
                    // Update the state of the buy now button text to handle subscription
                    const buyNowButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_BUY_NOW_BUTTON, addToCartForm);
                    if (buyNowButton) {
                        if (newSkuItem['f_ec_sku_billing_method_2dr6dr14dr'] === 'subscription') {
                            const addToCartButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_BUTTON, addToCartForm);
                            const buyNowSubscriptionText = buyNowButton.getAttribute(_constants.DATA_ATTR_SUBSCRIPTION_TEXT) || 'Subscribe now';
                            hideElement(addToCartButton);
                            buyNowButton.innerText = buyNowSubscriptionText;
                        } else {
                            const buyNowDefaultText = buyNowButton.getAttribute(_constants.DATA_ATTR_DEFAULT_TEXT) || 'Buy now';
                            buyNowButton.innerText = buyNowDefaultText;
                        }
                    }
                    const moreImagesFieldLength = newSkuItem.f_more_images_4dr && newSkuItem.f_more_images_4dr.length || 0;
                    if (referenceRepeaters.length > 0) {
                        referenceRepeaters.forEach((referenceRepeater)=>{
                            // @ts-expect-error - TS2345 - Argument of type 'unknown' is not assignable to parameter of type 'Element'.
                            (0, _rendering.renderTree)(referenceRepeater, {
                                data: newSkuItem
                            });
                            if (moreImagesFieldLength > 0) {
                                hideEmptyStateAndShowItemsList(referenceRepeater);
                            } else {
                                showEmptyStateAndHideItemsList(referenceRepeater);
                            }
                        });
                    }
                    const skuBoundNodes = queryAllWithoutOtherItemWrapperContents(collectionItemWrapper, `[${_constants.WF_SKU_BINDING_DATA_KEY}]`);
                    (0, _forEach.default)(skuBoundNodes, (node)=>{
                        // @ts-expect-error - TS18046 - 'node' is of type 'unknown'.
                        const skuBindingsData = node.getAttribute(_constants.WF_SKU_BINDING_DATA_KEY);
                        if (skuBindingsData) {
                            const skuBindings = (0, _commerceUtils.safeParseJson)(skuBindingsData);
                            if (Array.isArray(skuBindings)) {
                                skuBindings.forEach((binding)=>updateSkuBindings(binding, node, newSkuItem));
                            }
                        }
                    });
                    const skuConditionBoundNodes = queryAllWithoutOtherItemWrapperContents(collectionItemWrapper, `[${_constants.WF_SKU_CONDITION_DATA_KEY}]`);
                    (0, _forEach.default)(skuConditionBoundNodes, (node)=>{
                        const conditionData = (0, _commerceUtils.safeParseJson)(// @ts-expect-error - TS18046 - 'node' is of type 'unknown'.
                        node.getAttribute(_constants.WF_SKU_CONDITION_DATA_KEY));
                        if (conditionData) {
                            (0, _rendering.applySkuBoundConditionalVisibility)({
                                conditionData,
                                newSkuItem,
                                // @ts-expect-error - TS2322 - Type 'unknown' is not assignable to type 'Element'.
                                node
                            });
                        }
                    });
                    const errorElement = $1(collectionItemWrapper).siblings(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_ERROR}"]`)[0];
                    if (errorElement instanceof Element) {
                        // @ts-expect-error - TS2339 - Property 'style' does not exist on type 'Element'.
                        errorElement.style.display = 'none';
                    }
                });
                // In case there are lightboxes bound, we need to initialize the events again after each script
                // was updated with the right data in updateSkuBindings
                if (window.Webflow.require('lightbox')) {
                    window.Webflow.require('lightbox').ready();
                }
            } else {
                // if we can't find a valid SKU, we've deselected one of the variant selectors
                // as such, we need to clear the selected SKU in the store
                updateStore(instanceId, {
                    selectedSku: ''
                });
            }
        });
    };
const updateSkuValuesOnPillSelect = (instanceId, apolloClient)=>// @ts-expect-error - TS7031 - Binding element 'optionId' implicitly has an 'any' type. | TS7031 - Binding element 'optionSetId' implicitly has an 'any' type. | TS7031 - Binding element 'groups' implicitly has an 'any' type.
    ({ optionId, optionSetId, groups })=>{
        const currentSkuValues = fetchFromStore(instanceId, 'skuValues');
        const newSkuValues = {
            ...currentSkuValues,
            [optionSetId]: optionId
        };
        updateStore(instanceId, {
            skuValues: newSkuValues
        });
        disableOptionsOnChange({
            apolloClient,
            productId: instanceId,
            optionSets: Object.values(groups),
            optionSetId
        });
    };
const handleAtcPageLoad = (event, apolloClient, stripeStore)=>{
    if (!(event instanceof CustomEvent && event.type === _constants.RENDER_TREE_EVENT)) {
        return;
    }
    const addToCartForms = document.querySelectorAll(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_FORM}"]`);
    // allow pills to work only in preview
    if (window.Webflow.env('preview')) {
        if (event.detail.isInitial) {
            (0, _forEach.default)(addToCartForms, (addToCartForm)=>{
                // set up pill groups
                const groups = new _PillGroup.PillGroups(// @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                addToCartForm, ({ optionId, optionSetId })=>{
                    groups.setSelectedPillsForSkuValues({
                        [optionSetId]: optionId
                    });
                });
                groups.init();
            });
        }
        return;
    }
    // otherwise, return for designer
    if (window.Webflow.env('design')) {
        return;
    }
    (0, _forEach.default)(addToCartForms, (addToCartForm)=>{
        const addToCartButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_BUTTON, addToCartForm);
        // If this form has an add to cart button, set the `aria-haspopup` to `dialog` or `false`
        // depending on at least one Cart element having the setting for "Open when product is added"
        if (addToCartButton) {
            const cartElementsThatOpenOnAdd = document.querySelectorAll(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_CART_WRAPPER}"][${_constants.DATA_ATTR_OPEN_PRODUCT}]`);
            addToCartButton.setAttribute('aria-haspopup', cartElementsThatOpenOnAdd.length > 0 ? 'dialog' : 'false');
        }
        const buyNowButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_BUY_NOW_BUTTON, addToCartForm);
        // Hide the Buy now button if Stripe is not connected
        if (stripeStore && !stripeStore.isInitialized()) {
            if (buyNowButton) {
                hideElement(buyNowButton);
            }
        }
        // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLFormElement'.
        const instanceId = getInstanceId(addToCartForm);
        if (event.detail.isInitial) {
            // only set the selected SKU from the DOM on the initial render event, as after that we want to
            // rely on the store as the source of truth. without this, the selected SKU could get reset on any render
            updateStore(instanceId, {
                // @ts-expect-error - TS2322 - Type 'string | null' is not assignable to type 'string | undefined'.
                selectedSku: addToCartForm instanceof Element ? addToCartForm.getAttribute(_constants.DATA_ATTR_COMMERCE_SKU_ID) : ''
            });
            // add watcher for sku values change to update the page as needed
            addStoreWatcher(instanceId, 'skuValues', updatePageWithNewSkuValuesData(instanceId, apolloClient));
            // add watcher for dropdowns to update on sku change
            addStoreWatcher(instanceId, 'skuValues', updateDropdownsOnPage(instanceId));
            // set up pill groups
            // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
            if (_PillGroup.PillGroups.hasPillGroups(addToCartForm)) {
                const pillGroup = new _PillGroup.PillGroups(// @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                addToCartForm, updateSkuValuesOnPillSelect(instanceId, apolloClient));
                addStoreWatcher(instanceId, 'skuValues', (newSkuValues)=>{
                    pillGroup.setSelectedPillsForSkuValues(newSkuValues);
                });
                pillGroup.init();
            }
        }
        const currentSkuId = fetchFromStore(instanceId, 'selectedSku');
        if (!currentSkuId) {
            return;
        }
        const productId = addToCartForm && addToCartForm.getAttribute(_constants.DATA_ATTR_COMMERCE_PRODUCT_ID);
        if (productId) {
            apolloClient.query({
                query: getAllVariantsAndMemberships,
                variables: {
                    productId
                }
            }).then(({ data })=>{
                const items = data?.database?.collections?.c_sku_?.items ?? [];
                const products = data?.database?.collections?.c_product_?.items ?? [];
                const productType = products[0] ? products[0].f_ec_product_type_2dr10dr.name : 'Advanced';
                // build the possible sku values for the given product
                // since all items have the same sku values, we just use the first
                // then we iterate over the skus, and create an object of [propertyId: string]: ''
                // to represent that by default, no property has been selected yet
                if (event.detail.isInitial && items[0].f_sku_values_3dr && items[0].f_sku_values_3dr.length > 0) {
                    // @ts-expect-error - TS2347 - Untyped function calls may not accept type arguments.
                    const skuValuesMap = items[0].f_sku_values_3dr.reduce((map, sku)=>{
                        map[sku.property.id] = '';
                        return map;
                    }, {});
                    updateStore(instanceId, {
                        skuValues: skuValuesMap
                    });
                }
                const memberships = data?.database?.commerceMemberships ?? [];
                const hasActiveMemebership = Boolean(memberships[0]?.active);
                if (hasActiveMemebership) {
                    if (buyNowButton) {
                        buyNowButton.removeAttribute('href');
                        // without href <a> doesn't have an implicit role, so adding it back here for accesibility
                        buyNowButton.setAttribute('role', 'link');
                        buyNowButton.setAttribute('aria-disabled', 'true');
                        buyNowButton.classList.add('w--ecommerce-buy-now-disabled');
                    }
                    if (addToCartButton) {
                        addToCartButton.setAttribute('disabled', 'true');
                        addToCartButton.classList.add('w--ecommerce-add-to-cart-disabled');
                    }
                }
                // @ts-expect-error - TS7006 - Parameter 'item' implicitly has an 'any' type.
                const currentSku = items.find((item)=>item.id === currentSkuId);
                if (currentSku) {
                    if (currentSku['f_ec_sku_billing_method_2dr6dr14dr'] === 'subscription' || productType === 'Membership') {
                        updateStore(instanceId, {
                            requiresUserSession: true
                        });
                    }
                    // Set buy now text to subscription state if subscription
                    if (currentSku['f_ec_sku_billing_method_2dr6dr14dr'] === 'subscription') {
                        hideElement(addToCartButton);
                        if (buyNowButton) {
                            const buyNowSubscriptionText = buyNowButton.getAttribute(_constants.DATA_ATTR_SUBSCRIPTION_TEXT) || 'Subscribe now';
                            buyNowButton.innerText = buyNowSubscriptionText;
                        }
                    } else if (buyNowButton) {
                        const buyNowDefaultText = buyNowButton.getAttribute(_constants.DATA_ATTR_DEFAULT_TEXT) || 'Buy now';
                        buyNowButton.innerText = buyNowDefaultText;
                    }
                    const addToCartWrapper = addToCartForm.parentElement;
                    const optionListElement = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_LIST, // @ts-expect-error - TS2345 - Argument of type 'HTMLElement | null' is not assignable to parameter of type 'Document | Element | undefined'.
                    addToCartWrapper);
                    const outOfStockState = addToCartWrapper && addToCartWrapper.getElementsByClassName('w-commerce-commerceaddtocartoutofstock')[0];
                    // Check if exist a variant with stock
                    const hasVariantsWithStock = items.some(// @ts-expect-error - TS7006 - Parameter 'variant' implicitly has an 'any' type.
                    (variant)=>variant.inventory.type === _constants.INVENTORY_TYPE_FINITE && variant.inventory.quantity > 0 || variant.inventory.type === _constants.INVENTORY_TYPE_INFINITE);
                    if (!hasVariantsWithStock && outOfStockState) {
                        // @ts-expect-error - TS2339 - Property 'style' does not exist on type 'Element'.
                        outOfStockState.style.display = '';
                        // @ts-expect-error - TS2339 - Property 'style' does not exist on type 'Element'.
                        addToCartForm.style.display = 'none';
                    }
                    // Update select options based on stock
                    const optionSetsToUpdate = items[0].f_sku_values_3dr.map(// @ts-expect-error - TS7006 - Parameter 'skuValue' implicitly has an 'any' type.
                    (skuValue)=>skuValue.property.id);
                    // @ts-expect-error - TS7006 - Parameter 'optionToUpdateSetId' implicitly has an 'any' type.
                    optionSetsToUpdate.forEach((optionToUpdateSetId)=>{
                        // Get the select we will update
                        let optionSet = addToCartForm.querySelector(`[${_constants.DATA_ATTR_COMMERCE_OPTION_SET_ID}="${optionToUpdateSetId}"]`);
                        if (!(optionSet instanceof HTMLElement)) {
                            return;
                        }
                        const optionSetId = optionSet.getAttribute(_constants.DATA_ATTR_COMMERCE_OPTION_SET_ID);
                        if (optionSet.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_ADD_TO_CART_PILL_GROUP) {
                            // if we're using a pill group, we need to get the PillGroup class for the given element
                            // so that we have access to the getters we defined to give us compatibility with the `select` API
                            // @ts-expect-error - TS2339 - Property '_wfPillGroup' does not exist on type 'HTMLElement'.
                            optionSet = optionSet._wfPillGroup;
                        }
                        // @ts-expect-error - TS18047 - 'optionSet' is possibly 'null'. | TS2339 - Property 'options' does not exist on type 'Element'.
                        (0, _forEach.default)(optionSet.options, (option)=>{
                            // Get the variant that has the current option combined with other selected options that in this case, since it's in the on load
                            // it will be the default variant
                            if (!option.value) {
                                // The default options should be always enabled
                                option.enabled = true;
                            } else {
                                disableVariantsWithNoStock(items, optionSetId, option);
                            }
                        });
                        // Make sure that if this is render occurs with option sets already selected that we disable based on available options
                        const selectedOptionSets = optionSetsToUpdate.filter(// @ts-expect-error - TS7006 - Parameter 'optionSetToUpdate' implicitly has an 'any' type.
                        (optionSetToUpdate)=>optionSetToUpdate.value);
                        disableVariantsWithNoStockForRemainingSelections(items, selectedOptionSets, optionSet, optionSetId);
                        // Preselect the default variant if setting has been enabled and initial render
                        if (event.detail.isInitial && optionListElement && optionListElement.getAttribute(_constants.DATA_ATTR_PRESELECT_DEFAULT_VARIANT) === 'true') {
                            const defaultSkuId = (0, _get.default)(data, [
                                'database',
                                'collections',
                                'c_product_',
                                'items',
                                0,
                                'f_default_sku_7dr',
                                'id'
                            ]);
                            const defaultSku = items.find(// @ts-expect-error - TS7006 - Parameter 'item' implicitly has an 'any' type.
                            (item)=>item.id === defaultSkuId);
                            // Ensure the default variant is in stock before preselecting
                            if (defaultSku && !(defaultSku.inventory.type === _constants.INVENTORY_TYPE_FINITE && defaultSku.inventory.quantity <= 0)) {
                                const defaultSkuIndex = Array.from(// @ts-expect-error - TS18047 - 'optionSet' is possibly 'null'. | TS2339 - Property 'options' does not exist on type 'Element'.
                                optionSet.options).findIndex((option)=>defaultSku.f_sku_values_3dr.some(// @ts-expect-error - TS7006 - Parameter 'value' implicitly has an 'any' type. | TS18046 - 'option' is of type 'unknown'.
                                    (value)=>value.value.id === option.value));
                                if (defaultSkuIndex > -1) {
                                    // @ts-expect-error - TS18047 - 'optionSet' is possibly 'null'. | TS2339 - Property 'selectedIndex' does not exist on type 'Element'.
                                    optionSet.selectedIndex = defaultSkuIndex;
                                    updateStore(instanceId, {
                                        selectedSku: defaultSku.id,
                                        // update the sku values map to set each property id to the value id
                                        // for the current variant
                                        skuValues: (0, _site.simplifySkuValues)(defaultSku.f_sku_values_3dr)
                                    });
                                }
                            }
                        }
                    });
                }
            });
        }
    });
};
const disableVariantsWithNoStockForRemainingSelections = (items, // @ts-expect-error - TS7006 - Parameter 'selectedOptionSets' implicitly has an 'any' type.
selectedOptionSets, optionSet, id)=>{
    // Get all the possible variants given our current selections
    // @ts-expect-error - TS7006 - Parameter 'item' implicitly has an 'any' type.
    let possibleVariantSelections = items.filter((item)=>{
        const itemMappedBySkuValues = item.f_sku_values_3dr.map(// @ts-expect-error - TS7006 - Parameter 'skuValues' implicitly has an 'any' type.
        (skuValues)=>skuValues.value.id);
        const currentlySelectedSkuValues = selectedOptionSets.map(// @ts-expect-error - TS7006 - Parameter 'selectedOptionSet' implicitly has an 'any' type.
        (selectedOptionSet)=>selectedOptionSet.value);
        // @ts-expect-error - TS7006 - Parameter 'selectedValue' implicitly has an 'any' type.
        return currentlySelectedSkuValues.every((selectedValue)=>itemMappedBySkuValues.includes(selectedValue));
    });
    // Reset them if there is only 1 left i.e. user has selected all 3 options
    if (possibleVariantSelections.length === 1) {
        possibleVariantSelections = items;
    }
    (0, _forEach.default)(optionSet.options, (option)=>{
        // Get the variant that has the current option combined with other selected options that in this case, since it's in the on load
        // it will be the default variant
        if (!option.value) {
            // The default options should be always enabled
            option.enabled = true;
        } else {
            // @ts-expect-error - TS7006 - Parameter 'variant' implicitly has an 'any' type.
            const variantsFiltered = possibleVariantSelections.filter((variant)=>{
                const sku = variant.f_sku_values_3dr.find(// @ts-expect-error - TS7006 - Parameter 'value' implicitly has an 'any' type.
                (value)=>value.property.id === id);
                return sku.value.id === option.value;
            });
            const hasVariantsWithStock = variantsFiltered.some(// @ts-expect-error - TS7006 - Parameter 'variant' implicitly has an 'any' type.
            (variant)=>variant.inventory.type === _constants.INVENTORY_TYPE_FINITE && variant.inventory.quantity > 0 || variant.inventory.type === _constants.INVENTORY_TYPE_INFINITE);
            if (!hasVariantsWithStock) {
                option.disabled = true;
            } else {
                option.disabled = false;
            }
        }
    });
};
const disableVariantsWithNoStock = (items, optionSetId, option)=>{
    if (!option.value) {
        return;
    }
    // @ts-expect-error - TS7006 - Parameter 'variant' implicitly has an 'any' type.
    const variantsFiltered = items.filter((variant)=>{
        const sku = variant.f_sku_values_3dr.find(// @ts-expect-error - TS7006 - Parameter 'value' implicitly has an 'any' type.
        (value)=>value.property.id === optionSetId);
        return sku.value.id === option.value;
    });
    const hasVariantsWithStock = variantsFiltered.some(// @ts-expect-error - TS7006 - Parameter 'variant' implicitly has an 'any' type.
    (variant)=>variant.inventory.type === _constants.INVENTORY_TYPE_FINITE && variant.inventory.quantity > 0 || variant.inventory.type === _constants.INVENTORY_TYPE_INFINITE);
    if (!hasVariantsWithStock) {
        option.disabled = true;
    } else {
        option.disabled = false;
    }
};
const updateTextNodeVisibility = (node)=>{
    if (node.innerText) {
        (0, _RenderingUtils.removeWDynBindEmptyClass)(node);
    }
    if (!node.innerText && !node.classList.contains(_constants2.CLASS_NAME_W_DYN_BIND_EMPTY)) {
        node.classList.add(_constants2.CLASS_NAME_W_DYN_BIND_EMPTY);
    }
};
const updateLightboxJson = (node, binding)=>{
    const lightboxScript = node.querySelector('script.w-json');
    if (lightboxScript) {
        const nodeJsonData = JSON.parse(lightboxScript.innerHTML);
        // if the JSON created from bound media is `null`,
        // we replace `script` tag contents with placeholder data
        // that retains the `group` property
        lightboxScript.innerHTML = JSON.stringify((0, _utils.createJsonFromBoundMedia)(binding, nodeJsonData) || {
            items: [],
            group: nodeJsonData && nodeJsonData.group
        });
    }
};
// @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
const isBuyNowButtonEvent = ({ target })=>target instanceof Element && target.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_BUY_NOW_BUTTON;
// @ts-expect-error - TS2314 - Generic type 'ApolloClient<TCacheShape>' requires 1 type argument(s).
const handleBuyNow = (event, apolloClient)=>{
    event.preventDefault();
    // Don't try and do anything in preview mode
    if (window.Webflow.env('preview')) {
        return;
    }
    const buyNowButton = event.target;
    const addToCartForm = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_FORM, // @ts-expect-error - TS2345 - Argument of type 'EventTarget | null' is not assignable to parameter of type 'EventTarget'.
    buyNowButton);
    if (!(buyNowButton instanceof HTMLAnchorElement) || !(addToCartForm instanceof HTMLFormElement)) {
        return;
    }
    if (buyNowButton.classList.contains('w--ecommerce-buy-now-disabled')) {
        return;
    }
    const addToCartWrapper = addToCartForm.parentElement;
    if (!(addToCartWrapper instanceof Element)) {
        return;
    }
    const addToCartErrorElement = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_ERROR, addToCartWrapper);
    if (!(addToCartErrorElement instanceof Element)) {
        return;
    }
    addToCartErrorElement.style.display = 'none';
    if (!(0, _commerceUtils.isProtocolHttps)()) {
        window.alert('This site is currently unsecured so you cannot purchase this item.');
        return;
    }
    // Confirm atc selection is valid
    if (!addToCartForm.reportValidity()) {
        return;
    }
    // Redirect to sign up if the purchase requires a user session and there is none
    const requiresUserSession = fetchFromStore(getInstanceId(addToCartForm), 'requiresUserSession');
    const hasUserSession = document.cookie.split(';').some((cookie)=>cookie.indexOf(_constants1.LOGGEDIN_COOKIE_NAME) > -1);
    if (requiresUserSession && !hasUserSession) {
        (0, _siteBundles.redirectWithUsrdir)(`/${_constants1.USYS_PAGE_SETTINGS.signup.slug}`);
        return;
    }
    const publishableKey = buyNowButton.getAttribute(_constants.DATA_ATTR_PUBLISHABLE_KEY);
    // If no publishable key checkout is not enabled
    if (!publishableKey) {
        const errorMsg = addToCartErrorElement.querySelector(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_ADD_TO_CART_ERROR}"]`);
        if (!errorMsg) {
            return;
        }
        const errorText = errorMsg.getAttribute(_constants.CHECKOUT_DISABLED_ERROR_MESSAGE) || 'Checkout is disabled.';
        errorMsg.textContent = errorText;
        addToCartErrorElement.style.removeProperty('display');
        return;
    }
    const skuId = fetchFromStore(getInstanceId(addToCartForm), 'selectedSku') || '';
    const formData = (0, _commerceUtils.formToObject)(addToCartForm);
    const formCount = formData[_constants.NODE_NAME_COMMERCE_ADD_TO_CART_QUANTITY_INPUT];
    const count = formCount ? parseInt(formCount, 10) : 1;
    // if no SKU id, then all options need to be selected
    // this is only shown for pills, as dropdowns will be caught by reportValidity above
    if (!skuId) {
        const errorMsg = addToCartErrorElement.querySelector(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_ADD_TO_CART_ERROR}"]`);
        if (!errorMsg) {
            return;
        }
        const errorText = errorMsg.getAttribute((0, _constants.getATCErrorMessageForType)('select-all-options')) || 'Please select an option in each set.';
        errorMsg.textContent = errorText;
        addToCartErrorElement.style.removeProperty('display');
        return;
    }
    apolloClient.mutate({
        mutation: addToCartMutation,
        variables: {
            skuId,
            count,
            buyNow: true
        }
    })// @ts-expect-error - TS7031 - Binding element 'data' implicitly has an 'any' type.
    .then(({ data })=>{
        const itemPrice = data.ecommerceAddToCart.itemPrice || {};
        trackAddToCartUsage(skuId, count, itemPrice);
        // @ts-expect-error - TS2322 - Type 'string' is not assignable to type 'Location | (string & Location)'.
        window.location = buyNowButton.href;
    })// @ts-expect-error - TS7006 - Parameter 'error' implicitly has an 'any' type.
    .catch((error)=>{
        if (addToCartErrorElement) {
            addToCartErrorElement.style.removeProperty('display');
            const errorMsg = addToCartErrorElement.querySelector(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_ADD_TO_CART_ERROR}"]`);
            if (!errorMsg) {
                return;
            }
            const errorType = error.graphQLErrors && error.graphQLErrors.length > 0 && error.graphQLErrors[0].code === 'OutOfInventory' ? 'quantity' : 'buy-now';
            const errorText = errorMsg.getAttribute((0, _constants.getATCErrorMessageForType)(errorType)) || '';
            errorMsg.textContent = errorText;
        }
        _debug.default.error(error);
        (0, _commerceUtils.triggerRender)(null);
    });
};
const register = (handlerProxy)=>{
    handlerProxy.on('submit', addToCartFormEventTargetMatcher, handleAtcSubmit);
    handlerProxy.on('change', addToCartOptionSelectEventTargetMatcher, handleAtcOptionSelectChange);
    handlerProxy.on('click', isBuyNowButtonEvent, handleBuyNow);
    handlerProxy.on(_constants.RENDER_TREE_EVENT, Boolean, handleAtcPageLoad);
};
const _default = {
    register
};

//# sourceMappingURL=data:application/json;base64,

}),
21465: (function (__unused_webpack_module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "createNewStore", ({
    enumerable: true,
    get: function() {
        return createNewStore;
    }
}));
const initialState = {
    selectedSku: '',
    skuValues: {},
    requiresUserSession: false
};
const createNewStore = ()=>{
    const store = {};
    const watchers = {};
    const fetchFromStore = (instanceId, key)=>{
        return store[instanceId] ? store[instanceId][key] : undefined;
    };
    const updateStore = (instanceId, newValues)=>{
        if (!store[instanceId]) {
            store[instanceId] = {
                ...initialState
            };
        }
        for (const key of Object.keys(newValues)){
            if (!store[instanceId].hasOwnProperty(key)) {
                continue;
            }
            const previousValue = store[instanceId][key];
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<StoreShape>'.
            store[instanceId][key] = newValues[key];
            if (watchers[instanceId] && watchers[instanceId][key]) {
                for (const watcher of watchers[instanceId][key]){
                    // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<StoreShape>'.
                    watcher(newValues[key], previousValue);
                }
            }
        }
    };
    const addStoreWatcher = (instanceId, key, cb)=>{
        if (!watchers[instanceId]) {
            watchers[instanceId] = {};
        }
        if (watchers[instanceId][key]) {
            watchers[instanceId][key].push(cb);
        } else {
            watchers[instanceId][key] = [
                cb
            ];
        }
    };
    return {
        fetchFromStore,
        updateStore,
        addStoreWatcher
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkZFRvQ2FydFN0b3JlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbInR5cGUgU3RvcmVTaGFwZSA9IHtcbiAgc2VsZWN0ZWRTa3U6IHN0cmluZztcbiAgc2t1VmFsdWVzOiBTa3VWYWx1ZXM7XG4gIHJlcXVpcmVzVXNlclNlc3Npb246IGJvb2xlYW47XG59O1xuZXhwb3J0IHR5cGUgU2t1VmFsdWVzID0ge1xuICBbcHJvcGVydHlJZDogc3RyaW5nXTogc3RyaW5nO1xufTtcblxuaW50ZXJmYWNlIFN0b3JlRmV0Y2hlciB7XG4gIChpbnN0YW5jZUlkOiBzdHJpbmcsIGtleTogJ3NlbGVjdGVkU2t1Jyk6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQ7XG4gIChpbnN0YW5jZUlkOiBzdHJpbmcsIGtleTogJ3NrdVZhbHVlcycpOiBTa3VWYWx1ZXMgfCBudWxsIHwgdW5kZWZpbmVkO1xuICAoaW5zdGFuY2VJZDogc3RyaW5nLCBrZXk6ICdyZXF1aXJlc1VzZXJTZXNzaW9uJyk6IGJvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkO1xufVxudHlwZSBTdG9yZVVwZGF0ZXIgPSAoXG4gIGluc3RhbmNlSWQ6IHN0cmluZyxcbiAgbmV3VmFsdWVzOiBQYXJ0aWFsPFN0b3JlU2hhcGU+XG4pID0+IHZvaWQ7XG50eXBlIEFkZFN0b3JlV2F0Y2hlciA9IChcbiAgaW5zdGFuY2VJZDogc3RyaW5nLFxuICBrZXk6IGtleW9mIFN0b3JlU2hhcGUsXG4gIGNiOiAoY3VycmVudFZhbHVlPzogYW55LCBwcmV2aW91c1ZhbHVlPzogYW55KSA9PiB2b2lkXG4pID0+IHZvaWQ7XG5cbmNvbnN0IGluaXRpYWxTdGF0ZTogU3RvcmVTaGFwZSA9IHtcbiAgc2VsZWN0ZWRTa3U6ICcnLFxuICBza3VWYWx1ZXM6IHt9LFxuICByZXF1aXJlc1VzZXJTZXNzaW9uOiBmYWxzZSxcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVOZXdTdG9yZSA9ICgpOiB7XG4gIGZldGNoRnJvbVN0b3JlOiBTdG9yZUZldGNoZXI7XG4gIHVwZGF0ZVN0b3JlOiBTdG9yZVVwZGF0ZXI7XG4gIGFkZFN0b3JlV2F0Y2hlcjogQWRkU3RvcmVXYXRjaGVyO1xufSA9PiB7XG4gIGNvbnN0IHN0b3JlOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG4gIGNvbnN0IHdhdGNoZXJzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG5cbiAgY29uc3QgZmV0Y2hGcm9tU3RvcmU6IFN0b3JlRmV0Y2hlciA9IChpbnN0YW5jZUlkLCBrZXkpID0+IHtcbiAgICByZXR1cm4gc3RvcmVbaW5zdGFuY2VJZF0gPyBzdG9yZVtpbnN0YW5jZUlkXVtrZXldIDogdW5kZWZpbmVkO1xuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZVN0b3JlOiBTdG9yZVVwZGF0ZXIgPSAoaW5zdGFuY2VJZCwgbmV3VmFsdWVzKSA9PiB7XG4gICAgaWYgKCFzdG9yZVtpbnN0YW5jZUlkXSkge1xuICAgICAgc3RvcmVbaW5zdGFuY2VJZF0gPSB7Li4uaW5pdGlhbFN0YXRlfTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhuZXdWYWx1ZXMpKSB7XG4gICAgICBpZiAoIXN0b3JlW2luc3RhbmNlSWRdLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByZXZpb3VzVmFsdWUgPSBzdG9yZVtpbnN0YW5jZUlkXVtrZXldO1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTNzA1MyAtIEVsZW1lbnQgaW1wbGljaXRseSBoYXMgYW4gJ2FueScgdHlwZSBiZWNhdXNlIGV4cHJlc3Npb24gb2YgdHlwZSAnc3RyaW5nJyBjYW4ndCBiZSB1c2VkIHRvIGluZGV4IHR5cGUgJ1BhcnRpYWw8U3RvcmVTaGFwZT4nLlxuICAgICAgc3RvcmVbaW5zdGFuY2VJZF1ba2V5XSA9IG5ld1ZhbHVlc1trZXldO1xuICAgICAgaWYgKHdhdGNoZXJzW2luc3RhbmNlSWRdICYmIHdhdGNoZXJzW2luc3RhbmNlSWRdW2tleV0pIHtcbiAgICAgICAgZm9yIChjb25zdCB3YXRjaGVyIG9mIHdhdGNoZXJzW2luc3RhbmNlSWRdW2tleV0pIHtcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFM3MDUzIC0gRWxlbWVudCBpbXBsaWNpdGx5IGhhcyBhbiAnYW55JyB0eXBlIGJlY2F1c2UgZXhwcmVzc2lvbiBvZiB0eXBlICdzdHJpbmcnIGNhbid0IGJlIHVzZWQgdG8gaW5kZXggdHlwZSAnUGFydGlhbDxTdG9yZVNoYXBlPicuXG4gICAgICAgICAgd2F0Y2hlcihuZXdWYWx1ZXNba2V5XSwgcHJldmlvdXNWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3QgYWRkU3RvcmVXYXRjaGVyOiBBZGRTdG9yZVdhdGNoZXIgPSAoaW5zdGFuY2VJZCwga2V5LCBjYikgPT4ge1xuICAgIGlmICghd2F0Y2hlcnNbaW5zdGFuY2VJZF0pIHtcbiAgICAgIHdhdGNoZXJzW2luc3RhbmNlSWRdID0ge307XG4gICAgfVxuXG4gICAgaWYgKHdhdGNoZXJzW2luc3RhbmNlSWRdW2tleV0pIHtcbiAgICAgIHdhdGNoZXJzW2luc3RhbmNlSWRdW2tleV0ucHVzaChjYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhdGNoZXJzW2luc3RhbmNlSWRdW2tleV0gPSBbY2JdO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4ge2ZldGNoRnJvbVN0b3JlLCB1cGRhdGVTdG9yZSwgYWRkU3RvcmVXYXRjaGVyfTtcbn07XG4iXSwibmFtZXMiOlsiY3JlYXRlTmV3U3RvcmUiLCJpbml0aWFsU3RhdGUiLCJzZWxlY3RlZFNrdSIsInNrdVZhbHVlcyIsInJlcXVpcmVzVXNlclNlc3Npb24iLCJzdG9yZSIsIndhdGNoZXJzIiwiZmV0Y2hGcm9tU3RvcmUiLCJpbnN0YW5jZUlkIiwia2V5IiwidW5kZWZpbmVkIiwidXBkYXRlU3RvcmUiLCJuZXdWYWx1ZXMiLCJPYmplY3QiLCJrZXlzIiwiaGFzT3duUHJvcGVydHkiLCJwcmV2aW91c1ZhbHVlIiwid2F0Y2hlciIsImFkZFN0b3JlV2F0Y2hlciIsImNiIiwicHVzaCJdLCJtYXBwaW5ncyI6Ijs7OzsrQkE4QmFBOzs7ZUFBQUE7OztBQU5iLE1BQU1DLGVBQTJCO0lBQy9CQyxhQUFhO0lBQ2JDLFdBQVcsQ0FBQztJQUNaQyxxQkFBcUI7QUFDdkI7QUFFTyxNQUFNSixpQkFBaUI7SUFLNUIsTUFBTUssUUFBNkIsQ0FBQztJQUNwQyxNQUFNQyxXQUFnQyxDQUFDO0lBRXZDLE1BQU1DLGlCQUErQixDQUFDQyxZQUFZQztRQUNoRCxPQUFPSixLQUFLLENBQUNHLFdBQVcsR0FBR0gsS0FBSyxDQUFDRyxXQUFXLENBQUNDLElBQUksR0FBR0M7SUFDdEQ7SUFFQSxNQUFNQyxjQUE0QixDQUFDSCxZQUFZSTtRQUM3QyxJQUFJLENBQUNQLEtBQUssQ0FBQ0csV0FBVyxFQUFFO1lBQ3RCSCxLQUFLLENBQUNHLFdBQVcsR0FBRztnQkFBQyxHQUFHUCxZQUFZO1lBQUE7UUFDdEM7UUFFQSxLQUFLLE1BQU1RLE9BQU9JLE9BQU9DLElBQUksQ0FBQ0YsV0FBWTtZQUN4QyxJQUFJLENBQUNQLEtBQUssQ0FBQ0csV0FBVyxDQUFDTyxjQUFjLENBQUNOLE1BQU07Z0JBQzFDO1lBQ0Y7WUFFQSxNQUFNTyxnQkFBZ0JYLEtBQUssQ0FBQ0csV0FBVyxDQUFDQyxJQUFJO1lBQzVDLDBKQUEwSjtZQUMxSkosS0FBSyxDQUFDRyxXQUFXLENBQUNDLElBQUksR0FBR0csU0FBUyxDQUFDSCxJQUFJO1lBQ3ZDLElBQUlILFFBQVEsQ0FBQ0UsV0FBVyxJQUFJRixRQUFRLENBQUNFLFdBQVcsQ0FBQ0MsSUFBSSxFQUFFO2dCQUNyRCxLQUFLLE1BQU1RLFdBQVdYLFFBQVEsQ0FBQ0UsV0FBVyxDQUFDQyxJQUFJLENBQUU7b0JBQy9DLDBKQUEwSjtvQkFDMUpRLFFBQVFMLFNBQVMsQ0FBQ0gsSUFBSSxFQUFFTztnQkFDMUI7WUFDRjtRQUNGO0lBQ0Y7SUFFQSxNQUFNRSxrQkFBbUMsQ0FBQ1YsWUFBWUMsS0FBS1U7UUFDekQsSUFBSSxDQUFDYixRQUFRLENBQUNFLFdBQVcsRUFBRTtZQUN6QkYsUUFBUSxDQUFDRSxXQUFXLEdBQUcsQ0FBQztRQUMxQjtRQUVBLElBQUlGLFFBQVEsQ0FBQ0UsV0FBVyxDQUFDQyxJQUFJLEVBQUU7WUFDN0JILFFBQVEsQ0FBQ0UsV0FBVyxDQUFDQyxJQUFJLENBQUNXLElBQUksQ0FBQ0Q7UUFDakMsT0FBTztZQUNMYixRQUFRLENBQUNFLFdBQVcsQ0FBQ0MsSUFBSSxHQUFHO2dCQUFDVTthQUFHO1FBQ2xDO0lBQ0Y7SUFFQSxPQUFPO1FBQUNaO1FBQWdCSTtRQUFhTztJQUFlO0FBQ3REIn0=

}),
82150: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/* globals document, window, Element, HTMLElement, CustomEvent, HTMLFormElement, HTMLInputElement, HTMLCollection, HTMLAnchorElement */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    register: function() {
        return register;
    },
    renderCart: function() {
        return renderCart;
    }
});
const _graphqltag = /*#__PURE__*/ _interop_require_default(__webpack_require__(28160));
const _mergeWith = /*#__PURE__*/ _interop_require_default(__webpack_require__(93794));
const _forEach = /*#__PURE__*/ _interop_require_default(__webpack_require__(32397));
const _constants = __webpack_require__(10873);
const _commerceUtils = __webpack_require__(54556);
const _debug = /*#__PURE__*/ _interop_require_default(__webpack_require__(85986));
const _webPaymentsEvents = __webpack_require__(94492);
const _rendering = __webpack_require__(91898);
const _defaultTo = /*#__PURE__*/ _interop_require_default(__webpack_require__(34075));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const { MODAL, LEFT_SIDEBAR, RIGHT_SIDEBAR, LEFT_DROPDOWN, RIGHT_DROPDOWN } = _constants.CART_TYPES;
const { REMOVE_ITEM, UPDATE_ITEM_QUANTITY } = _constants.COMMERCE_CART_PUBLISHED_SITE_ACTIONS;
const updateItemQuantityMutation = (0, _graphqltag.default)`
  mutation AddToCart($skuId: String!, $count: Int!) {
    ecommerceUpdateCartItem(sku: $skuId, count: $count) {
      ok
      itemId
      itemCount
    }
  }
`;
const forEachElementInForm = (form, callback)=>{
    if (form instanceof HTMLFormElement && form.elements instanceof HTMLCollection) {
        Array.from(form.elements).forEach((input)=>{
            if (input instanceof HTMLInputElement) {
                callback(input);
            }
        });
    }
};
const disableAllFormElements = (form)=>{
    forEachElementInForm(form, (input)=>{
        input.disabled = true;
    });
};
const enableAllFormElements = (form)=>{
    forEachElementInForm(form, (input)=>{
        input.disabled = false;
    });
};
// Recursively searches up the tree to find the remove link anchor element
// @ts-expect-error - TS7023 - 'searchTreeForRemoveLink' implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions.
const searchTreeForRemoveLink = (element)=>{
    if (element instanceof Element && element.hasAttribute(_constants.COMMERCE_CART_PUBLISHED_SITE_ACTION_ATTR) && element.getAttribute(_constants.COMMERCE_CART_PUBLISHED_SITE_ACTION_ATTR) === REMOVE_ITEM && element.hasAttribute(_constants.DATA_ATTR_COMMERCE_SKU_ID)) {
        return element;
    } else {
        return element instanceof Element && element.parentElement ? searchTreeForRemoveLink(element.parentElement) : false;
    }
};
// Matchers:
const isItemRemovedEvent = (event)=>{
    // @ts-expect-error - TS2345 - Argument of type 'EventTarget | null' is not assignable to parameter of type 'EventTarget | Element'.
    return searchTreeForRemoveLink(event.target);
};
const isItemQuantityChangedEvent = (event)=>event.target instanceof Element && event.target.hasAttribute(_constants.COMMERCE_CART_PUBLISHED_SITE_ACTION_ATTR) && event.target.getAttribute(_constants.COMMERCE_CART_PUBLISHED_SITE_ACTION_ATTR) === UPDATE_ITEM_QUANTITY && event.target.hasAttribute(_constants.DATA_ATTR_COMMERCE_SKU_ID) && event.target;
const isItemQuantityInputEvent = (event)=>event.target instanceof Element && event.target.hasAttribute(_constants.COMMERCE_CART_PUBLISHED_SITE_ACTION_ATTR) && event.target.getAttribute(_constants.COMMERCE_CART_PUBLISHED_SITE_ACTION_ATTR) === UPDATE_ITEM_QUANTITY && event.target.hasAttribute(_constants.DATA_ATTR_COMMERCE_SKU_ID) && event.target;
// @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
const isCartButtonEvent = ({ target })=>{
    const cartOpenLink = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_OPEN_LINK, target);
    const cartCloseLink = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_CLOSE_LINK, target);
    if (cartOpenLink) {
        return cartOpenLink;
    } else if (cartCloseLink) {
        return cartCloseLink;
    } else {
        return false;
    }
};
// @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
const isCartCheckoutButtonEvent = ({ target })=>{
    const cartCheckoutButton = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_CHECKOUT_BUTTON, target);
    if (cartCheckoutButton) {
        return cartCheckoutButton;
    } else {
        return false;
    }
};
// @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
const isCartWrapperEvent = ({ target })=>target instanceof Element && target.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_CART_WRAPPER && target;
// @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
const isCartFormEvent = ({ target })=>target instanceof Element && target.hasAttribute(_constants.DATA_ATTR_NODE_TYPE) && target.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_CART_FORM;
// @ts-expect-error - TS7023 - 'getFormElement' implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions.
const getFormElement = (element)=>{
    if (!(element instanceof Element)) {
        return null;
    }
    return element instanceof HTMLFormElement ? element : getFormElement(element.parentElement);
};
// Event handlers:
const handleItemRemoved = (event, apolloClient)=>{
    if (window.Webflow.env('design') || window.Webflow.env('preview')) {
        return;
    }
    event.preventDefault();
    const { currentTarget } = event;
    if (!(currentTarget instanceof HTMLElement)) {
        return;
    }
    const commerceCartWrapper = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_WRAPPER, currentTarget);
    if (!(commerceCartWrapper instanceof Element)) {
        return;
    }
    const errorElement = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_ERROR, commerceCartWrapper);
    if (!(errorElement instanceof Element)) {
        return;
    }
    errorElement.style.setProperty('display', 'none');
    const skuId = currentTarget.getAttribute(_constants.DATA_ATTR_COMMERCE_SKU_ID);
    const count = 0;
    const form = getFormElement(currentTarget);
    disableAllFormElements(form);
    const cartItem = (0, _commerceUtils.findClosestElementByClassName)('w-commerce-commercecartitem', currentTarget);
    if (!(cartItem instanceof Element)) {
        return;
    }
    (0, _commerceUtils.addLoadingCallback)((0, _commerceUtils.setElementLoading)(cartItem));
    // @ts-expect-error - TS2345 - Argument of type 'EventTarget | null' is not assignable to parameter of type 'EventTarget | Element'.
    const removeLinkElement = searchTreeForRemoveLink(event.target);
    // It always will be an anchor element here, but this is mostly a Flow-complaint-fixer
    if (removeLinkElement instanceof HTMLAnchorElement) {
        // Disable click events on the Remove link
        removeLinkElement.style.pointerEvents = 'none';
    }
    apolloClient.mutate({
        mutation: updateItemQuantityMutation,
        variables: {
            skuId,
            count
        }
    }).then(()=>{
        (0, _commerceUtils.triggerRender)(null);
    }, (error)=>{
        _debug.default.error(error);
        errorElement.style.removeProperty('display');
        const errorMsg = errorElement.querySelector(_constants.CART_ERROR_MESSAGE_SELECTOR);
        if (!errorMsg) {
            return;
        }
        // Only general error should be triggered when removing items
        const errorText = errorMsg.getAttribute(_constants.CART_GENERAL_ERROR_MESSAGE) || '';
        errorMsg.textContent = errorText;
        (0, _commerceUtils.triggerRender)(error);
    }).then(()=>{
        if (removeLinkElement instanceof HTMLAnchorElement) {
            // Re-enable click events on the Remove link
            removeLinkElement.style.pointerEvents = 'auto';
        }
        // When cart is becoming empty, focus on the first thing that can be focused
        const cartContainer = currentTarget.closest('.w-commerce-commercecartcontainer');
        if (cartContainer instanceof HTMLElement) {
            const itemContainer = cartContainer.getElementsByClassName('w-commerce-commercecartitem');
            const focusableContent = getFocusableElements(cartContainer);
            if (itemContainer.length === 1 && focusableContent.length > 0) {
                // @ts-expect-error - TS2339 - Property 'focus' does not exist on type 'Element'.
                focusableContent[0].focus();
            }
        }
    });
};
const handleItemQuantityChanged = (event, apolloClient)=>{
    if (window.Webflow.env('design') || window.Webflow.env('preview')) {
        return;
    }
    event.preventDefault();
    const { currentTarget } = event;
    if (!(currentTarget instanceof HTMLInputElement)) {
        return;
    }
    if (currentTarget.form instanceof HTMLFormElement && currentTarget.form.reportValidity() === false) {
        return;
    }
    const commerceCartWrapper = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_WRAPPER, currentTarget);
    if (!(commerceCartWrapper instanceof Element)) {
        return;
    }
    const errorElement = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_ERROR, commerceCartWrapper);
    if (!(errorElement instanceof Element)) {
        return;
    }
    errorElement.style.setProperty('display', 'none');
    const cartItem = currentTarget.parentElement;
    if (!(cartItem instanceof Element)) {
        return;
    }
    (0, _commerceUtils.addLoadingCallback)((0, _commerceUtils.setElementLoading)(cartItem));
    const skuId = currentTarget.getAttribute(_constants.DATA_ATTR_COMMERCE_SKU_ID);
    const count = currentTarget.value;
    disableAllFormElements(currentTarget.form);
    apolloClient.mutate({
        mutation: updateItemQuantityMutation,
        variables: {
            skuId,
            count
        }
    }).then(()=>{
        enableAllFormElements(currentTarget.form);
        (0, _commerceUtils.triggerRender)(null);
    }, (error)=>{
        enableAllFormElements(currentTarget.form);
        _debug.default.error(error);
        errorElement.style.removeProperty('display');
        const errorMsg = errorElement.querySelector(_constants.CART_ERROR_MESSAGE_SELECTOR);
        if (!errorMsg) {
            return;
        }
        const errorType = error.graphQLErrors && error.graphQLErrors.length > 0 && error.graphQLErrors[0].code === 'OutOfInventory' ? 'quantity' : 'general';
        const errorText = errorMsg.getAttribute((0, _constants.getCartErrorMessageForType)(errorType)) || '';
        errorMsg.textContent = errorText;
        (0, _commerceUtils.triggerRender)(error);
    });
};
const handleItemInputChanged = (event)=>{
    if (window.Webflow.env('design') || window.Webflow.env('preview')) {
        return;
    }
    event.preventDefault();
    const { currentTarget } = event;
    if (!(currentTarget instanceof HTMLInputElement)) {
        return;
    }
    if (currentTarget.validity.valid === false && currentTarget.form instanceof HTMLFormElement) {
        currentTarget.form.reportValidity();
    }
};
const handleChangeCartStateEvent = (event)=>{
    if (!(event.currentTarget instanceof Element) || !(event instanceof CustomEvent)) {
        return;
    }
    const { currentTarget, detail } = event;
    const isOpen = currentTarget.hasAttribute(_constants.CART_OPEN);
    const shouldOpen = detail && detail.open != null ? detail.open : !isOpen;
    const wrapper = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_CONTAINER_WRAPPER, currentTarget);
    if (!wrapper) {
        return;
    }
    const cartContainer = getCartContainer(wrapper);
    if (!cartContainer) {
        return;
    }
    const cartElement = wrapper.parentElement;
    if (!cartElement) {
        return;
    }
    const cartType = cartElement.getAttribute(_constants.CART_TYPE);
    const duration = (0, _defaultTo.default)(cartElement.getAttribute(_constants.DATA_ATTR_ANIMATION_DURATION), _constants.ANIMATION_DURATION_DEFAULT) + 'ms';
    const containerEasing = (0, _defaultTo.default)(cartElement.getAttribute(_constants.DATA_ATTR_ANIMATION_EASING), _constants.ANIMATION_EASING_DEFAULT);
    const wrapperTransition = `opacity ${duration} ease 0ms`;
    const containerOutDelay = '50ms';
    const shouldAnimate = duration !== '0ms';
    let containerStepA;
    let containerStepB;
    switch(cartType){
        case MODAL:
            {
                containerStepA = {
                    scale: 0.95
                };
                containerStepB = {
                    scale: 1.0
                };
                break;
            }
        case LEFT_SIDEBAR:
            {
                containerStepA = {
                    x: -30
                };
                containerStepB = {
                    x: 0
                };
                break;
            }
        case RIGHT_SIDEBAR:
            {
                containerStepA = {
                    x: 30
                };
                containerStepB = {
                    x: 0
                };
                break;
            }
        case LEFT_DROPDOWN:
        case RIGHT_DROPDOWN:
            {
                containerStepA = {
                    y: -10
                };
                containerStepB = {
                    y: 0
                };
                break;
            }
    }
    if (shouldOpen) {
        document.addEventListener('keydown', handleCartFocusTrap);
        currentTarget.setAttribute(_constants.CART_OPEN, '');
        wrapper.style.removeProperty('display');
        // Ensures that the first focusable element in the cart gets focus
        // on cart launching.
        const focusableContent = getFocusableElements(cartContainer);
        if (focusableContent.length > 0) {
            // @ts-expect-error - TS2339 - Property 'focus' does not exist on type 'Element'.
            focusableContent[0].focus();
        }
        if (shouldAnimate && !isOpen) {
            // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
            window.Webflow.tram(wrapper).add(wrapperTransition).set({
                opacity: 0
            }).start({
                opacity: 1
            });
            // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
            window.Webflow.tram(cartContainer).add(`transform ${duration} ${containerEasing} 0ms`).set(containerStepA).start(containerStepB);
        }
    } else {
        document.removeEventListener('keydown', handleCartFocusTrap);
        currentTarget.removeAttribute(_constants.CART_OPEN);
        if (shouldAnimate) {
            // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
            window.Webflow.tram(wrapper).add(wrapperTransition).start({
                opacity: 0
            }).then(()=>{
                wrapper.style.display = 'none';
                // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
                window.Webflow.tram(cartContainer).stop();
            });
            // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
            window.Webflow.tram(cartContainer).add(`transform ${duration} ${containerEasing} ${containerOutDelay}`).start(containerStepA);
        } else {
            wrapper.style.display = 'none';
        }
        const cartOpenButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_OPEN_LINK, cartElement);
        if (cartOpenButton instanceof Element) {
            cartOpenButton.focus();
        }
    }
};
const handleCartButton = (event)=>{
    // Don't handle events when we're in design mode
    if (window.Webflow.env('design')) {
        return;
    }
    const { currentTarget, type } = event;
    if (!(currentTarget instanceof Element)) {
        return;
    }
    const commerceCartWrapper = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_WRAPPER, currentTarget);
    if (!(commerceCartWrapper instanceof Element)) {
        return;
    }
    const cartContainerWrapper = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_CONTAINER_WRAPPER, commerceCartWrapper);
    let evt;
    if (type === 'click' && (currentTarget.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_CART_CLOSE_LINK || currentTarget.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_CART_OPEN_LINK && !commerceCartWrapper.hasAttribute(_constants.DATA_ATTR_OPEN_ON_HOVER))) {
        evt = new CustomEvent(_constants.CHANGE_CART_EVENT, {
            bubbles: true
        });
        if (cartContainerWrapper && currentTarget.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_CART_CLOSE_LINK) {
            cartContainerWrapper.removeEventListener('mouseleave', handleCartContainerLeave);
            // @ts-expect-error - TS2769 - No overload matches this call.
            commerceCartWrapper.removeEventListener('mouseleave', handleCartContainerLeave);
        }
    } else if (type === 'mouseover' && commerceCartWrapper.hasAttribute(_constants.DATA_ATTR_OPEN_ON_HOVER) && currentTarget.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_CART_OPEN_LINK) {
        evt = new CustomEvent(_constants.CHANGE_CART_EVENT, {
            bubbles: true,
            detail: {
                open: true
            }
        });
        if (cartContainerWrapper) {
            cartContainerWrapper.addEventListener('mouseleave', handleCartContainerLeave);
            // @ts-expect-error - TS2769 - No overload matches this call.
            currentTarget.addEventListener('mouseleave', handleCartContainerLeave);
        }
    }
    if (evt) {
        commerceCartWrapper.dispatchEvent(evt);
    }
};
const handleCartCheckoutButton = (event)=>{
    // Don't want to continue with validation in preview mode
    if (window.Webflow.env('preview')) {
        return;
    }
    event.preventDefault();
    const { currentTarget: checkoutButton } = event;
    if (!(checkoutButton instanceof Element)) {
        return;
    }
    if (!(0, _commerceUtils.isProtocolHttps)()) {
        window.alert('This site is currently unsecured so you cannot enter checkout.');
        return;
    }
    const loadingText = checkoutButton.getAttribute(_constants.DATA_ATTR_LOADING_TEXT);
    const buttonText = checkoutButton.innerHTML;
    checkoutButton.innerHTML = loadingText ? loadingText : _constants.CART_CHECKOUT_LOADING_TEXT_DEFAULT;
    const commerceCartWrapper = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_WRAPPER, checkoutButton);
    if (!(commerceCartWrapper instanceof Element)) {
        return;
    }
    // To determine if we should continue with checkout, we check for the existence of
    // either the Stripe publishable key (only added when Stripe is enabled), or the
    // PayPal script element. If neither exists, we want to block checkout, as this means
    // no payment gateway has been enabled, and therefore, checkout cannot be enabled.
    // In the future, we may need to expand this to be more comprehensive, if we allow
    // for free orders on sites without a payment gateway attached, or if/when we add
    // more possible payment gateways.
    const publishableKey = checkoutButton.getAttribute(_constants.DATA_ATTR_PUBLISHABLE_KEY);
    const paypalElement = document.querySelector(`[${_constants.PAYPAL_ELEMENT_INSTANCE}]`);
    if (!publishableKey && !paypalElement) {
        const errorElement = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_ERROR, commerceCartWrapper);
        if (!(errorElement instanceof Element)) {
            return;
        }
        errorElement.style.setProperty('display', 'none');
        errorElement.style.removeProperty('display');
        const errorMsg = errorElement.querySelector('.w-cart-error-msg');
        if (!errorMsg) {
            return;
        }
        // Render checkout error message
        const errorText = errorMsg.getAttribute(`data-w-cart-checkout-error`) || '';
        errorMsg.textContent = errorText;
        checkoutButton.innerHTML = buttonText ? buttonText : _constants.CART_CHECKOUT_BUTTON_TEXT_DEFAULT;
        return;
    }
    if (!(checkoutButton instanceof HTMLAnchorElement)) {
        checkoutButton.innerHTML = buttonText ? buttonText : _constants.CART_CHECKOUT_BUTTON_TEXT_DEFAULT;
        return;
    }
    // @ts-expect-error - TS2322 - Type 'string' is not assignable to type 'Location | (string & Location)'.
    window.location = checkoutButton.href;
};
const handleSubmitForm = (event)=>{
    if (window.Webflow.env('preview')) {
        return;
    }
    event.preventDefault();
};
const handleCartContainerLeave = (event)=>{
    const { target, relatedTarget } = event;
    if (!(target instanceof Element) || !(relatedTarget instanceof Element)) {
        return;
    }
    const { parentElement } = target;
    if (!(parentElement instanceof Element)) {
        return;
    }
    // Don't want to close cart if switching between the button and the container
    const cartWrapper = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_WRAPPER, relatedTarget);
    const cartContainer = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_CONTAINER, relatedTarget);
    if (cartWrapper || cartContainer) {
        return;
    }
    const evt = new CustomEvent(_constants.CHANGE_CART_EVENT, {
        bubbles: true,
        detail: {
            open: false
        }
    });
    parentElement.dispatchEvent(evt);
    cartWrapper && // @ts-expect-error - TS2358 - The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter.
    cartWrapper instanceof Element && // @ts-expect-error - TS2339 - Property 'removeEventListener' does not exist on type 'never'.
    cartWrapper.removeEventListener('mouseleave', handleCartContainerLeave);
    cartContainer && // @ts-expect-error - TS2358 - The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter.
    cartContainer instanceof Element && // @ts-expect-error - TS2339 - Property 'removeEventListener' does not exist on type 'never'.
    cartContainer.removeEventListener('mouseleave', handleCartContainerLeave);
};
let cartContainerStates = [];
const handlePreviewMode = ()=>{
    // When we change to preview mode, we start by getting all of the cart wrappers on the page
    const cartContainerElements = (0, _commerceUtils.findAllElementsByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_CONTAINER_WRAPPER);
    cartContainerElements.forEach((element)=>{
        // We then store the container element and its state in the designer
        const wasOpen = element.style.display !== 'none';
        cartContainerStates.push({
            element,
            wasOpen
        });
        // If it was open, we then dispatch the cart change event on the wrapper outside
        // to mirror what the functionality is in the `handleCartButton` function, so that
        // when the user tries to close the cart in the preview, it works as expected
        if (wasOpen) {
            const evt = new CustomEvent(_constants.CHANGE_CART_EVENT, {
                bubbles: true,
                detail: {
                    open: true
                }
            });
            const { parentElement } = element;
            if (parentElement) {
                parentElement.dispatchEvent(evt);
            }
        }
    });
};
const handleDesignMode = ()=>{
    // When we change back to design mode, we iterate over all the stored elements and states
    // and return them back to what they were when the user changed to preview mode.
    // While it would be nice if we could update the state that's stored in the designer,
    // this would require some ugly hacks to access the outer frame of the designer.
    cartContainerStates.forEach(({ element: wrapper, wasOpen })=>{
        // Remove quick animation style data
        // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
        window.Webflow.tram(wrapper).destroy();
        wrapper.style.opacity = '1';
        const cartContainer = getCartContainer(wrapper);
        if (cartContainer) {
            // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
            window.Webflow.tram(cartContainer).destroy();
            cartContainer.style.transform = '';
        }
        // Reset the wrapper display property
        if (wasOpen) {
            wrapper.style.removeProperty('display');
        } else {
            wrapper.style.display = 'none';
        }
        // We reset the associated outer wrapper's state, so that we're back exactly to the state
        // of the DOM as it was in the designer.
        const cartElement = wrapper.parentElement;
        if (cartElement) {
            cartElement.removeAttribute(_constants.CART_OPEN);
        }
    });
    // We then clear out the states after the iteration has completed. It's possible we could keep them, and then
    // do some diff-ing or something so we don't have to iterate over them again in `handlePreviewMode`, but I think
    // that would be more computational work than just re-querying the DOM.
    cartContainerStates = [];
};
const doForAllMatchingClass = (cart, className, // @ts-expect-error - TS7006 - Parameter 'fn' implicitly has an 'any' type.
fn)=>Array.from(cart.getElementsByClassName(className)).forEach(fn);
const showCartDefaultState = (cart)=>{
    doForAllMatchingClass(cart, 'w-commerce-commercecartemptystate', _commerceUtils.hideElement);
    doForAllMatchingClass(cart, 'w-commerce-commercecartform', _commerceUtils.showElement);
};
const showCartEmptyState = (cart)=>{
    doForAllMatchingClass(cart, 'w-commerce-commercecartemptystate', _commerceUtils.showElement);
    doForAllMatchingClass(cart, 'w-commerce-commercecartform', _commerceUtils.hideElement);
};
const hideErrorState = (cart)=>{
    doForAllMatchingClass(cart, 'w-commerce-commercecarterrorstate', _commerceUtils.hideElement);
};
const showErrorState = (cart)=>{
    doForAllMatchingClass(cart, 'w-commerce-commercecarterrorstate', _commerceUtils.showElement);
};
const hasItems = (response)=>response && response.data && response.data.database && response.data.database.commerceOrder && response.data.database.commerceOrder.userItems && response.data.database.commerceOrder.userItems.length > 0;
const hasErrors = (response)=>response && response.errors && response.errors.length > 0;
const updateCartA11Y = (cart)=>{
    doForAllMatchingClass(cart, 'w-commerce-commercecartopenlinkcount', // @ts-expect-error - TS7006 - Parameter 'element' implicitly has an 'any' type.
    (element)=>{
        doForAllMatchingClass(cart, 'w-commerce-commercecartopenlink', // @ts-expect-error - TS7006 - Parameter 'openLinkElement' implicitly has an 'any' type.
        (openLinkElement)=>{
            openLinkElement.setAttribute('aria-label', element.textContent === '0' ? 'Open empty cart' : `Open cart containing ${element.textContent} items`);
        });
    });
};
const renderCart = (cart, data, stripeStore)=>{
    hideErrorState(cart);
    if (hasErrors(data)) {
        showErrorState(cart);
    }
    doForAllMatchingClass(cart, 'w-commerce-commercecartopenlinkcount', // @ts-expect-error - TS7006 - Parameter 'element' implicitly has an 'any' type.
    (element)=>{
        const hideRule = element.getAttribute(_constants.DATA_ATTR_COUNT_HIDE_RULE);
        if (hideRule === _constants.CART_COUNT_HIDE_RULES.ALWAYS || hideRule === _constants.CART_COUNT_HIDE_RULES.EMPTY && !hasItems(data)) {
            (0, _commerceUtils.hideElement)(element);
        } else {
            (0, _commerceUtils.showElement)(element);
        }
    });
    // If it is a newly published site the commerceOrder will be null, causing the cart counter to render
    // an empty div if hide cart when empty is false and userItemsCount is not set to 0
    const dataWithDefaults = (0, _mergeWith.default)({}, data, (obj, src, key)=>{
        if (key === 'commerceOrder' && src === null) {
            return {
                userItemsCount: 0
            };
        }
    });
    (0, _rendering.renderTree)(cart, dataWithDefaults);
    if (hasItems(data)) {
        showCartDefaultState(cart);
    } else {
        showCartEmptyState(cart);
    }
    const cartForm = cart.querySelector('form');
    if (cartForm instanceof HTMLFormElement) {
        enableAllFormElements(cartForm);
    }
    // we hide the button when the paypal sdk is on the page (only appears when paypal linked and checkout enabled)
    // and when the stripe store reports that it's not initialized. we don't pass stripe store for some errors,
    // so this ensures that the button will be shown still if there was an error.
    const paypalElement = document.querySelector(`[${_constants.PAYPAL_ELEMENT_INSTANCE}]`);
    const checkoutButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_CHECKOUT_BUTTON, cart);
    if (checkoutButton && paypalElement && stripeStore && !stripeStore.isInitialized()) {
        if ((0, _commerceUtils.isFreeOrder)(data)) {
            (0, _commerceUtils.showElement)(checkoutButton);
        } else {
            (0, _commerceUtils.hideElement)(checkoutButton);
        }
    }
    const paypalButton = cart.querySelector(`[${_constants.PAYPAL_BUTTON_ELEMENT_INSTANCE}]`);
    if (paypalElement && paypalButton) {
        if ((0, _commerceUtils.isFreeOrder)(data) || (0, _commerceUtils.hasSubscription)(data)) {
            // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
            (0, _commerceUtils.hideElement)(paypalButton);
        } else {
            // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
            (0, _commerceUtils.showElement)(paypalButton);
        }
    }
    (0, _webPaymentsEvents.updateWebPaymentsButton)(cart, data, stripeStore);
    return cart;
};
const handleRenderCart = (event, apolloClient, stripeStore)=>{
    if (window.Webflow.env('design') || window.Webflow.env('preview')) {
        return;
    }
    if (!(event instanceof CustomEvent && event.type === _constants.RENDER_TREE_EVENT)) {
        return;
    }
    const errors = [];
    const { detail } = event;
    if (detail != null && detail.error) {
        errors.push(detail.error);
    }
    const orderConfirmationContainer = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_ORDER_CONFIRMATION_WRAPPER);
    // stop cart render on order confirmation page as it will always be empty, this query was setting commerceOrder to null
    // and overwritting a second query in `handleRenderOrderConfirmation`
    if (orderConfirmationContainer) {
        return;
    }
    const carts = (0, _commerceUtils.findAllElementsByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_WRAPPER);
    if (!carts.length) {
        (0, _commerceUtils.executeLoadingCallbacks)();
        return;
    }
    carts.forEach((cart)=>{
        apolloClient.query({
            query: (0, _graphqltag.default)`
          ${cart.getAttribute(_constants.CART_QUERY)}
        `,
            fetchPolicy: 'network-only',
            errorPolicy: 'all'
        }).then((data)=>{
            (0, _commerceUtils.executeLoadingCallbacks)();
            renderCart(cart, {
                ...data,
                errors: errors.concat(data.errors).filter(Boolean)
            }, stripeStore);
            updateCartA11Y(cart);
        }).catch((err)=>{
            (0, _commerceUtils.executeLoadingCallbacks)();
            errors.push(err);
            renderCart(cart, {
                errors
            });
            updateCartA11Y(cart);
        });
    });
};
const handleCartKeyUp = (event)=>{
    // Escape
    // @ts-expect-error - TS2339 - Property 'keyCode' does not exist on type 'Event | KeyboardEvent'.
    if (event.keyCode === 27) {
        const openCarts = Array.from(document.querySelectorAll(`[${_constants.CART_OPEN}]`));
        (0, _forEach.default)(openCarts, (cart)=>{
            const evt = new CustomEvent(_constants.CHANGE_CART_EVENT, {
                bubbles: true,
                detail: {
                    open: false
                }
            });
            cart.dispatchEvent(evt);
        });
    }
    // Spacebar
    // @ts-expect-error - TS2339 - Property 'keyCode' does not exist on type 'Event | KeyboardEvent'.
    if (event.keyCode === 32 && event.target instanceof HTMLElement) {
        // Flow was being a bit strange with typing and only assuming HTMLElement
        // the first time it was used. So setting it as a new variable here to
        // persist that type.
        const htmlElement = event.target;
        // Make sure element being checked is intended to work as a link or button and
        // is a child of `commerce-cart-wrapper`
        // This will prevent the keyboard trigger applying to elements that don't
        // belong to the Cart or otherwise shouldn't be interactable in this manner.
        if ((htmlElement.getAttribute('role') === 'button' || htmlElement.getAttribute('role') === 'link' || htmlElement.hasAttribute('href') || htmlElement.hasAttribute('onClick')) && (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_WRAPPER, event.target) != null) {
            event.preventDefault();
            htmlElement.click();
        }
    }
};
const getCartContainer = (parent)=>(0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_CONTAINER, parent);
const handleClickCloseCart = ({ target })=>{
    if (!(target instanceof Element)) {
        return;
    }
    const openCarts = Array.from(document.querySelectorAll(`[${_constants.CART_OPEN}]`));
    (0, _forEach.default)(openCarts, (cart)=>{
        // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
        const cartContainer = getCartContainer(cart);
        const cartOpenButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_OPEN_LINK, cart);
        if (!(cartContainer instanceof Element) || !(cartOpenButton instanceof Element)) {
            return;
        }
        const cartType = cart.getAttribute(_constants.CART_TYPE);
        // on dropdown, we close if outside the cart is clicked, and on modal/sidebar, we close if outside the container or open button is clicked
        const isNotInside = cartType === LEFT_DROPDOWN || cartType === RIGHT_DROPDOWN ? !cart.contains(target) : !cartContainer.contains(target) && !cartOpenButton.contains(target);
        if (isNotInside) {
            const evt = new CustomEvent(_constants.CHANGE_CART_EVENT, {
                bubbles: true,
                detail: {
                    open: false
                }
            });
            cart.dispatchEvent(evt);
        }
    });
};
const getFocusableElements = (container)=>{
    const focusableElements = 'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])';
    return [
        ...container.querySelectorAll(focusableElements)
    ].filter(// @ts-expect-error - TS2339 - Property 'offsetHeight' does not exist on type 'Element'.
    (element)=>!element.hasAttribute('disabled') && element.offsetHeight > 0);
};
const handleCartFocusTrap = (event)=>{
    // @ts-expect-error - TS2339 - Property 'key' does not exist on type 'Event | KeyboardEvent'. | TS2339 - Property 'keyCode' does not exist on type 'Event | KeyboardEvent'.
    if (event.key !== 'Tab' && event.keyCode !== 9) {
        return;
    }
    const openCarts = Array.from(document.querySelectorAll(`[${_constants.CART_OPEN}]`));
    (0, _forEach.default)(openCarts, (cart)=>{
        // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
        const cartContainer = getCartContainer(cart);
        if (!(cartContainer instanceof Element)) {
            return;
        }
        const focusableContent = getFocusableElements(cartContainer);
        const firstFocusableElement = focusableContent[0];
        const lastFocusableElement = focusableContent[focusableContent.length - 1];
        // @ts-expect-error - TS2339 - Property 'shiftKey' does not exist on type 'Event | KeyboardEvent'.
        if (event.shiftKey) {
            if (document.activeElement === firstFocusableElement) {
                // @ts-expect-error - TS2339 - Property 'focus' does not exist on type 'Element'.
                lastFocusableElement.focus();
                event.preventDefault();
            }
        } else {
            if (document.activeElement === lastFocusableElement) {
                // @ts-expect-error - TS2339 - Property 'focus' does not exist on type 'Element'.
                firstFocusableElement.focus();
                event.preventDefault();
            }
        }
    });
};
const register = (handlerProxy)=>{
    handlerProxy.on('click', isItemRemovedEvent, handleItemRemoved);
    handlerProxy.on('change', isItemQuantityChangedEvent, handleItemQuantityChanged);
    handlerProxy.on('focus', isItemQuantityInputEvent, handleItemInputChanged);
    handlerProxy.on('click', isCartButtonEvent, handleCartButton);
    handlerProxy.on('click', isCartCheckoutButtonEvent, handleCartCheckoutButton);
    handlerProxy.on('mouseover', isCartButtonEvent, handleCartButton);
    handlerProxy.on(_constants.CHANGE_CART_EVENT, isCartWrapperEvent, handleChangeCartStateEvent);
    handlerProxy.on(_constants.RENDER_TREE_EVENT, Boolean, handleRenderCart);
    // Needed to avoid submission of cart form when only one item is in cart and user hits
    // enter key while in quantity input (acts as submit if only 1 input and no submit)
    handlerProxy.on('submit', isCartFormEvent, handleSubmitForm);
    handlerProxy.on('keyup', Boolean, handleCartKeyUp);
    handlerProxy.on('click', Boolean, handleClickCloseCart);
    // These events are for handling the back and forth between preview and designer
    // and must be registered directly to the window, otherwise they are not registered
    // when the canvas is created.
    if (window.Webflow.env('design') || window.Webflow.env('preview')) {
        window.addEventListener('__wf_preview', handlePreviewMode);
        window.addEventListener('__wf_design', handleDesignMode);
    }
};
const _default = {
    register
};

//# sourceMappingURL=data:application/json;base64,

}),
69773: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/* globals window */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isCartOpen: function() {
        return isCartOpen;
    },
    showErrorMessageForError: function() {
        return showErrorMessageForError;
    }
});
const _constants = __webpack_require__(10873);
const _commerceUtils = __webpack_require__(54556);
const isCartOpen = ()=>{
    const cartContainerEl = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_CONTAINER_WRAPPER);
    if (!cartContainerEl) return false;
    return window.getComputedStyle(cartContainerEl).display !== 'none';
};
const updateErrorMessage = (element, error)=>{
    const errorText = element.querySelector(_constants.CART_ERROR_MESSAGE_SELECTOR);
    if (!errorText) return;
    const errorType = getErrorType(error);
    // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ readonly QUANTITY: { readonly id: "QUANTITY_ERROR"; readonly name: "Quantity not available"; readonly category: { readonly id: "GENERAL"; readonly label: "General Errors"; }; readonly copy: "Product is not available in this quantity."; readonly path: readonly [...]; }; readonly GENERAL: { ...; }; readonly CHECKOUT...'.
    const errorData = _constants.CART_ERRORS[errorType.toUpperCase()] || {};
    const defaultErrorMessage = errorData.msg;
    const errorMessage = errorText.getAttribute((0, _constants.getCheckoutErrorMessageForType)(errorType)) || defaultErrorMessage;
    errorText.textContent = errorMessage;
    if (errorData.requiresRefresh) {
        errorText.setAttribute(_constants.NEEDS_REFRESH, 'true');
    } else {
        errorText.removeAttribute(_constants.NEEDS_REFRESH);
    }
};
const errorCodeToCartErrorType = (code, msg)=>{
    switch(code){
        case 'OrderTotalRange':
            {
                if (msg && msg.match(/too small/i)) {
                    return 'cart_order_min';
                }
                return 'general';
            }
        default:
            return 'general';
    }
};
const getErrorType = (error)=>{
    if (error.graphQLErrors && error.graphQLErrors.length > 0) {
        return errorCodeToCartErrorType(error.graphQLErrors[0].code, error.graphQLErrors[0].message);
    }
    if (error.code) {
        return errorCodeToCartErrorType(error.code, error.message);
    }
    return 'general';
};
const showErrorMessageForError = (err, scope)=>{
    const cartErrorState = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_ERROR, scope);
    if (cartErrorState) {
        cartErrorState.style.removeProperty('display');
        updateErrorMessage(cartErrorState, err);
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhcnRVdGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIHdpbmRvdyAqL1xuaW1wb3J0IHtcbiAgTk9ERV9UWVBFX0NPTU1FUkNFX0NBUlRfRVJST1IsXG4gIE5PREVfVFlQRV9DT01NRVJDRV9DQVJUX0NPTlRBSU5FUl9XUkFQUEVSLFxuICBDQVJUX0VSUk9SUyxcbiAgQ0FSVF9FUlJPUl9NRVNTQUdFX1NFTEVDVE9SLFxuICBnZXRDaGVja291dEVycm9yTWVzc2FnZUZvclR5cGUsXG4gIE5FRURTX1JFRlJFU0gsXG59IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL2NvbW1lcmNlL2NvbnN0YW50cyc7XG5pbXBvcnQge2ZpbmRFbGVtZW50QnlOb2RlVHlwZX0gZnJvbSAnLi9jb21tZXJjZVV0aWxzJztcblxuZXhwb3J0IGNvbnN0IGlzQ2FydE9wZW4gPSAoKSA9PiB7XG4gIGNvbnN0IGNhcnRDb250YWluZXJFbCA9IGZpbmRFbGVtZW50QnlOb2RlVHlwZShcbiAgICBOT0RFX1RZUEVfQ09NTUVSQ0VfQ0FSVF9DT05UQUlORVJfV1JBUFBFUlxuICApO1xuXG4gIGlmICghY2FydENvbnRhaW5lckVsKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGNhcnRDb250YWluZXJFbCkuZGlzcGxheSAhPT0gJ25vbmUnO1xufTtcblxuY29uc3QgdXBkYXRlRXJyb3JNZXNzYWdlID0gKGVsZW1lbnQ6IEVsZW1lbnQsIGVycm9yOiBSZWNvcmQ8YW55LCBhbnk+KSA9PiB7XG4gIGNvbnN0IGVycm9yVGV4dCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcihDQVJUX0VSUk9SX01FU1NBR0VfU0VMRUNUT1IpO1xuICBpZiAoIWVycm9yVGV4dCkgcmV0dXJuO1xuXG4gIGNvbnN0IGVycm9yVHlwZSA9IGdldEVycm9yVHlwZShlcnJvcik7XG5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTNzA1MyAtIEVsZW1lbnQgaW1wbGljaXRseSBoYXMgYW4gJ2FueScgdHlwZSBiZWNhdXNlIGV4cHJlc3Npb24gb2YgdHlwZSAnc3RyaW5nJyBjYW4ndCBiZSB1c2VkIHRvIGluZGV4IHR5cGUgJ3sgcmVhZG9ubHkgUVVBTlRJVFk6IHsgcmVhZG9ubHkgaWQ6IFwiUVVBTlRJVFlfRVJST1JcIjsgcmVhZG9ubHkgbmFtZTogXCJRdWFudGl0eSBub3QgYXZhaWxhYmxlXCI7IHJlYWRvbmx5IGNhdGVnb3J5OiB7IHJlYWRvbmx5IGlkOiBcIkdFTkVSQUxcIjsgcmVhZG9ubHkgbGFiZWw6IFwiR2VuZXJhbCBFcnJvcnNcIjsgfTsgcmVhZG9ubHkgY29weTogXCJQcm9kdWN0IGlzIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBxdWFudGl0eS5cIjsgcmVhZG9ubHkgcGF0aDogcmVhZG9ubHkgWy4uLl07IH07IHJlYWRvbmx5IEdFTkVSQUw6IHsgLi4uOyB9OyByZWFkb25seSBDSEVDS09VVC4uLicuXG4gIGNvbnN0IGVycm9yRGF0YSA9IENBUlRfRVJST1JTW2Vycm9yVHlwZS50b1VwcGVyQ2FzZSgpXSB8fCB7fTtcbiAgY29uc3QgZGVmYXVsdEVycm9yTWVzc2FnZSA9IGVycm9yRGF0YS5tc2c7XG5cbiAgY29uc3QgZXJyb3JNZXNzYWdlID1cbiAgICBlcnJvclRleHQuZ2V0QXR0cmlidXRlKGdldENoZWNrb3V0RXJyb3JNZXNzYWdlRm9yVHlwZShlcnJvclR5cGUpKSB8fFxuICAgIGRlZmF1bHRFcnJvck1lc3NhZ2U7XG5cbiAgZXJyb3JUZXh0LnRleHRDb250ZW50ID0gZXJyb3JNZXNzYWdlO1xuXG4gIGlmIChlcnJvckRhdGEucmVxdWlyZXNSZWZyZXNoKSB7XG4gICAgZXJyb3JUZXh0LnNldEF0dHJpYnV0ZShORUVEU19SRUZSRVNILCAndHJ1ZScpO1xuICB9IGVsc2Uge1xuICAgIGVycm9yVGV4dC5yZW1vdmVBdHRyaWJ1dGUoTkVFRFNfUkVGUkVTSCk7XG4gIH1cbn07XG5cbmNvbnN0IGVycm9yQ29kZVRvQ2FydEVycm9yVHlwZSA9IChjb2RlPzogc3RyaW5nLCBtc2c/OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICBzd2l0Y2ggKGNvZGUpIHtcbiAgICBjYXNlICdPcmRlclRvdGFsUmFuZ2UnOiB7XG4gICAgICBpZiAobXNnICYmIG1zZy5tYXRjaCgvdG9vIHNtYWxsL2kpKSB7XG4gICAgICAgIHJldHVybiAnY2FydF9vcmRlcl9taW4nO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJ2dlbmVyYWwnO1xuICAgIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJ2dlbmVyYWwnO1xuICB9XG59O1xuXG5jb25zdCBnZXRFcnJvclR5cGUgPSAoZXJyb3I6IFJlY29yZDxhbnksIGFueT4pID0+IHtcbiAgaWYgKGVycm9yLmdyYXBoUUxFcnJvcnMgJiYgZXJyb3IuZ3JhcGhRTEVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIGVycm9yQ29kZVRvQ2FydEVycm9yVHlwZShcbiAgICAgIGVycm9yLmdyYXBoUUxFcnJvcnNbMF0uY29kZSxcbiAgICAgIGVycm9yLmdyYXBoUUxFcnJvcnNbMF0ubWVzc2FnZVxuICAgICk7XG4gIH1cblxuICBpZiAoZXJyb3IuY29kZSkge1xuICAgIHJldHVybiBlcnJvckNvZGVUb0NhcnRFcnJvclR5cGUoZXJyb3IuY29kZSwgZXJyb3IubWVzc2FnZSk7XG4gIH1cblxuICByZXR1cm4gJ2dlbmVyYWwnO1xufTtcblxuZXhwb3J0IGNvbnN0IHNob3dFcnJvck1lc3NhZ2VGb3JFcnJvciA9IChcbiAgZXJyOiBSZWNvcmQ8YW55LCBhbnk+LFxuICBzY29wZT86IEVsZW1lbnQgfCBEb2N1bWVudFxuKSA9PiB7XG4gIGNvbnN0IGNhcnRFcnJvclN0YXRlID0gZmluZEVsZW1lbnRCeU5vZGVUeXBlKFxuICAgIE5PREVfVFlQRV9DT01NRVJDRV9DQVJUX0VSUk9SLFxuICAgIHNjb3BlXG4gICk7XG4gIGlmIChjYXJ0RXJyb3JTdGF0ZSkge1xuICAgIGNhcnRFcnJvclN0YXRlLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdkaXNwbGF5Jyk7XG4gICAgdXBkYXRlRXJyb3JNZXNzYWdlKGNhcnRFcnJvclN0YXRlLCBlcnIpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbImlzQ2FydE9wZW4iLCJzaG93RXJyb3JNZXNzYWdlRm9yRXJyb3IiLCJjYXJ0Q29udGFpbmVyRWwiLCJmaW5kRWxlbWVudEJ5Tm9kZVR5cGUiLCJOT0RFX1RZUEVfQ09NTUVSQ0VfQ0FSVF9DT05UQUlORVJfV1JBUFBFUiIsIndpbmRvdyIsImdldENvbXB1dGVkU3R5bGUiLCJkaXNwbGF5IiwidXBkYXRlRXJyb3JNZXNzYWdlIiwiZWxlbWVudCIsImVycm9yIiwiZXJyb3JUZXh0IiwicXVlcnlTZWxlY3RvciIsIkNBUlRfRVJST1JfTUVTU0FHRV9TRUxFQ1RPUiIsImVycm9yVHlwZSIsImdldEVycm9yVHlwZSIsImVycm9yRGF0YSIsIkNBUlRfRVJST1JTIiwidG9VcHBlckNhc2UiLCJkZWZhdWx0RXJyb3JNZXNzYWdlIiwibXNnIiwiZXJyb3JNZXNzYWdlIiwiZ2V0QXR0cmlidXRlIiwiZ2V0Q2hlY2tvdXRFcnJvck1lc3NhZ2VGb3JUeXBlIiwidGV4dENvbnRlbnQiLCJyZXF1aXJlc1JlZnJlc2giLCJzZXRBdHRyaWJ1dGUiLCJORUVEU19SRUZSRVNIIiwicmVtb3ZlQXR0cmlidXRlIiwiZXJyb3JDb2RlVG9DYXJ0RXJyb3JUeXBlIiwiY29kZSIsIm1hdGNoIiwiZ3JhcGhRTEVycm9ycyIsImxlbmd0aCIsIm1lc3NhZ2UiLCJlcnIiLCJzY29wZSIsImNhcnRFcnJvclN0YXRlIiwiTk9ERV9UWVBFX0NPTU1FUkNFX0NBUlRfRVJST1IiLCJzdHlsZSIsInJlbW92ZVByb3BlcnR5Il0sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0I7Ozs7Ozs7Ozs7O0lBV0xBLFVBQVU7ZUFBVkE7O0lBK0RBQyx3QkFBd0I7ZUFBeEJBOzs7MkJBbEVOOytCQUM2QjtBQUU3QixNQUFNRCxhQUFhO0lBQ3hCLE1BQU1FLGtCQUFrQkMsSUFBQUEsb0NBQXFCLEVBQzNDQyxvREFBeUM7SUFHM0MsSUFBSSxDQUFDRixpQkFBaUIsT0FBTztJQUU3QixPQUFPRyxPQUFPQyxnQkFBZ0IsQ0FBQ0osaUJBQWlCSyxPQUFPLEtBQUs7QUFDOUQ7QUFFQSxNQUFNQyxxQkFBcUIsQ0FBQ0MsU0FBa0JDO0lBQzVDLE1BQU1DLFlBQVlGLFFBQVFHLGFBQWEsQ0FBQ0Msc0NBQTJCO0lBQ25FLElBQUksQ0FBQ0YsV0FBVztJQUVoQixNQUFNRyxZQUFZQyxhQUFhTDtJQUUvQix1Y0FBdWM7SUFDdmMsTUFBTU0sWUFBWUMsc0JBQVcsQ0FBQ0gsVUFBVUksV0FBVyxHQUFHLElBQUksQ0FBQztJQUMzRCxNQUFNQyxzQkFBc0JILFVBQVVJLEdBQUc7SUFFekMsTUFBTUMsZUFDSlYsVUFBVVcsWUFBWSxDQUFDQyxJQUFBQSx5Q0FBOEIsRUFBQ1QsZUFDdERLO0lBRUZSLFVBQVVhLFdBQVcsR0FBR0g7SUFFeEIsSUFBSUwsVUFBVVMsZUFBZSxFQUFFO1FBQzdCZCxVQUFVZSxZQUFZLENBQUNDLHdCQUFhLEVBQUU7SUFDeEMsT0FBTztRQUNMaEIsVUFBVWlCLGVBQWUsQ0FBQ0Qsd0JBQWE7SUFDekM7QUFDRjtBQUVBLE1BQU1FLDJCQUEyQixDQUFDQyxNQUFlVjtJQUMvQyxPQUFRVTtRQUNOLEtBQUs7WUFBbUI7Z0JBQ3RCLElBQUlWLE9BQU9BLElBQUlXLEtBQUssQ0FBQyxlQUFlO29CQUNsQyxPQUFPO2dCQUNUO2dCQUVBLE9BQU87WUFDVDtRQUVBO1lBQ0UsT0FBTztJQUNYO0FBQ0Y7QUFFQSxNQUFNaEIsZUFBZSxDQUFDTDtJQUNwQixJQUFJQSxNQUFNc0IsYUFBYSxJQUFJdEIsTUFBTXNCLGFBQWEsQ0FBQ0MsTUFBTSxHQUFHLEdBQUc7UUFDekQsT0FBT0oseUJBQ0xuQixNQUFNc0IsYUFBYSxDQUFDLEVBQUUsQ0FBQ0YsSUFBSSxFQUMzQnBCLE1BQU1zQixhQUFhLENBQUMsRUFBRSxDQUFDRSxPQUFPO0lBRWxDO0lBRUEsSUFBSXhCLE1BQU1vQixJQUFJLEVBQUU7UUFDZCxPQUFPRCx5QkFBeUJuQixNQUFNb0IsSUFBSSxFQUFFcEIsTUFBTXdCLE9BQU87SUFDM0Q7SUFFQSxPQUFPO0FBQ1Q7QUFFTyxNQUFNakMsMkJBQTJCLENBQ3RDa0MsS0FDQUM7SUFFQSxNQUFNQyxpQkFBaUJsQyxJQUFBQSxvQ0FBcUIsRUFDMUNtQyx3Q0FBNkIsRUFDN0JGO0lBRUYsSUFBSUMsZ0JBQWdCO1FBQ2xCQSxlQUFlRSxLQUFLLENBQUNDLGNBQWMsQ0FBQztRQUNwQ2hDLG1CQUFtQjZCLGdCQUFnQkY7SUFDckM7QUFDRiJ9

}),
82333: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/* globals window, Element, CustomEvent, HTMLElement */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    register: function() {
        return register;
    }
});
const _debounce = /*#__PURE__*/ _interop_require_default(__webpack_require__(18305));
const _constants = __webpack_require__(10873);
const _commerceUtils = __webpack_require__(54556);
const _checkoutUtils = __webpack_require__(17696);
const _debug = /*#__PURE__*/ _interop_require_default(__webpack_require__(85986));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
const isInputInsideCustomerInfoEvent = ({ target })=>{
    // ensures this event's logic doesn't run on non-checkout pages
    const checkoutFormContainer = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER);
    if (!checkoutFormContainer) {
        return false;
    }
    const customerInfoWrapper = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_CUSTOMER_INFO_WRAPPER, target);
    if (customerInfoWrapper && target instanceof Element && target.tagName === 'INPUT') {
        return target;
    } else {
        return false;
    }
};
// @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
const isInputInsideAddressWrapperEvent = ({ target })=>{
    // ensures this event's logic doesn't run on non-checkout pages
    const checkoutFormContainer = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER);
    if (!checkoutFormContainer || !(target instanceof Element)) {
        return false;
    }
    const shippingAddressWrapper = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_WRAPPER, target);
    const billingAddressWrapper = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_WRAPPER, target);
    if (shippingAddressWrapper) {
        return shippingAddressWrapper;
    } else if (billingAddressWrapper) {
        return billingAddressWrapper;
    } else {
        return false;
    }
};
// @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
const isInputInsideShippingMethodEvent = ({ target })=>{
    // ensures this event's logic doesn't run on non-checkout pages
    const checkoutFormContainer = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER) || (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_FORM_CONTAINER);
    if (!checkoutFormContainer) {
        return false;
    }
    const shippingMethodWrapper = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_WRAPPER, target);
    if (shippingMethodWrapper && target instanceof Element && target.tagName === 'INPUT') {
        return target;
    } else {
        return false;
    }
};
// @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
const isBillingAddressToggleEvent = ({ target })=>{
    if (target instanceof Element && target.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_TOGGLE_CHECKBOX) {
        return target;
    } else {
        return false;
    }
};
// @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
const isPlaceOrderButtonEvent = ({ target })=>{
    const placeOrderButton = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_PLACE_ORDER_BUTTON, target);
    if (placeOrderButton && target instanceof Element) {
        return target;
    } else {
        return false;
    }
};
// @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
const isApplyDiscountFormEvent = ({ target })=>{
    if (target instanceof Element && target.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_CHECKOUT_DISCOUNT_FORM) {
        return target;
    } else {
        return false;
    }
};
// @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
const isFormInsideCheckoutContainerEvent = ({ target })=>{
    const checkoutForm = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER, target);
    if (target instanceof HTMLFormElement && checkoutForm) {
        return target;
    } else {
        return false;
    }
};
// @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
const isInputInsideCheckoutFormEvent = ({ target })=>{
    const checkoutForm = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER, target);
    if (target instanceof HTMLInputElement && checkoutForm) {
        return target;
    } else {
        return false;
    }
};
const handleRenderCheckout = (event, apolloClient, stripeStore)=>{
    if (window.Webflow.env('design') || window.Webflow.env('preview')) {
        return;
    }
    if (!(event instanceof CustomEvent && event.type === _constants.RENDER_TREE_EVENT)) {
        return;
    }
    const errors = [];
    const { detail } = event;
    if (detail != null && detail.error) {
        errors.push(detail.error);
    }
    const focusedEle = window.document.activeElement;
    const checkoutForm = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER, // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'EventTarget'.
    focusedEle);
    let prevFocusedInput = null;
    // Only trigger for focused elements in a checkout form
    if (focusedEle instanceof HTMLInputElement && checkoutForm) {
        prevFocusedInput = focusedEle.id;
        if (!prevFocusedInput) {
            prevFocusedInput = focusedEle.getAttribute('data-wf-bindings');
        }
        // Move from empty string to null
        prevFocusedInput = prevFocusedInput ? null : prevFocusedInput;
    }
    const checkoutFormContainers = (0, _commerceUtils.findAllElementsByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER);
    (0, _checkoutUtils.renderCheckoutFormContainers)(checkoutFormContainers, errors, apolloClient, stripeStore, prevFocusedInput);
};
const checkFormValidity = ({ customerInfo, shippingAddress, shippingInfo, billingAddress, billingAddressToggle, additionalInfo, requiresShipping })=>{
    // reportValidity isn't supported in IE, so we need to check if it exists
    // for our IE users. they'll have to rely on the server error, which isn't
    // too bad from a UX experience, since they'll still know something went wrong
    if (!HTMLFormElement.prototype.reportValidity) {
        return true;
    }
    // because we have multiple form elements, what we do is ask the browser to report
    // the validity of each form, which triggers the UI that would usually be seen
    // when someone submitted a regular form. we return if it's not valid, so that
    // the browser doesn't jump ahead to the next element, allowing the user to
    // fix their mistakes. we don't check the stripe elements, since we can't
    // directly get the status of those, as that's handled by stripe. however, if
    // the user is missing a field and tries to submit the form, they will get
    // an error when we try to create the token, so we'll display an error then
    if (!customerInfo.reportValidity() || requiresShipping && !shippingAddress.reportValidity() || requiresShipping && !shippingInfo.reportValidity() || // only check the billing address if the toggle is off, i.e. the billing address
    // form is being shown or if it does not require shipping
    (!requiresShipping || !billingAddressToggle.checked) && !billingAddress.reportValidity() || additionalInfo && additionalInfo instanceof HTMLFormElement && !additionalInfo.reportValidity()) {
        return false;
    }
    return true;
};
let placingOrder = false;
const startOrderFlow = (placeOrderButton)=>{
    placingOrder = true;
    window.addEventListener('beforeunload', _checkoutUtils.beforeUnloadHandler);
    const buttonText = placeOrderButton.innerHTML;
    const loadingText = placeOrderButton.getAttribute(_constants.DATA_ATTR_LOADING_TEXT);
    placeOrderButton.innerHTML = loadingText ? loadingText : _constants.CHECKOUT_PLACE_ORDER_LOADING_TEXT_DEFAULT;
    const finishOrderFlow = (isRedirecting = false)=>{
        // we only set `placingOrder` to false if we're not redirecting to the
        // confirmation page. this is so that while waiting for the confirmation
        // page to load, the user can't attempt to submit the order again
        if (!isRedirecting) {
            placingOrder = false;
        }
        window.removeEventListener('beforeunload', _checkoutUtils.beforeUnloadHandler);
        placeOrderButton.innerHTML = buttonText ? buttonText : _constants.CHECKOUT_PLACE_ORDER_BUTTON_TEXT_DEFAULT;
    };
    return finishOrderFlow;
};
const handlePlaceOrder = (event, apolloClient, stripeStore)=>{
    // Want to skip placing order if in design/preview mode, or an order place is in progress
    if (window.Webflow.env('design') || window.Webflow.env('preview') || placingOrder) {
        return;
    }
    const { currentTarget } = event;
    if (!(currentTarget instanceof Element)) {
        return;
    }
    const checkoutFormContainer = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER, currentTarget);
    if (!(checkoutFormContainer instanceof Element)) {
        return;
    }
    const errorState = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_ERROR_STATE, checkoutFormContainer);
    const customerInfo = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_CUSTOMER_INFO_WRAPPER, checkoutFormContainer);
    const shippingAddress = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_WRAPPER, checkoutFormContainer);
    const shippingInfo = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_WRAPPER, checkoutFormContainer);
    const billingAddress = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_WRAPPER, checkoutFormContainer);
    const billingAddressToggle = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_TOGGLE_CHECKBOX, checkoutFormContainer);
    const placeOrderButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_PLACE_ORDER_BUTTON, checkoutFormContainer);
    const additionalInfo = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_ADDITIONAL_INFO, checkoutFormContainer);
    if (!(errorState instanceof HTMLElement) || !(customerInfo instanceof HTMLFormElement) || !(shippingAddress instanceof HTMLFormElement) || !(shippingInfo instanceof HTMLFormElement) || !(billingAddress instanceof HTMLFormElement) || !(billingAddressToggle instanceof HTMLInputElement) || !(placeOrderButton instanceof Element)) {
        return;
    }
    const errorMessage = errorState.querySelector(_constants.CART_CHECKOUT_ERROR_MESSAGE_SELECTOR);
    // If the error message has this attribute, we want to block the order from
    // being submitted as the user is being forced to refresh the checkout page.
    if (errorMessage && errorMessage.hasAttribute(_constants.NEEDS_REFRESH)) {
        return;
    }
    const hasAdditionalInfo = additionalInfo && additionalInfo instanceof HTMLElement;
    const finishOrderFlow = startOrderFlow(placeOrderButton);
    errorState.style.setProperty('display', 'none');
    (0, _commerceUtils.fetchOrderStatusFlags)(apolloClient).then(({ requiresShipping, isFreeOrder })=>{
        const isFormValid = checkFormValidity({
            customerInfo,
            shippingAddress,
            shippingInfo,
            billingAddress,
            billingAddressToggle,
            additionalInfo,
            requiresShipping
        });
        if (!isFormValid) {
            finishOrderFlow();
            return;
        }
        // final sync with server, to ensure validity
        const customerInfoFormData = (0, _commerceUtils.formToObject)(customerInfo);
        const email = String(customerInfoFormData.email).trim();
        const shippingAddressInfo = {
            type: 'shipping',
            ...(0, _commerceUtils.formToObject)(shippingAddress, true)
        };
        const billingAddressInfo = {
            type: 'billing',
            ...(0, _commerceUtils.formToObject)(!billingAddressToggle.checked || !requiresShipping ? billingAddress : shippingAddress, true)
        };
        const stripeBillingAddressInfo = {
            billing_details: {
                // @ts-expect-error - TS2339 - Property 'name' does not exist on type '{ readonly type: "billing"; }'.
                name: billingAddressInfo.name,
                email,
                address: {
                    // @ts-expect-error - TS2339 - Property 'address_line1' does not exist on type '{ readonly type: "billing"; }'.
                    line1: billingAddressInfo.address_line1,
                    // @ts-expect-error - TS2339 - Property 'address_line2' does not exist on type '{ readonly type: "billing"; }'.
                    line2: billingAddressInfo.address_line2,
                    // @ts-expect-error - TS2339 - Property 'address_city' does not exist on type '{ readonly type: "billing"; }'.
                    city: billingAddressInfo.address_city,
                    // @ts-expect-error - TS2339 - Property 'address_state' does not exist on type '{ readonly type: "billing"; }'.
                    state: billingAddressInfo.address_state,
                    // @ts-expect-error - TS2339 - Property 'address_country' does not exist on type '{ readonly type: "billing"; }'.
                    country: billingAddressInfo.address_country,
                    // @ts-expect-error - TS2339 - Property 'address_zip' does not exist on type '{ readonly type: "billing"; }'.
                    postal_code: billingAddressInfo.address_zip
                }
            }
        };
        let shippingMethodId = '';
        // @ts-expect-error - TS7015 - Element implicitly has an 'any' type because index expression is not of type 'number'.
        if (requiresShipping && shippingInfo.elements['shipping-method-choice']) {
            // this is an IE11-safe way of just doing shippingInfo.elements['shipping-method-choice'].value
            const shippingMethodChoice = shippingInfo.querySelector('input[name="shipping-method-choice"]:checked');
            // this should never be falsey, but Flow
            if (shippingMethodChoice) {
                shippingMethodId = shippingMethodChoice.value;
            }
        }
        const customData = hasAdditionalInfo ? (0, _commerceUtils.customDataFormToArray)(additionalInfo) : [];
        const syncCheckoutForm = Promise.all([
            (0, _checkoutUtils.createOrderIdentityMutation)(apolloClient, email),
            (0, _checkoutUtils.createOrderAddressMutation)(apolloClient, billingAddressInfo),
            requiresShipping ? (0, _checkoutUtils.createOrderAddressMutation)(apolloClient, shippingAddressInfo) : Promise.resolve(),
            requiresShipping ? (0, _checkoutUtils.createOrderShippingMethodMutation)(apolloClient, shippingMethodId) : Promise.resolve(),
            hasAdditionalInfo ? (0, _checkoutUtils.createCustomDataMutation)(apolloClient, customData) : Promise.resolve()
        ]);
        syncCheckoutForm.then(()=>{
            if (isFreeOrder) {
                return Promise.resolve();
            }
            if (!stripeStore.isInitialized()) {
                return Promise.reject(new Error("Stripe has not been set up for this project – Go to the project's Ecommerce Payment settings in the Designer to link Stripe."));
            }
            const stripe = stripeStore.getStripeInstance();
            const checkoutFormInstance = parseInt(// @ts-expect-error - TS2345 - Argument of type 'string | null' is not assignable to parameter of type 'string'.
            checkoutFormContainer.getAttribute(_constants.STRIPE_ELEMENT_INSTANCE), 10);
            const card = stripeStore.getElement('cardNumber', checkoutFormInstance);
            return stripe.createPaymentMethod('card', card, stripeBillingAddressInfo);
        })// @ts-expect-error - Argument of type '(data: any) => Promise<FetchResult<any>> | Promise<void>' is not assignable to parameter of type '(value: any) => FetchResult<any> | PromiseLike<FetchResult<any>>'.
        .then((data)=>{
            if (!data || isFreeOrder) {
                return Promise.resolve();
            }
            if (data.error) {
                return Promise.reject(data.error);
            }
            return (0, _checkoutUtils.createStripePaymentMethodMutation)(apolloClient, data.paymentMethod.id);
        }).then(()=>{
            return (0, _checkoutUtils.createAttemptSubmitOrderRequest)(apolloClient, {
                checkoutType: 'normal'
            });
        }).then((data)=>{
            _debug.default.log(data);
            const order = (0, _checkoutUtils.getOrderDataFromGraphQLResponse)(data);
            if ((0, _checkoutUtils.orderRequiresAdditionalAction)(order.status)) {
                const stripe = stripeStore.getStripeInstance();
                return stripe.retrievePaymentIntent(order.clientSecret)// @ts-expect-error - TS7006 - Parameter 'retrieveResult' implicitly has an 'any' type.
                .then((retrieveResult)=>{
                    const intent = retrieveResult && retrieveResult.paymentIntent || {};
                    const actionPromise = intent.confirmation_method === 'automatic' ? stripe.confirmCardPayment(order.clientSecret) : stripe.handleCardAction(order.clientSecret);
                    // @ts-expect-error - TS7006 - Parameter 'result' implicitly has an 'any' type.
                    return actionPromise.then((result)=>{
                        if (result.error) {
                            return Promise.reject(result.error);
                        }
                        return (0, _checkoutUtils.createAttemptSubmitOrderRequest)(apolloClient, {
                            checkoutType: 'normal',
                            paymentIntentId: result.paymentIntent.id
                        }).then((resp)=>{
                            const finishedOrder = (0, _checkoutUtils.getOrderDataFromGraphQLResponse)(resp);
                            if (finishedOrder.ok) {
                                finishOrderFlow(true);
                                (0, _checkoutUtils.redirectToOrderConfirmation)(finishedOrder);
                            }
                        });
                    });
                });
            }
            if (order.ok) {
                finishOrderFlow(true);
                (0, _checkoutUtils.redirectToOrderConfirmation)(order);
            }
        }).catch((err)=>{
            finishOrderFlow();
            _debug.default.error(err);
            errorState.style.removeProperty('display');
            (0, _checkoutUtils.updateErrorMessage)(errorState, err);
        });
    });
};
// @ts-expect-error - TS2314 - Generic type 'ApolloClient<TCacheShape>' requires 1 type argument(s).
const handleApplyDiscount = (event, apolloClient)=>{
    event.preventDefault(); // prevent submit
    event.stopImmediatePropagation(); // do not trigger submission of any other forms (we have forms in forms :())
    const { currentTarget } = event;
    if (!(currentTarget instanceof Element)) {
        return;
    }
    const inputEl = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_DISCOUNT_INPUT, currentTarget);
    const checkoutFormContainer = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER, currentTarget) || (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_FORM_CONTAINER, currentTarget);
    if (!checkoutFormContainer) {
        return;
    }
    const errorStateEl = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_ERROR_STATE, checkoutFormContainer);
    if (!(inputEl instanceof HTMLInputElement && errorStateEl instanceof HTMLElement)) {
        return;
    }
    const discountCode = inputEl.value.trim().toUpperCase();
    (0, _checkoutUtils.applyDiscount)(apolloClient, {
        discountCode
    }).then(()=>{
        inputEl.value = '';
        errorStateEl.style.display = 'none';
        (0, _commerceUtils.triggerRender)(null);
    }).catch((error)=>(0, _checkoutUtils.showErrorMessageForError)(error, checkoutFormContainer));
};
// @ts-expect-error - TS2314 - Generic type 'ApolloClient<TCacheShape>' requires 1 type argument(s).
const handleUpdateCustomerInfo = (event, apolloClient)=>{
    const { currentTarget } = event;
    if (!(currentTarget instanceof HTMLInputElement)) {
        return;
    }
    const value = currentTarget.value.trim();
    const email = value == null || value === '' ? null : value;
    (0, _checkoutUtils.createOrderIdentityMutation)(apolloClient, email).then(()=>{
        (0, _commerceUtils.triggerRender)(null);
    }).catch((err)=>{
        (0, _commerceUtils.triggerRender)(err);
    });
};
const handleUpdateAddress = (0, _debounce.default)((event, apolloClient)=>{
    const { currentTarget } = event;
    if (!(currentTarget instanceof HTMLFormElement)) {
        return;
    }
    const type = currentTarget.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === _constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_WRAPPER ? 'shipping' : 'billing';
    const addressInfo = {
        type,
        ...(0, _commerceUtils.formToObject)(currentTarget, true)
    };
    (0, _checkoutUtils.createOrderAddressMutation)(apolloClient, addressInfo).then(()=>{
        (0, _commerceUtils.triggerRender)(null);
    }).catch((err)=>{
        (0, _commerceUtils.triggerRender)(err);
    });
}, 500);
// @ts-expect-error - TS7031 - Binding element 'currentTarget' implicitly has an 'any' type.
const handleToggleBillingAddress = ({ currentTarget })=>{
    const checkoutFormContainer = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER, currentTarget);
    if (!checkoutFormContainer) {
        return;
    }
    const billingAddressWrapper = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_WRAPPER, checkoutFormContainer);
    if (!billingAddressWrapper || !(currentTarget instanceof HTMLInputElement)) {
        return;
    }
    if (currentTarget.checked) {
        billingAddressWrapper.style.setProperty('display', 'none');
    } else {
        billingAddressWrapper.style.removeProperty('display');
    }
};
const handleChooseShippingMethod = (// @ts-expect-error - TS7031 - Binding element 'currentTarget' implicitly has an 'any' type.
{ currentTarget }, apolloClient)=>{
    if (!(currentTarget instanceof HTMLInputElement)) {
        return;
    }
    (0, _checkoutUtils.createOrderShippingMethodMutation)(apolloClient, currentTarget.id).then(()=>{
        (0, _commerceUtils.triggerRender)(null);
    }).catch((err)=>{
        (0, _commerceUtils.triggerRender)(err);
    });
};
const handleSubmitFormInsideCheckoutContainer = (event, apolloClient)=>{
    if (event.type === 'submit') {
        event.preventDefault();
    }
    if (// @ts-expect-error - TS2339 - Property 'keyCode' does not exist on type 'Event | KeyboardEvent'.
    event.type === 'keyup' && event.keyCode !== 13 || !(event.currentTarget instanceof Element)) {
        return;
    }
    if (event.target === (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_DISCOUNT_INPUT)) {
        return;
    }
    const checkoutFormContainer = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER, event.currentTarget);
    if (!(checkoutFormContainer instanceof Element)) {
        return;
    }
    const customerInfo = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_CUSTOMER_INFO_WRAPPER, checkoutFormContainer);
    const shippingAddress = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_WRAPPER, checkoutFormContainer);
    const shippingInfo = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_WRAPPER, checkoutFormContainer);
    const billingAddress = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_WRAPPER, checkoutFormContainer);
    const billingAddressToggle = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_TOGGLE_CHECKBOX, checkoutFormContainer);
    const additionalInfo = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_ADDITIONAL_INFO, checkoutFormContainer);
    if (!(customerInfo instanceof HTMLFormElement) || !(shippingAddress instanceof HTMLFormElement) || !(shippingInfo instanceof HTMLFormElement) || !(billingAddress instanceof HTMLFormElement) || !(billingAddressToggle instanceof HTMLInputElement)) {
        return;
    }
    const hasAdditionalInfo = additionalInfo && additionalInfo instanceof HTMLFormElement;
    (0, _commerceUtils.fetchOrderStatusFlags)(apolloClient).then(({ requiresShipping })=>{
        checkFormValidity({
            customerInfo,
            shippingAddress,
            shippingInfo,
            billingAddress,
            billingAddressToggle,
            additionalInfo: hasAdditionalInfo ? additionalInfo : null,
            requiresShipping
        });
    });
};
const register = (handlerProxy)=>{
    handlerProxy.on(_constants.RENDER_TREE_EVENT, Boolean, handleRenderCheckout);
    handlerProxy.on('click', isPlaceOrderButtonEvent, handlePlaceOrder);
    handlerProxy.on('keydown', isPlaceOrderButtonEvent, // eslint-disable-next-line @typescript-eslint/no-shadow
    (event, apolloClient, StripeStore)=>{
        // @ts-expect-error - TS2339 - Property 'which' does not exist on type 'Event'.
        if (event.which === 32) {
            // prevent scrolling on spacebar key press
            event.preventDefault();
        }
        // @ts-expect-error - TS2339 - Property 'which' does not exist on type 'Event'.
        if (event.which === 13) {
            // enter key press
            return handlePlaceOrder(event, apolloClient, StripeStore);
        }
    });
    handlerProxy.on('keyup', isPlaceOrderButtonEvent, // eslint-disable-next-line @typescript-eslint/no-shadow
    (event, apolloClient, StripeStore)=>{
        // @ts-expect-error - TS2339 - Property 'which' does not exist on type 'Event'.
        if (event.which === 32) {
            // spacebar key press
            return handlePlaceOrder(event, apolloClient, StripeStore);
        }
    });
    handlerProxy.on('submit', isApplyDiscountFormEvent, handleApplyDiscount);
    // we use blur events on the text inputs, and change event on the country select
    // so that we update faster (blur on a select element requires going into another field)
    handlerProxy.on('change', isInputInsideCustomerInfoEvent, handleUpdateCustomerInfo);
    handlerProxy.on('change', isInputInsideAddressWrapperEvent, handleUpdateAddress);
    handlerProxy.on('change', isBillingAddressToggleEvent, handleToggleBillingAddress);
    handlerProxy.on('change', isInputInsideShippingMethodEvent, handleChooseShippingMethod);
    handlerProxy.on('submit', isFormInsideCheckoutContainerEvent, handleSubmitFormInsideCheckoutContainer);
    // we have to add a keyup event for the enter key on forms to run the validity check
    // as forms with multiple inputs but no submit input don't fire the submit event
    // however we do still need that above submit check, as the email form only has one
    // input, and a browser will fire the submit event if the form has just one input
    // even if it has no submit input
    handlerProxy.on('keyup', isInputInsideCheckoutFormEvent, handleSubmitFormInsideCheckoutContainer);
};
const _default = {
    register
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoZWNrb3V0RXZlbnRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgd2luZG93LCBFbGVtZW50LCBDdXN0b21FdmVudCwgSFRNTEVsZW1lbnQgKi9cbmltcG9ydCBkZWJvdW5jZSBmcm9tICdsb2Rhc2gvZGVib3VuY2UnO1xuaW1wb3J0IHtcbiAgREFUQV9BVFRSX05PREVfVFlQRSxcbiAgTk9ERV9UWVBFX0NPTU1FUkNFX0NIRUNLT1VUX0ZPUk1fQ09OVEFJTkVSLFxuICBOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfQ1VTVE9NRVJfSU5GT19XUkFQUEVSLFxuICBOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfU0hJUFBJTkdfQUREUkVTU19XUkFQUEVSLFxuICBOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfQklMTElOR19BRERSRVNTX1dSQVBQRVIsXG4gIE5PREVfVFlQRV9DT01NRVJDRV9DSEVDS09VVF9TSElQUElOR19NRVRIT0RTX1dSQVBQRVIsXG4gIE5PREVfVFlQRV9DT01NRVJDRV9DSEVDS09VVF9CSUxMSU5HX0FERFJFU1NfVE9HR0xFX0NIRUNLQk9YLFxuICBOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfUExBQ0VfT1JERVJfQlVUVE9OLFxuICBOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfRVJST1JfU1RBVEUsXG4gIE5PREVfVFlQRV9DT01NRVJDRV9DSEVDS09VVF9BRERJVElPTkFMX0lORk8sXG4gIE5PREVfVFlQRV9DT01NRVJDRV9QQVlQQUxfQ0hFQ0tPVVRfRk9STV9DT05UQUlORVIsXG4gIE5PREVfVFlQRV9DT01NRVJDRV9DSEVDS09VVF9ESVNDT1VOVF9GT1JNLFxuICBOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfRElTQ09VTlRfSU5QVVQsXG4gIERBVEFfQVRUUl9MT0FESU5HX1RFWFQsXG4gIENIRUNLT1VUX1BMQUNFX09SREVSX0xPQURJTkdfVEVYVF9ERUZBVUxULFxuICBDSEVDS09VVF9QTEFDRV9PUkRFUl9CVVRUT05fVEVYVF9ERUZBVUxULFxuICBSRU5ERVJfVFJFRV9FVkVOVCxcbiAgTkVFRFNfUkVGUkVTSCxcbiAgU1RSSVBFX0VMRU1FTlRfSU5TVEFOQ0UsXG4gIENBUlRfQ0hFQ0tPVVRfRVJST1JfTUVTU0FHRV9TRUxFQ1RPUixcbn0gZnJvbSAnQHBhY2thZ2VzL3N5c3RlbXMvY29tbWVyY2UvY29uc3RhbnRzJztcbmltcG9ydCBFdmVudEhhbmRsZXJQcm94eVdpdGhBcG9sbG9DbGllbnQgZnJvbSAnLi9ldmVudEhhbmRsZXJQcm94eVdpdGhBcG9sbG9DbGllbnQnO1xuaW1wb3J0IHtcbiAgZmluZEVsZW1lbnRCeU5vZGVUeXBlLFxuICBmaW5kQ2xvc2VzdEVsZW1lbnRCeU5vZGVUeXBlLFxuICBmaW5kQWxsRWxlbWVudHNCeU5vZGVUeXBlLFxuICB0cmlnZ2VyUmVuZGVyLFxuICBmb3JtVG9PYmplY3QsXG4gIGN1c3RvbURhdGFGb3JtVG9BcnJheSxcbiAgZmV0Y2hPcmRlclN0YXR1c0ZsYWdzLFxufSBmcm9tICcuL2NvbW1lcmNlVXRpbHMnO1xuaW1wb3J0IHtcbiAgc2hvd0Vycm9yTWVzc2FnZUZvckVycm9yLFxuICB1cGRhdGVFcnJvck1lc3NhZ2UsXG4gIGJlZm9yZVVubG9hZEhhbmRsZXIsXG4gIHJlbmRlckNoZWNrb3V0Rm9ybUNvbnRhaW5lcnMsXG4gIGNyZWF0ZUF0dGVtcHRTdWJtaXRPcmRlclJlcXVlc3QsXG4gIGdldE9yZGVyRGF0YUZyb21HcmFwaFFMUmVzcG9uc2UsXG4gIG9yZGVyUmVxdWlyZXNBZGRpdGlvbmFsQWN0aW9uLFxuICByZWRpcmVjdFRvT3JkZXJDb25maXJtYXRpb24sXG4gIGNyZWF0ZU9yZGVySWRlbnRpdHlNdXRhdGlvbixcbiAgY3JlYXRlT3JkZXJBZGRyZXNzTXV0YXRpb24sXG4gIGNyZWF0ZU9yZGVyU2hpcHBpbmdNZXRob2RNdXRhdGlvbixcbiAgY3JlYXRlQ3VzdG9tRGF0YU11dGF0aW9uLFxuICBjcmVhdGVTdHJpcGVQYXltZW50TWV0aG9kTXV0YXRpb24sXG4gIGFwcGx5RGlzY291bnQsXG59IGZyb20gJy4vY2hlY2tvdXRVdGlscyc7XG5pbXBvcnQgZGVidWcgZnJvbSAnLi9kZWJ1Zyc7XG5pbXBvcnQge0Fwb2xsb0NsaWVudCwgTm9ybWFsaXplZENhY2hlT2JqZWN0fSBmcm9tICdAYXBvbGxvL2NsaWVudCc7XG5pbXBvcnQge1N0cmlwZVN0b3JlfSBmcm9tICcuL3N0cmlwZVN0b3JlJztcblxuLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTNzAzMSAtIEJpbmRpbmcgZWxlbWVudCAndGFyZ2V0JyBpbXBsaWNpdGx5IGhhcyBhbiAnYW55JyB0eXBlLlxuY29uc3QgaXNJbnB1dEluc2lkZUN1c3RvbWVySW5mb0V2ZW50ID0gKHt0YXJnZXR9KSA9PiB7XG4gIC8vIGVuc3VyZXMgdGhpcyBldmVudCdzIGxvZ2ljIGRvZXNuJ3QgcnVuIG9uIG5vbi1jaGVja291dCBwYWdlc1xuICBjb25zdCBjaGVja291dEZvcm1Db250YWluZXIgPSBmaW5kRWxlbWVudEJ5Tm9kZVR5cGUoXG4gICAgTk9ERV9UWVBFX0NPTU1FUkNFX0NIRUNLT1VUX0ZPUk1fQ09OVEFJTkVSXG4gICk7XG4gIGlmICghY2hlY2tvdXRGb3JtQ29udGFpbmVyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgY3VzdG9tZXJJbmZvV3JhcHBlciA9IGZpbmRDbG9zZXN0RWxlbWVudEJ5Tm9kZVR5cGUoXG4gICAgTk9ERV9UWVBFX0NPTU1FUkNFX0NIRUNLT1VUX0NVU1RPTUVSX0lORk9fV1JBUFBFUixcbiAgICB0YXJnZXRcbiAgKTtcbiAgaWYgKFxuICAgIGN1c3RvbWVySW5mb1dyYXBwZXIgJiZcbiAgICB0YXJnZXQgaW5zdGFuY2VvZiBFbGVtZW50ICYmXG4gICAgdGFyZ2V0LnRhZ05hbWUgPT09ICdJTlBVVCdcbiAgKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzcwMzEgLSBCaW5kaW5nIGVsZW1lbnQgJ3RhcmdldCcgaW1wbGljaXRseSBoYXMgYW4gJ2FueScgdHlwZS5cbmNvbnN0IGlzSW5wdXRJbnNpZGVBZGRyZXNzV3JhcHBlckV2ZW50ID0gKHt0YXJnZXR9KSA9PiB7XG4gIC8vIGVuc3VyZXMgdGhpcyBldmVudCdzIGxvZ2ljIGRvZXNuJ3QgcnVuIG9uIG5vbi1jaGVja291dCBwYWdlc1xuICBjb25zdCBjaGVja291dEZvcm1Db250YWluZXIgPSBmaW5kRWxlbWVudEJ5Tm9kZVR5cGUoXG4gICAgTk9ERV9UWVBFX0NPTU1FUkNFX0NIRUNLT1VUX0ZPUk1fQ09OVEFJTkVSXG4gICk7XG4gIGlmICghY2hlY2tvdXRGb3JtQ29udGFpbmVyIHx8ICEodGFyZ2V0IGluc3RhbmNlb2YgRWxlbWVudCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBzaGlwcGluZ0FkZHJlc3NXcmFwcGVyID0gZmluZENsb3Nlc3RFbGVtZW50QnlOb2RlVHlwZShcbiAgICBOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfU0hJUFBJTkdfQUREUkVTU19XUkFQUEVSLFxuICAgIHRhcmdldFxuICApO1xuICBjb25zdCBiaWxsaW5nQWRkcmVzc1dyYXBwZXIgPSBmaW5kQ2xvc2VzdEVsZW1lbnRCeU5vZGVUeXBlKFxuICAgIE5PREVfVFlQRV9DT01NRVJDRV9DSEVDS09VVF9CSUxMSU5HX0FERFJFU1NfV1JBUFBFUixcbiAgICB0YXJnZXRcbiAgKTtcblxuICBpZiAoc2hpcHBpbmdBZGRyZXNzV3JhcHBlcikge1xuICAgIHJldHVybiBzaGlwcGluZ0FkZHJlc3NXcmFwcGVyO1xuICB9IGVsc2UgaWYgKGJpbGxpbmdBZGRyZXNzV3JhcHBlcikge1xuICAgIHJldHVybiBiaWxsaW5nQWRkcmVzc1dyYXBwZXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBAdHMtZXhwZWN0LWVycm9yIC0gVFM3MDMxIC0gQmluZGluZyBlbGVtZW50ICd0YXJnZXQnIGltcGxpY2l0bHkgaGFzIGFuICdhbnknIHR5cGUuXG5jb25zdCBpc0lucHV0SW5zaWRlU2hpcHBpbmdNZXRob2RFdmVudCA9ICh7dGFyZ2V0fSkgPT4ge1xuICAvLyBlbnN1cmVzIHRoaXMgZXZlbnQncyBsb2dpYyBkb2Vzbid0IHJ1biBvbiBub24tY2hlY2tvdXQgcGFnZXNcbiAgY29uc3QgY2hlY2tvdXRGb3JtQ29udGFpbmVyID1cbiAgICBmaW5kRWxlbWVudEJ5Tm9kZVR5cGUoTk9ERV9UWVBFX0NPTU1FUkNFX0NIRUNLT1VUX0ZPUk1fQ09OVEFJTkVSKSB8fFxuICAgIGZpbmRFbGVtZW50QnlOb2RlVHlwZShOT0RFX1RZUEVfQ09NTUVSQ0VfUEFZUEFMX0NIRUNLT1VUX0ZPUk1fQ09OVEFJTkVSKTtcbiAgaWYgKCFjaGVja291dEZvcm1Db250YWluZXIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBzaGlwcGluZ01ldGhvZFdyYXBwZXIgPSBmaW5kQ2xvc2VzdEVsZW1lbnRCeU5vZGVUeXBlKFxuICAgIE5PREVfVFlQRV9DT01NRVJDRV9DSEVDS09VVF9TSElQUElOR19NRVRIT0RTX1dSQVBQRVIsXG4gICAgdGFyZ2V0XG4gICk7XG4gIGlmIChcbiAgICBzaGlwcGluZ01ldGhvZFdyYXBwZXIgJiZcbiAgICB0YXJnZXQgaW5zdGFuY2VvZiBFbGVtZW50ICYmXG4gICAgdGFyZ2V0LnRhZ05hbWUgPT09ICdJTlBVVCdcbiAgKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzcwMzEgLSBCaW5kaW5nIGVsZW1lbnQgJ3RhcmdldCcgaW1wbGljaXRseSBoYXMgYW4gJ2FueScgdHlwZS5cbmNvbnN0IGlzQmlsbGluZ0FkZHJlc3NUb2dnbGVFdmVudCA9ICh7dGFyZ2V0fSkgPT4ge1xuICBpZiAoXG4gICAgdGFyZ2V0IGluc3RhbmNlb2YgRWxlbWVudCAmJlxuICAgIHRhcmdldC5nZXRBdHRyaWJ1dGUoREFUQV9BVFRSX05PREVfVFlQRSkgPT09XG4gICAgICBOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfQklMTElOR19BRERSRVNTX1RPR0dMRV9DSEVDS0JPWFxuICApIHtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTNzAzMSAtIEJpbmRpbmcgZWxlbWVudCAndGFyZ2V0JyBpbXBsaWNpdGx5IGhhcyBhbiAnYW55JyB0eXBlLlxuY29uc3QgaXNQbGFjZU9yZGVyQnV0dG9uRXZlbnQgPSAoe3RhcmdldH0pID0+IHtcbiAgY29uc3QgcGxhY2VPcmRlckJ1dHRvbiA9IGZpbmRDbG9zZXN0RWxlbWVudEJ5Tm9kZVR5cGUoXG4gICAgTk9ERV9UWVBFX0NPTU1FUkNFX0NIRUNLT1VUX1BMQUNFX09SREVSX0JVVFRPTixcbiAgICB0YXJnZXRcbiAgKTtcbiAgaWYgKHBsYWNlT3JkZXJCdXR0b24gJiYgdGFyZ2V0IGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBAdHMtZXhwZWN0LWVycm9yIC0gVFM3MDMxIC0gQmluZGluZyBlbGVtZW50ICd0YXJnZXQnIGltcGxpY2l0bHkgaGFzIGFuICdhbnknIHR5cGUuXG5jb25zdCBpc0FwcGx5RGlzY291bnRGb3JtRXZlbnQgPSAoe3RhcmdldH0pID0+IHtcbiAgaWYgKFxuICAgIHRhcmdldCBpbnN0YW5jZW9mIEVsZW1lbnQgJiZcbiAgICB0YXJnZXQuZ2V0QXR0cmlidXRlKERBVEFfQVRUUl9OT0RFX1RZUEUpID09PVxuICAgICAgTk9ERV9UWVBFX0NPTU1FUkNFX0NIRUNLT1VUX0RJU0NPVU5UX0ZPUk1cbiAgKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzcwMzEgLSBCaW5kaW5nIGVsZW1lbnQgJ3RhcmdldCcgaW1wbGljaXRseSBoYXMgYW4gJ2FueScgdHlwZS5cbmNvbnN0IGlzRm9ybUluc2lkZUNoZWNrb3V0Q29udGFpbmVyRXZlbnQgPSAoe3RhcmdldH0pID0+IHtcbiAgY29uc3QgY2hlY2tvdXRGb3JtID0gZmluZENsb3Nlc3RFbGVtZW50QnlOb2RlVHlwZShcbiAgICBOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfRk9STV9DT05UQUlORVIsXG4gICAgdGFyZ2V0XG4gICk7XG4gIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRm9ybUVsZW1lbnQgJiYgY2hlY2tvdXRGb3JtKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzcwMzEgLSBCaW5kaW5nIGVsZW1lbnQgJ3RhcmdldCcgaW1wbGljaXRseSBoYXMgYW4gJ2FueScgdHlwZS5cbmNvbnN0IGlzSW5wdXRJbnNpZGVDaGVja291dEZvcm1FdmVudCA9ICh7dGFyZ2V0fSkgPT4ge1xuICBjb25zdCBjaGVja291dEZvcm0gPSBmaW5kQ2xvc2VzdEVsZW1lbnRCeU5vZGVUeXBlKFxuICAgIE5PREVfVFlQRV9DT01NRVJDRV9DSEVDS09VVF9GT1JNX0NPTlRBSU5FUixcbiAgICB0YXJnZXRcbiAgKTtcbiAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQgJiYgY2hlY2tvdXRGb3JtKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmNvbnN0IGhhbmRsZVJlbmRlckNoZWNrb3V0ID0gKFxuICBldmVudDogRXZlbnQgfCBDdXN0b21FdmVudCxcbiAgYXBvbGxvQ2xpZW50OiBBcG9sbG9DbGllbnQ8Tm9ybWFsaXplZENhY2hlT2JqZWN0PixcbiAgc3RyaXBlU3RvcmU6IFN0cmlwZVN0b3JlXG4pID0+IHtcbiAgaWYgKHdpbmRvdy5XZWJmbG93LmVudignZGVzaWduJykgfHwgd2luZG93LldlYmZsb3cuZW52KCdwcmV2aWV3JykpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCEoZXZlbnQgaW5zdGFuY2VvZiBDdXN0b21FdmVudCAmJiBldmVudC50eXBlID09PSBSRU5ERVJfVFJFRV9FVkVOVCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZXJyb3JzOiBBcnJheTxhbnk+ID0gW107XG4gIGNvbnN0IHtkZXRhaWx9ID0gZXZlbnQ7XG4gIGlmIChkZXRhaWwgIT0gbnVsbCAmJiBkZXRhaWwuZXJyb3IpIHtcbiAgICBlcnJvcnMucHVzaChkZXRhaWwuZXJyb3IpO1xuICB9XG5cbiAgY29uc3QgZm9jdXNlZEVsZSA9IHdpbmRvdy5kb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICBjb25zdCBjaGVja291dEZvcm0gPSBmaW5kQ2xvc2VzdEVsZW1lbnRCeU5vZGVUeXBlKFxuICAgIE5PREVfVFlQRV9DT01NRVJDRV9DSEVDS09VVF9GT1JNX0NPTlRBSU5FUixcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMyMzQ1IC0gQXJndW1lbnQgb2YgdHlwZSAnRWxlbWVudCB8IG51bGwnIGlzIG5vdCBhc3NpZ25hYmxlIHRvIHBhcmFtZXRlciBvZiB0eXBlICdFdmVudFRhcmdldCcuXG4gICAgZm9jdXNlZEVsZVxuICApO1xuXG4gIGxldCBwcmV2Rm9jdXNlZElucHV0ID0gbnVsbDtcbiAgLy8gT25seSB0cmlnZ2VyIGZvciBmb2N1c2VkIGVsZW1lbnRzIGluIGEgY2hlY2tvdXQgZm9ybVxuICBpZiAoZm9jdXNlZEVsZSBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQgJiYgY2hlY2tvdXRGb3JtKSB7XG4gICAgcHJldkZvY3VzZWRJbnB1dCA9IGZvY3VzZWRFbGUuaWQ7XG4gICAgaWYgKCFwcmV2Rm9jdXNlZElucHV0KSB7XG4gICAgICBwcmV2Rm9jdXNlZElucHV0ID0gZm9jdXNlZEVsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtd2YtYmluZGluZ3MnKTtcbiAgICB9XG5cbiAgICAvLyBNb3ZlIGZyb20gZW1wdHkgc3RyaW5nIHRvIG51bGxcbiAgICBwcmV2Rm9jdXNlZElucHV0ID0gcHJldkZvY3VzZWRJbnB1dCA/IG51bGwgOiBwcmV2Rm9jdXNlZElucHV0O1xuICB9XG5cbiAgY29uc3QgY2hlY2tvdXRGb3JtQ29udGFpbmVycyA9IGZpbmRBbGxFbGVtZW50c0J5Tm9kZVR5cGUoXG4gICAgTk9ERV9UWVBFX0NPTU1FUkNFX0NIRUNLT1VUX0ZPUk1fQ09OVEFJTkVSXG4gICk7XG5cbiAgcmVuZGVyQ2hlY2tvdXRGb3JtQ29udGFpbmVycyhcbiAgICBjaGVja291dEZvcm1Db250YWluZXJzLFxuICAgIGVycm9ycyxcbiAgICBhcG9sbG9DbGllbnQsXG4gICAgc3RyaXBlU3RvcmUsXG4gICAgcHJldkZvY3VzZWRJbnB1dFxuICApO1xufTtcblxuY29uc3QgY2hlY2tGb3JtVmFsaWRpdHkgPSAoe1xuICBjdXN0b21lckluZm8sXG4gIHNoaXBwaW5nQWRkcmVzcyxcbiAgc2hpcHBpbmdJbmZvLFxuICBiaWxsaW5nQWRkcmVzcyxcbiAgYmlsbGluZ0FkZHJlc3NUb2dnbGUsXG4gIGFkZGl0aW9uYWxJbmZvLFxuICByZXF1aXJlc1NoaXBwaW5nLFxufToge1xuICBjdXN0b21lckluZm86IEhUTUxGb3JtRWxlbWVudDtcbiAgc2hpcHBpbmdBZGRyZXNzOiBIVE1MRm9ybUVsZW1lbnQ7XG4gIHNoaXBwaW5nSW5mbzogSFRNTEZvcm1FbGVtZW50O1xuICBiaWxsaW5nQWRkcmVzczogSFRNTEZvcm1FbGVtZW50O1xuICBiaWxsaW5nQWRkcmVzc1RvZ2dsZTogSFRNTElucHV0RWxlbWVudDtcbiAgYWRkaXRpb25hbEluZm86IEhUTUxFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZDtcbiAgcmVxdWlyZXNTaGlwcGluZzogYm9vbGVhbjtcbn0pID0+IHtcbiAgLy8gcmVwb3J0VmFsaWRpdHkgaXNuJ3Qgc3VwcG9ydGVkIGluIElFLCBzbyB3ZSBuZWVkIHRvIGNoZWNrIGlmIGl0IGV4aXN0c1xuICAvLyBmb3Igb3VyIElFIHVzZXJzLiB0aGV5J2xsIGhhdmUgdG8gcmVseSBvbiB0aGUgc2VydmVyIGVycm9yLCB3aGljaCBpc24ndFxuICAvLyB0b28gYmFkIGZyb20gYSBVWCBleHBlcmllbmNlLCBzaW5jZSB0aGV5J2xsIHN0aWxsIGtub3cgc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgaWYgKCFIVE1MRm9ybUVsZW1lbnQucHJvdG90eXBlLnJlcG9ydFZhbGlkaXR5KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBiZWNhdXNlIHdlIGhhdmUgbXVsdGlwbGUgZm9ybSBlbGVtZW50cywgd2hhdCB3ZSBkbyBpcyBhc2sgdGhlIGJyb3dzZXIgdG8gcmVwb3J0XG4gIC8vIHRoZSB2YWxpZGl0eSBvZiBlYWNoIGZvcm0sIHdoaWNoIHRyaWdnZXJzIHRoZSBVSSB0aGF0IHdvdWxkIHVzdWFsbHkgYmUgc2VlblxuICAvLyB3aGVuIHNvbWVvbmUgc3VibWl0dGVkIGEgcmVndWxhciBmb3JtLiB3ZSByZXR1cm4gaWYgaXQncyBub3QgdmFsaWQsIHNvIHRoYXRcbiAgLy8gdGhlIGJyb3dzZXIgZG9lc24ndCBqdW1wIGFoZWFkIHRvIHRoZSBuZXh0IGVsZW1lbnQsIGFsbG93aW5nIHRoZSB1c2VyIHRvXG4gIC8vIGZpeCB0aGVpciBtaXN0YWtlcy4gd2UgZG9uJ3QgY2hlY2sgdGhlIHN0cmlwZSBlbGVtZW50cywgc2luY2Ugd2UgY2FuJ3RcbiAgLy8gZGlyZWN0bHkgZ2V0IHRoZSBzdGF0dXMgb2YgdGhvc2UsIGFzIHRoYXQncyBoYW5kbGVkIGJ5IHN0cmlwZS4gaG93ZXZlciwgaWZcbiAgLy8gdGhlIHVzZXIgaXMgbWlzc2luZyBhIGZpZWxkIGFuZCB0cmllcyB0byBzdWJtaXQgdGhlIGZvcm0sIHRoZXkgd2lsbCBnZXRcbiAgLy8gYW4gZXJyb3Igd2hlbiB3ZSB0cnkgdG8gY3JlYXRlIHRoZSB0b2tlbiwgc28gd2UnbGwgZGlzcGxheSBhbiBlcnJvciB0aGVuXG4gIGlmIChcbiAgICAhY3VzdG9tZXJJbmZvLnJlcG9ydFZhbGlkaXR5KCkgfHxcbiAgICAocmVxdWlyZXNTaGlwcGluZyAmJiAhc2hpcHBpbmdBZGRyZXNzLnJlcG9ydFZhbGlkaXR5KCkpIHx8XG4gICAgKHJlcXVpcmVzU2hpcHBpbmcgJiYgIXNoaXBwaW5nSW5mby5yZXBvcnRWYWxpZGl0eSgpKSB8fFxuICAgIC8vIG9ubHkgY2hlY2sgdGhlIGJpbGxpbmcgYWRkcmVzcyBpZiB0aGUgdG9nZ2xlIGlzIG9mZiwgaS5lLiB0aGUgYmlsbGluZyBhZGRyZXNzXG4gICAgLy8gZm9ybSBpcyBiZWluZyBzaG93biBvciBpZiBpdCBkb2VzIG5vdCByZXF1aXJlIHNoaXBwaW5nXG4gICAgKCghcmVxdWlyZXNTaGlwcGluZyB8fCAhYmlsbGluZ0FkZHJlc3NUb2dnbGUuY2hlY2tlZCkgJiZcbiAgICAgICFiaWxsaW5nQWRkcmVzcy5yZXBvcnRWYWxpZGl0eSgpKSB8fFxuICAgIChhZGRpdGlvbmFsSW5mbyAmJlxuICAgICAgYWRkaXRpb25hbEluZm8gaW5zdGFuY2VvZiBIVE1MRm9ybUVsZW1lbnQgJiZcbiAgICAgICFhZGRpdGlvbmFsSW5mby5yZXBvcnRWYWxpZGl0eSgpKVxuICApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmxldCBwbGFjaW5nT3JkZXIgPSBmYWxzZTtcbmNvbnN0IHN0YXJ0T3JkZXJGbG93ID0gKHBsYWNlT3JkZXJCdXR0b246IEhUTUxFbGVtZW50KSA9PiB7XG4gIHBsYWNpbmdPcmRlciA9IHRydWU7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBiZWZvcmVVbmxvYWRIYW5kbGVyKTtcblxuICBjb25zdCBidXR0b25UZXh0ID0gcGxhY2VPcmRlckJ1dHRvbi5pbm5lckhUTUw7XG4gIGNvbnN0IGxvYWRpbmdUZXh0ID0gcGxhY2VPcmRlckJ1dHRvbi5nZXRBdHRyaWJ1dGUoREFUQV9BVFRSX0xPQURJTkdfVEVYVCk7XG4gIHBsYWNlT3JkZXJCdXR0b24uaW5uZXJIVE1MID0gbG9hZGluZ1RleHRcbiAgICA/IGxvYWRpbmdUZXh0XG4gICAgOiBDSEVDS09VVF9QTEFDRV9PUkRFUl9MT0FESU5HX1RFWFRfREVGQVVMVDtcblxuICBjb25zdCBmaW5pc2hPcmRlckZsb3cgPSAoaXNSZWRpcmVjdGluZzogYm9vbGVhbiA9IGZhbHNlKSA9PiB7XG4gICAgLy8gd2Ugb25seSBzZXQgYHBsYWNpbmdPcmRlcmAgdG8gZmFsc2UgaWYgd2UncmUgbm90IHJlZGlyZWN0aW5nIHRvIHRoZVxuICAgIC8vIGNvbmZpcm1hdGlvbiBwYWdlLiB0aGlzIGlzIHNvIHRoYXQgd2hpbGUgd2FpdGluZyBmb3IgdGhlIGNvbmZpcm1hdGlvblxuICAgIC8vIHBhZ2UgdG8gbG9hZCwgdGhlIHVzZXIgY2FuJ3QgYXR0ZW1wdCB0byBzdWJtaXQgdGhlIG9yZGVyIGFnYWluXG4gICAgaWYgKCFpc1JlZGlyZWN0aW5nKSB7XG4gICAgICBwbGFjaW5nT3JkZXIgPSBmYWxzZTtcbiAgICB9XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGJlZm9yZVVubG9hZEhhbmRsZXIpO1xuICAgIHBsYWNlT3JkZXJCdXR0b24uaW5uZXJIVE1MID0gYnV0dG9uVGV4dFxuICAgICAgPyBidXR0b25UZXh0XG4gICAgICA6IENIRUNLT1VUX1BMQUNFX09SREVSX0JVVFRPTl9URVhUX0RFRkFVTFQ7XG4gIH07XG5cbiAgcmV0dXJuIGZpbmlzaE9yZGVyRmxvdztcbn07XG5cbmNvbnN0IGhhbmRsZVBsYWNlT3JkZXIgPSAoXG4gIGV2ZW50OiBFdmVudCxcbiAgYXBvbGxvQ2xpZW50OiBBcG9sbG9DbGllbnQ8Tm9ybWFsaXplZENhY2hlT2JqZWN0PixcbiAgc3RyaXBlU3RvcmU6IFN0cmlwZVN0b3JlXG4pID0+IHtcbiAgLy8gV2FudCB0byBza2lwIHBsYWNpbmcgb3JkZXIgaWYgaW4gZGVzaWduL3ByZXZpZXcgbW9kZSwgb3IgYW4gb3JkZXIgcGxhY2UgaXMgaW4gcHJvZ3Jlc3NcbiAgaWYgKFxuICAgIHdpbmRvdy5XZWJmbG93LmVudignZGVzaWduJykgfHxcbiAgICB3aW5kb3cuV2ViZmxvdy5lbnYoJ3ByZXZpZXcnKSB8fFxuICAgIHBsYWNpbmdPcmRlclxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7Y3VycmVudFRhcmdldH0gPSBldmVudDtcblxuICBpZiAoIShjdXJyZW50VGFyZ2V0IGluc3RhbmNlb2YgRWxlbWVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBjaGVja291dEZvcm1Db250YWluZXIgPSBmaW5kQ2xvc2VzdEVsZW1lbnRCeU5vZGVUeXBlKFxuICAgIE5PREVfVFlQRV9DT01NRVJDRV9DSEVDS09VVF9GT1JNX0NPTlRBSU5FUixcbiAgICBjdXJyZW50VGFyZ2V0XG4gICk7XG4gIGlmICghKGNoZWNrb3V0Rm9ybUNvbnRhaW5lciBpbnN0YW5jZW9mIEVsZW1lbnQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgZXJyb3JTdGF0ZSA9IGZpbmRFbGVtZW50QnlOb2RlVHlwZShcbiAgICBOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfRVJST1JfU1RBVEUsXG4gICAgY2hlY2tvdXRGb3JtQ29udGFpbmVyXG4gICk7XG4gIGNvbnN0IGN1c3RvbWVySW5mbyA9IGZpbmRFbGVtZW50QnlOb2RlVHlwZShcbiAgICBOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfQ1VTVE9NRVJfSU5GT19XUkFQUEVSLFxuICAgIGNoZWNrb3V0Rm9ybUNvbnRhaW5lclxuICApO1xuICBjb25zdCBzaGlwcGluZ0FkZHJlc3MgPSBmaW5kRWxlbWVudEJ5Tm9kZVR5cGUoXG4gICAgTk9ERV9UWVBFX0NPTU1FUkNFX0NIRUNLT1VUX1NISVBQSU5HX0FERFJFU1NfV1JBUFBFUixcbiAgICBjaGVja291dEZvcm1Db250YWluZXJcbiAgKTtcbiAgY29uc3Qgc2hpcHBpbmdJbmZvID0gZmluZEVsZW1lbnRCeU5vZGVUeXBlKFxuICAgIE5PREVfVFlQRV9DT01NRVJDRV9DSEVDS09VVF9TSElQUElOR19NRVRIT0RTX1dSQVBQRVIsXG4gICAgY2hlY2tvdXRGb3JtQ29udGFpbmVyXG4gICk7XG4gIGNvbnN0IGJpbGxpbmdBZGRyZXNzID0gZmluZEVsZW1lbnRCeU5vZGVUeXBlKFxuICAgIE5PREVfVFlQRV9DT01NRVJDRV9DSEVDS09VVF9CSUxMSU5HX0FERFJFU1NfV1JBUFBFUixcbiAgICBjaGVja291dEZvcm1Db250YWluZXJcbiAgKTtcbiAgY29uc3QgYmlsbGluZ0FkZHJlc3NUb2dnbGUgPSBmaW5kRWxlbWVudEJ5Tm9kZVR5cGUoXG4gICAgTk9ERV9UWVBFX0NPTU1FUkNFX0NIRUNLT1VUX0JJTExJTkdfQUREUkVTU19UT0dHTEVfQ0hFQ0tCT1gsXG4gICAgY2hlY2tvdXRGb3JtQ29udGFpbmVyXG4gICk7XG4gIGNvbnN0IHBsYWNlT3JkZXJCdXR0b24gPSBmaW5kRWxlbWVudEJ5Tm9kZVR5cGUoXG4gICAgTk9ERV9UWVBFX0NPTU1FUkNFX0NIRUNLT1VUX1BMQUNFX09SREVSX0JVVFRPTixcbiAgICBjaGVja291dEZvcm1Db250YWluZXJcbiAgKTtcbiAgY29uc3QgYWRkaXRpb25hbEluZm8gPSBmaW5kRWxlbWVudEJ5Tm9kZVR5cGUoXG4gICAgTk9ERV9UWVBFX0NPTU1FUkNFX0NIRUNLT1VUX0FERElUSU9OQUxfSU5GTyxcbiAgICBjaGVja291dEZvcm1Db250YWluZXJcbiAgKTtcblxuICBpZiAoXG4gICAgIShlcnJvclN0YXRlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHx8XG4gICAgIShjdXN0b21lckluZm8gaW5zdGFuY2VvZiBIVE1MRm9ybUVsZW1lbnQpIHx8XG4gICAgIShzaGlwcGluZ0FkZHJlc3MgaW5zdGFuY2VvZiBIVE1MRm9ybUVsZW1lbnQpIHx8XG4gICAgIShzaGlwcGluZ0luZm8gaW5zdGFuY2VvZiBIVE1MRm9ybUVsZW1lbnQpIHx8XG4gICAgIShiaWxsaW5nQWRkcmVzcyBpbnN0YW5jZW9mIEhUTUxGb3JtRWxlbWVudCkgfHxcbiAgICAhKGJpbGxpbmdBZGRyZXNzVG9nZ2xlIGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkgfHxcbiAgICAhKHBsYWNlT3JkZXJCdXR0b24gaW5zdGFuY2VvZiBFbGVtZW50KVxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvclN0YXRlLnF1ZXJ5U2VsZWN0b3IoXG4gICAgQ0FSVF9DSEVDS09VVF9FUlJPUl9NRVNTQUdFX1NFTEVDVE9SXG4gICk7XG5cbiAgLy8gSWYgdGhlIGVycm9yIG1lc3NhZ2UgaGFzIHRoaXMgYXR0cmlidXRlLCB3ZSB3YW50IHRvIGJsb2NrIHRoZSBvcmRlciBmcm9tXG4gIC8vIGJlaW5nIHN1Ym1pdHRlZCBhcyB0aGUgdXNlciBpcyBiZWluZyBmb3JjZWQgdG8gcmVmcmVzaCB0aGUgY2hlY2tvdXQgcGFnZS5cbiAgaWYgKGVycm9yTWVzc2FnZSAmJiBlcnJvck1lc3NhZ2UuaGFzQXR0cmlidXRlKE5FRURTX1JFRlJFU0gpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgaGFzQWRkaXRpb25hbEluZm8gPVxuICAgIGFkZGl0aW9uYWxJbmZvICYmIGFkZGl0aW9uYWxJbmZvIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG5cbiAgY29uc3QgZmluaXNoT3JkZXJGbG93ID0gc3RhcnRPcmRlckZsb3cocGxhY2VPcmRlckJ1dHRvbik7XG5cbiAgZXJyb3JTdGF0ZS5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlzcGxheScsICdub25lJyk7XG5cbiAgZmV0Y2hPcmRlclN0YXR1c0ZsYWdzKGFwb2xsb0NsaWVudCkudGhlbihcbiAgICAoe3JlcXVpcmVzU2hpcHBpbmcsIGlzRnJlZU9yZGVyfSkgPT4ge1xuICAgICAgY29uc3QgaXNGb3JtVmFsaWQgPSBjaGVja0Zvcm1WYWxpZGl0eSh7XG4gICAgICAgIGN1c3RvbWVySW5mbyxcbiAgICAgICAgc2hpcHBpbmdBZGRyZXNzLFxuICAgICAgICBzaGlwcGluZ0luZm8sXG4gICAgICAgIGJpbGxpbmdBZGRyZXNzLFxuICAgICAgICBiaWxsaW5nQWRkcmVzc1RvZ2dsZSxcbiAgICAgICAgYWRkaXRpb25hbEluZm8sXG4gICAgICAgIHJlcXVpcmVzU2hpcHBpbmcsXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFpc0Zvcm1WYWxpZCkge1xuICAgICAgICBmaW5pc2hPcmRlckZsb3coKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBmaW5hbCBzeW5jIHdpdGggc2VydmVyLCB0byBlbnN1cmUgdmFsaWRpdHlcbiAgICAgIGNvbnN0IGN1c3RvbWVySW5mb0Zvcm1EYXRhID0gZm9ybVRvT2JqZWN0KGN1c3RvbWVySW5mbyk7XG4gICAgICBjb25zdCBlbWFpbCA9IFN0cmluZyhjdXN0b21lckluZm9Gb3JtRGF0YS5lbWFpbCkudHJpbSgpO1xuICAgICAgY29uc3Qgc2hpcHBpbmdBZGRyZXNzSW5mbyA9IHtcbiAgICAgICAgdHlwZTogJ3NoaXBwaW5nJyxcbiAgICAgICAgLi4uZm9ybVRvT2JqZWN0KHNoaXBwaW5nQWRkcmVzcywgdHJ1ZSksXG4gICAgICB9IGFzIGNvbnN0O1xuICAgICAgY29uc3QgYmlsbGluZ0FkZHJlc3NJbmZvID0ge1xuICAgICAgICB0eXBlOiAnYmlsbGluZycsXG4gICAgICAgIC4uLmZvcm1Ub09iamVjdChcbiAgICAgICAgICAhYmlsbGluZ0FkZHJlc3NUb2dnbGUuY2hlY2tlZCB8fCAhcmVxdWlyZXNTaGlwcGluZ1xuICAgICAgICAgICAgPyBiaWxsaW5nQWRkcmVzc1xuICAgICAgICAgICAgOiBzaGlwcGluZ0FkZHJlc3MsXG4gICAgICAgICAgdHJ1ZVxuICAgICAgICApLFxuICAgICAgfSBhcyBjb25zdDtcbiAgICAgIGNvbnN0IHN0cmlwZUJpbGxpbmdBZGRyZXNzSW5mbyA9IHtcbiAgICAgICAgYmlsbGluZ19kZXRhaWxzOiB7XG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTMjMzOSAtIFByb3BlcnR5ICduYW1lJyBkb2VzIG5vdCBleGlzdCBvbiB0eXBlICd7IHJlYWRvbmx5IHR5cGU6IFwiYmlsbGluZ1wiOyB9Jy5cbiAgICAgICAgICBuYW1lOiBiaWxsaW5nQWRkcmVzc0luZm8ubmFtZSxcbiAgICAgICAgICBlbWFpbCxcbiAgICAgICAgICBhZGRyZXNzOiB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMyMzM5IC0gUHJvcGVydHkgJ2FkZHJlc3NfbGluZTEnIGRvZXMgbm90IGV4aXN0IG9uIHR5cGUgJ3sgcmVhZG9ubHkgdHlwZTogXCJiaWxsaW5nXCI7IH0nLlxuICAgICAgICAgICAgbGluZTE6IGJpbGxpbmdBZGRyZXNzSW5mby5hZGRyZXNzX2xpbmUxLFxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTMjMzOSAtIFByb3BlcnR5ICdhZGRyZXNzX2xpbmUyJyBkb2VzIG5vdCBleGlzdCBvbiB0eXBlICd7IHJlYWRvbmx5IHR5cGU6IFwiYmlsbGluZ1wiOyB9Jy5cbiAgICAgICAgICAgIGxpbmUyOiBiaWxsaW5nQWRkcmVzc0luZm8uYWRkcmVzc19saW5lMixcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzIzMzkgLSBQcm9wZXJ0eSAnYWRkcmVzc19jaXR5JyBkb2VzIG5vdCBleGlzdCBvbiB0eXBlICd7IHJlYWRvbmx5IHR5cGU6IFwiYmlsbGluZ1wiOyB9Jy5cbiAgICAgICAgICAgIGNpdHk6IGJpbGxpbmdBZGRyZXNzSW5mby5hZGRyZXNzX2NpdHksXG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMyMzM5IC0gUHJvcGVydHkgJ2FkZHJlc3Nfc3RhdGUnIGRvZXMgbm90IGV4aXN0IG9uIHR5cGUgJ3sgcmVhZG9ubHkgdHlwZTogXCJiaWxsaW5nXCI7IH0nLlxuICAgICAgICAgICAgc3RhdGU6IGJpbGxpbmdBZGRyZXNzSW5mby5hZGRyZXNzX3N0YXRlLFxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTMjMzOSAtIFByb3BlcnR5ICdhZGRyZXNzX2NvdW50cnknIGRvZXMgbm90IGV4aXN0IG9uIHR5cGUgJ3sgcmVhZG9ubHkgdHlwZTogXCJiaWxsaW5nXCI7IH0nLlxuICAgICAgICAgICAgY291bnRyeTogYmlsbGluZ0FkZHJlc3NJbmZvLmFkZHJlc3NfY291bnRyeSxcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzIzMzkgLSBQcm9wZXJ0eSAnYWRkcmVzc196aXAnIGRvZXMgbm90IGV4aXN0IG9uIHR5cGUgJ3sgcmVhZG9ubHkgdHlwZTogXCJiaWxsaW5nXCI7IH0nLlxuICAgICAgICAgICAgcG9zdGFsX2NvZGU6IGJpbGxpbmdBZGRyZXNzSW5mby5hZGRyZXNzX3ppcCxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSBhcyBjb25zdDtcblxuICAgICAgbGV0IHNoaXBwaW5nTWV0aG9kSWQgPSAnJztcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzcwMTUgLSBFbGVtZW50IGltcGxpY2l0bHkgaGFzIGFuICdhbnknIHR5cGUgYmVjYXVzZSBpbmRleCBleHByZXNzaW9uIGlzIG5vdCBvZiB0eXBlICdudW1iZXInLlxuICAgICAgaWYgKHJlcXVpcmVzU2hpcHBpbmcgJiYgc2hpcHBpbmdJbmZvLmVsZW1lbnRzWydzaGlwcGluZy1tZXRob2QtY2hvaWNlJ10pIHtcbiAgICAgICAgLy8gdGhpcyBpcyBhbiBJRTExLXNhZmUgd2F5IG9mIGp1c3QgZG9pbmcgc2hpcHBpbmdJbmZvLmVsZW1lbnRzWydzaGlwcGluZy1tZXRob2QtY2hvaWNlJ10udmFsdWVcbiAgICAgICAgY29uc3Qgc2hpcHBpbmdNZXRob2RDaG9pY2UgPSBzaGlwcGluZ0luZm8ucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAnaW5wdXRbbmFtZT1cInNoaXBwaW5nLW1ldGhvZC1jaG9pY2VcIl06Y2hlY2tlZCdcbiAgICAgICAgKSBhcyBIVE1MSW5wdXRFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZDtcblxuICAgICAgICAvLyB0aGlzIHNob3VsZCBuZXZlciBiZSBmYWxzZXksIGJ1dCBGbG93XG4gICAgICAgIGlmIChzaGlwcGluZ01ldGhvZENob2ljZSkge1xuICAgICAgICAgIHNoaXBwaW5nTWV0aG9kSWQgPSBzaGlwcGluZ01ldGhvZENob2ljZS52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBjdXN0b21EYXRhID0gaGFzQWRkaXRpb25hbEluZm9cbiAgICAgICAgPyBjdXN0b21EYXRhRm9ybVRvQXJyYXkoYWRkaXRpb25hbEluZm8pXG4gICAgICAgIDogW107XG5cbiAgICAgIGNvbnN0IHN5bmNDaGVja291dEZvcm0gPSBQcm9taXNlLmFsbChbXG4gICAgICAgIGNyZWF0ZU9yZGVySWRlbnRpdHlNdXRhdGlvbihhcG9sbG9DbGllbnQsIGVtYWlsKSxcbiAgICAgICAgY3JlYXRlT3JkZXJBZGRyZXNzTXV0YXRpb24oYXBvbGxvQ2xpZW50LCBiaWxsaW5nQWRkcmVzc0luZm8pLFxuICAgICAgICByZXF1aXJlc1NoaXBwaW5nXG4gICAgICAgICAgPyBjcmVhdGVPcmRlckFkZHJlc3NNdXRhdGlvbihhcG9sbG9DbGllbnQsIHNoaXBwaW5nQWRkcmVzc0luZm8pXG4gICAgICAgICAgOiBQcm9taXNlLnJlc29sdmUoKSxcbiAgICAgICAgcmVxdWlyZXNTaGlwcGluZ1xuICAgICAgICAgID8gY3JlYXRlT3JkZXJTaGlwcGluZ01ldGhvZE11dGF0aW9uKGFwb2xsb0NsaWVudCwgc2hpcHBpbmdNZXRob2RJZClcbiAgICAgICAgICA6IFByb21pc2UucmVzb2x2ZSgpLFxuICAgICAgICBoYXNBZGRpdGlvbmFsSW5mb1xuICAgICAgICAgID8gLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTMjM0NSAtIEFyZ3VtZW50IG9mIHR5cGUgJ2FueVtdJyBpcyBub3QgYXNzaWduYWJsZSB0byBwYXJhbWV0ZXIgb2YgdHlwZSAnW10nLlxuICAgICAgICAgICAgY3JlYXRlQ3VzdG9tRGF0YU11dGF0aW9uKGFwb2xsb0NsaWVudCwgY3VzdG9tRGF0YSlcbiAgICAgICAgICA6IFByb21pc2UucmVzb2x2ZSgpLFxuICAgICAgXSk7XG5cbiAgICAgIHN5bmNDaGVja291dEZvcm1cbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGlmIChpc0ZyZWVPcmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghc3RyaXBlU3RvcmUuaXNJbml0aWFsaXplZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBcIlN0cmlwZSBoYXMgbm90IGJlZW4gc2V0IHVwIGZvciB0aGlzIHByb2plY3Qg4oCTIEdvIHRvIHRoZSBwcm9qZWN0J3MgRWNvbW1lcmNlIFBheW1lbnQgc2V0dGluZ3MgaW4gdGhlIERlc2lnbmVyIHRvIGxpbmsgU3RyaXBlLlwiXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3Qgc3RyaXBlID0gc3RyaXBlU3RvcmUuZ2V0U3RyaXBlSW5zdGFuY2UoKTtcbiAgICAgICAgICBjb25zdCBjaGVja291dEZvcm1JbnN0YW5jZSA9IHBhcnNlSW50KFxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTMjM0NSAtIEFyZ3VtZW50IG9mIHR5cGUgJ3N0cmluZyB8IG51bGwnIGlzIG5vdCBhc3NpZ25hYmxlIHRvIHBhcmFtZXRlciBvZiB0eXBlICdzdHJpbmcnLlxuICAgICAgICAgICAgY2hlY2tvdXRGb3JtQ29udGFpbmVyLmdldEF0dHJpYnV0ZShTVFJJUEVfRUxFTUVOVF9JTlNUQU5DRSksXG4gICAgICAgICAgICAxMFxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgY2FyZCA9IHN0cmlwZVN0b3JlLmdldEVsZW1lbnQoXG4gICAgICAgICAgICAnY2FyZE51bWJlcicsXG4gICAgICAgICAgICBjaGVja291dEZvcm1JbnN0YW5jZVxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIHN0cmlwZS5jcmVhdGVQYXltZW50TWV0aG9kKFxuICAgICAgICAgICAgJ2NhcmQnLFxuICAgICAgICAgICAgY2FyZCxcbiAgICAgICAgICAgIHN0cmlwZUJpbGxpbmdBZGRyZXNzSW5mb1xuICAgICAgICAgICk7XG4gICAgICAgIH0pXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBBcmd1bWVudCBvZiB0eXBlICcoZGF0YTogYW55KSA9PiBQcm9taXNlPEZldGNoUmVzdWx0PGFueT4+IHwgUHJvbWlzZTx2b2lkPicgaXMgbm90IGFzc2lnbmFibGUgdG8gcGFyYW1ldGVyIG9mIHR5cGUgJyh2YWx1ZTogYW55KSA9PiBGZXRjaFJlc3VsdDxhbnk+IHwgUHJvbWlzZUxpa2U8RmV0Y2hSZXN1bHQ8YW55Pj4nLlxuICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgIGlmICghZGF0YSB8fCBpc0ZyZWVPcmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkYXRhLmVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZGF0YS5lcnJvcik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVN0cmlwZVBheW1lbnRNZXRob2RNdXRhdGlvbihcbiAgICAgICAgICAgIGFwb2xsb0NsaWVudCxcbiAgICAgICAgICAgIGRhdGEucGF5bWVudE1ldGhvZC5pZFxuICAgICAgICAgICk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlQXR0ZW1wdFN1Ym1pdE9yZGVyUmVxdWVzdChhcG9sbG9DbGllbnQsIHtcbiAgICAgICAgICAgIGNoZWNrb3V0VHlwZTogJ25vcm1hbCcsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgZGVidWcubG9nKGRhdGEpO1xuICAgICAgICAgIGNvbnN0IG9yZGVyID0gZ2V0T3JkZXJEYXRhRnJvbUdyYXBoUUxSZXNwb25zZShkYXRhKTtcbiAgICAgICAgICBpZiAob3JkZXJSZXF1aXJlc0FkZGl0aW9uYWxBY3Rpb24ob3JkZXIuc3RhdHVzKSkge1xuICAgICAgICAgICAgY29uc3Qgc3RyaXBlID0gc3RyaXBlU3RvcmUuZ2V0U3RyaXBlSW5zdGFuY2UoKTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIHN0cmlwZVxuICAgICAgICAgICAgICAgIC5yZXRyaWV2ZVBheW1lbnRJbnRlbnQob3JkZXIuY2xpZW50U2VjcmV0KVxuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzcwMDYgLSBQYXJhbWV0ZXIgJ3JldHJpZXZlUmVzdWx0JyBpbXBsaWNpdGx5IGhhcyBhbiAnYW55JyB0eXBlLlxuICAgICAgICAgICAgICAgIC50aGVuKChyZXRyaWV2ZVJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgaW50ZW50ID1cbiAgICAgICAgICAgICAgICAgICAgKHJldHJpZXZlUmVzdWx0ICYmIHJldHJpZXZlUmVzdWx0LnBheW1lbnRJbnRlbnQpIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgY29uc3QgYWN0aW9uUHJvbWlzZSA9XG4gICAgICAgICAgICAgICAgICAgIGludGVudC5jb25maXJtYXRpb25fbWV0aG9kID09PSAnYXV0b21hdGljJ1xuICAgICAgICAgICAgICAgICAgICAgID8gc3RyaXBlLmNvbmZpcm1DYXJkUGF5bWVudChvcmRlci5jbGllbnRTZWNyZXQpXG4gICAgICAgICAgICAgICAgICAgICAgOiBzdHJpcGUuaGFuZGxlQ2FyZEFjdGlvbihvcmRlci5jbGllbnRTZWNyZXQpO1xuXG4gICAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFM3MDA2IC0gUGFyYW1ldGVyICdyZXN1bHQnIGltcGxpY2l0bHkgaGFzIGFuICdhbnknIHR5cGUuXG4gICAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uUHJvbWlzZS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5lcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZXN1bHQuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUF0dGVtcHRTdWJtaXRPcmRlclJlcXVlc3QoYXBvbGxvQ2xpZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgY2hlY2tvdXRUeXBlOiAnbm9ybWFsJyxcbiAgICAgICAgICAgICAgICAgICAgICBwYXltZW50SW50ZW50SWQ6IHJlc3VsdC5wYXltZW50SW50ZW50LmlkLFxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKChyZXNwKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmluaXNoZWRPcmRlciA9XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRPcmRlckRhdGFGcm9tR3JhcGhRTFJlc3BvbnNlKHJlc3ApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbmlzaGVkT3JkZXIub2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaE9yZGVyRmxvdyh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0VG9PcmRlckNvbmZpcm1hdGlvbihmaW5pc2hlZE9yZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvcmRlci5vaykge1xuICAgICAgICAgICAgZmluaXNoT3JkZXJGbG93KHRydWUpO1xuICAgICAgICAgICAgcmVkaXJlY3RUb09yZGVyQ29uZmlybWF0aW9uKG9yZGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgZmluaXNoT3JkZXJGbG93KCk7XG4gICAgICAgICAgZGVidWcuZXJyb3IoZXJyKTtcbiAgICAgICAgICBlcnJvclN0YXRlLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdkaXNwbGF5Jyk7XG4gICAgICAgICAgdXBkYXRlRXJyb3JNZXNzYWdlKGVycm9yU3RhdGUsIGVycik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgKTtcbn07XG5cbi8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzIzMTQgLSBHZW5lcmljIHR5cGUgJ0Fwb2xsb0NsaWVudDxUQ2FjaGVTaGFwZT4nIHJlcXVpcmVzIDEgdHlwZSBhcmd1bWVudChzKS5cbmNvbnN0IGhhbmRsZUFwcGx5RGlzY291bnQgPSAoZXZlbnQ6IEV2ZW50LCBhcG9sbG9DbGllbnQ6IEFwb2xsb0NsaWVudCkgPT4ge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBwcmV2ZW50IHN1Ym1pdFxuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTsgLy8gZG8gbm90IHRyaWdnZXIgc3VibWlzc2lvbiBvZiBhbnkgb3RoZXIgZm9ybXMgKHdlIGhhdmUgZm9ybXMgaW4gZm9ybXMgOigpKVxuXG4gIGNvbnN0IHtjdXJyZW50VGFyZ2V0fSA9IGV2ZW50O1xuICBpZiAoIShjdXJyZW50VGFyZ2V0IGluc3RhbmNlb2YgRWxlbWVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBpbnB1dEVsID0gZmluZEVsZW1lbnRCeU5vZGVUeXBlKFxuICAgIE5PREVfVFlQRV9DT01NRVJDRV9DSEVDS09VVF9ESVNDT1VOVF9JTlBVVCxcbiAgICBjdXJyZW50VGFyZ2V0XG4gICk7XG4gIGNvbnN0IGNoZWNrb3V0Rm9ybUNvbnRhaW5lciA9XG4gICAgZmluZENsb3Nlc3RFbGVtZW50QnlOb2RlVHlwZShcbiAgICAgIE5PREVfVFlQRV9DT01NRVJDRV9DSEVDS09VVF9GT1JNX0NPTlRBSU5FUixcbiAgICAgIGN1cnJlbnRUYXJnZXRcbiAgICApIHx8XG4gICAgZmluZENsb3Nlc3RFbGVtZW50QnlOb2RlVHlwZShcbiAgICAgIE5PREVfVFlQRV9DT01NRVJDRV9QQVlQQUxfQ0hFQ0tPVVRfRk9STV9DT05UQUlORVIsXG4gICAgICBjdXJyZW50VGFyZ2V0XG4gICAgKTtcbiAgaWYgKCFjaGVja291dEZvcm1Db250YWluZXIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZXJyb3JTdGF0ZUVsID0gZmluZEVsZW1lbnRCeU5vZGVUeXBlKFxuICAgIE5PREVfVFlQRV9DT01NRVJDRV9DSEVDS09VVF9FUlJPUl9TVEFURSxcbiAgICBjaGVja291dEZvcm1Db250YWluZXJcbiAgKTtcblxuICBpZiAoXG4gICAgIShcbiAgICAgIGlucHV0RWwgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50ICYmIGVycm9yU3RhdGVFbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50XG4gICAgKVxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBkaXNjb3VudENvZGUgPSBpbnB1dEVsLnZhbHVlLnRyaW0oKS50b1VwcGVyQ2FzZSgpO1xuICBhcHBseURpc2NvdW50KGFwb2xsb0NsaWVudCwge2Rpc2NvdW50Q29kZX0pXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgaW5wdXRFbC52YWx1ZSA9ICcnO1xuICAgICAgZXJyb3JTdGF0ZUVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0cmlnZ2VyUmVuZGVyKG51bGwpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnJvcikgPT4gc2hvd0Vycm9yTWVzc2FnZUZvckVycm9yKGVycm9yLCBjaGVja291dEZvcm1Db250YWluZXIpKTtcbn07XG5cbi8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzIzMTQgLSBHZW5lcmljIHR5cGUgJ0Fwb2xsb0NsaWVudDxUQ2FjaGVTaGFwZT4nIHJlcXVpcmVzIDEgdHlwZSBhcmd1bWVudChzKS5cbmNvbnN0IGhhbmRsZVVwZGF0ZUN1c3RvbWVySW5mbyA9IChldmVudDogRXZlbnQsIGFwb2xsb0NsaWVudDogQXBvbGxvQ2xpZW50KSA9PiB7XG4gIGNvbnN0IHtjdXJyZW50VGFyZ2V0fSA9IGV2ZW50O1xuXG4gIGlmICghKGN1cnJlbnRUYXJnZXQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHZhbHVlID0gY3VycmVudFRhcmdldC52YWx1ZS50cmltKCk7XG4gIGNvbnN0IGVtYWlsID0gdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PT0gJycgPyBudWxsIDogdmFsdWU7XG5cbiAgY3JlYXRlT3JkZXJJZGVudGl0eU11dGF0aW9uKGFwb2xsb0NsaWVudCwgZW1haWwpXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgdHJpZ2dlclJlbmRlcihudWxsKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICB0cmlnZ2VyUmVuZGVyKGVycik7XG4gICAgfSk7XG59O1xuXG5jb25zdCBoYW5kbGVVcGRhdGVBZGRyZXNzID0gZGVib3VuY2UoKGV2ZW50LCBhcG9sbG9DbGllbnQpID0+IHtcbiAgY29uc3Qge2N1cnJlbnRUYXJnZXR9ID0gZXZlbnQ7XG5cbiAgaWYgKCEoY3VycmVudFRhcmdldCBpbnN0YW5jZW9mIEhUTUxGb3JtRWxlbWVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB0eXBlID1cbiAgICBjdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZShEQVRBX0FUVFJfTk9ERV9UWVBFKSA9PT1cbiAgICBOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfU0hJUFBJTkdfQUREUkVTU19XUkFQUEVSXG4gICAgICA/ICdzaGlwcGluZydcbiAgICAgIDogJ2JpbGxpbmcnO1xuICBjb25zdCBhZGRyZXNzSW5mbyA9IHtcbiAgICB0eXBlLFxuICAgIC4uLmZvcm1Ub09iamVjdChjdXJyZW50VGFyZ2V0LCB0cnVlKSxcbiAgfSBhcyBjb25zdDtcblxuICBjcmVhdGVPcmRlckFkZHJlc3NNdXRhdGlvbihhcG9sbG9DbGllbnQsIGFkZHJlc3NJbmZvKVxuICAgIC50aGVuKCgpID0+IHtcbiAgICAgIHRyaWdnZXJSZW5kZXIobnVsbCk7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgdHJpZ2dlclJlbmRlcihlcnIpO1xuICAgIH0pO1xufSwgNTAwKTtcblxuLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTNzAzMSAtIEJpbmRpbmcgZWxlbWVudCAnY3VycmVudFRhcmdldCcgaW1wbGljaXRseSBoYXMgYW4gJ2FueScgdHlwZS5cbmNvbnN0IGhhbmRsZVRvZ2dsZUJpbGxpbmdBZGRyZXNzID0gKHtjdXJyZW50VGFyZ2V0fSkgPT4ge1xuICBjb25zdCBjaGVja291dEZvcm1Db250YWluZXIgPSBmaW5kQ2xvc2VzdEVsZW1lbnRCeU5vZGVUeXBlKFxuICAgIE5PREVfVFlQRV9DT01NRVJDRV9DSEVDS09VVF9GT1JNX0NPTlRBSU5FUixcbiAgICBjdXJyZW50VGFyZ2V0XG4gICk7XG4gIGlmICghY2hlY2tvdXRGb3JtQ29udGFpbmVyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgYmlsbGluZ0FkZHJlc3NXcmFwcGVyID0gZmluZEVsZW1lbnRCeU5vZGVUeXBlKFxuICAgIE5PREVfVFlQRV9DT01NRVJDRV9DSEVDS09VVF9CSUxMSU5HX0FERFJFU1NfV1JBUFBFUixcbiAgICBjaGVja291dEZvcm1Db250YWluZXJcbiAgKTtcbiAgaWYgKCFiaWxsaW5nQWRkcmVzc1dyYXBwZXIgfHwgIShjdXJyZW50VGFyZ2V0IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoY3VycmVudFRhcmdldC5jaGVja2VkKSB7XG4gICAgYmlsbGluZ0FkZHJlc3NXcmFwcGVyLnN0eWxlLnNldFByb3BlcnR5KCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgfSBlbHNlIHtcbiAgICBiaWxsaW5nQWRkcmVzc1dyYXBwZXIuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2Rpc3BsYXknKTtcbiAgfVxufTtcblxuY29uc3QgaGFuZGxlQ2hvb3NlU2hpcHBpbmdNZXRob2QgPSAoXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzcwMzEgLSBCaW5kaW5nIGVsZW1lbnQgJ2N1cnJlbnRUYXJnZXQnIGltcGxpY2l0bHkgaGFzIGFuICdhbnknIHR5cGUuXG4gIHtjdXJyZW50VGFyZ2V0fSxcbiAgYXBvbGxvQ2xpZW50OiBBcG9sbG9DbGllbnQ8Tm9ybWFsaXplZENhY2hlT2JqZWN0PlxuKSA9PiB7XG4gIGlmICghKGN1cnJlbnRUYXJnZXQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNyZWF0ZU9yZGVyU2hpcHBpbmdNZXRob2RNdXRhdGlvbihhcG9sbG9DbGllbnQsIGN1cnJlbnRUYXJnZXQuaWQpXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgdHJpZ2dlclJlbmRlcihudWxsKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICB0cmlnZ2VyUmVuZGVyKGVycik7XG4gICAgfSk7XG59O1xuXG5jb25zdCBoYW5kbGVTdWJtaXRGb3JtSW5zaWRlQ2hlY2tvdXRDb250YWluZXIgPSAoXG4gIGV2ZW50OiBFdmVudCB8IEtleWJvYXJkRXZlbnQsXG4gIGFwb2xsb0NsaWVudDogQXBvbGxvQ2xpZW50PE5vcm1hbGl6ZWRDYWNoZU9iamVjdD5cbikgPT4ge1xuICBpZiAoZXZlbnQudHlwZSA9PT0gJ3N1Ym1pdCcpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgaWYgKFxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzIzMzkgLSBQcm9wZXJ0eSAna2V5Q29kZScgZG9lcyBub3QgZXhpc3Qgb24gdHlwZSAnRXZlbnQgfCBLZXlib2FyZEV2ZW50Jy5cbiAgICAoZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC5rZXlDb2RlICE9PSAxMykgfHxcbiAgICAhKGV2ZW50LmN1cnJlbnRUYXJnZXQgaW5zdGFuY2VvZiBFbGVtZW50KVxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoXG4gICAgZXZlbnQudGFyZ2V0ID09PVxuICAgIGZpbmRFbGVtZW50QnlOb2RlVHlwZShOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfRElTQ09VTlRfSU5QVVQpXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGNoZWNrb3V0Rm9ybUNvbnRhaW5lciA9IGZpbmRDbG9zZXN0RWxlbWVudEJ5Tm9kZVR5cGUoXG4gICAgTk9ERV9UWVBFX0NPTU1FUkNFX0NIRUNLT1VUX0ZPUk1fQ09OVEFJTkVSLFxuICAgIGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgKTtcbiAgaWYgKCEoY2hlY2tvdXRGb3JtQ29udGFpbmVyIGluc3RhbmNlb2YgRWxlbWVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBjdXN0b21lckluZm8gPSBmaW5kRWxlbWVudEJ5Tm9kZVR5cGUoXG4gICAgTk9ERV9UWVBFX0NPTU1FUkNFX0NIRUNLT1VUX0NVU1RPTUVSX0lORk9fV1JBUFBFUixcbiAgICBjaGVja291dEZvcm1Db250YWluZXJcbiAgKTtcbiAgY29uc3Qgc2hpcHBpbmdBZGRyZXNzID0gZmluZEVsZW1lbnRCeU5vZGVUeXBlKFxuICAgIE5PREVfVFlQRV9DT01NRVJDRV9DSEVDS09VVF9TSElQUElOR19BRERSRVNTX1dSQVBQRVIsXG4gICAgY2hlY2tvdXRGb3JtQ29udGFpbmVyXG4gICk7XG4gIGNvbnN0IHNoaXBwaW5nSW5mbyA9IGZpbmRFbGVtZW50QnlOb2RlVHlwZShcbiAgICBOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfU0hJUFBJTkdfTUVUSE9EU19XUkFQUEVSLFxuICAgIGNoZWNrb3V0Rm9ybUNvbnRhaW5lclxuICApO1xuICBjb25zdCBiaWxsaW5nQWRkcmVzcyA9IGZpbmRFbGVtZW50QnlOb2RlVHlwZShcbiAgICBOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfQklMTElOR19BRERSRVNTX1dSQVBQRVIsXG4gICAgY2hlY2tvdXRGb3JtQ29udGFpbmVyXG4gICk7XG4gIGNvbnN0IGJpbGxpbmdBZGRyZXNzVG9nZ2xlID0gZmluZEVsZW1lbnRCeU5vZGVUeXBlKFxuICAgIE5PREVfVFlQRV9DT01NRVJDRV9DSEVDS09VVF9CSUxMSU5HX0FERFJFU1NfVE9HR0xFX0NIRUNLQk9YLFxuICAgIGNoZWNrb3V0Rm9ybUNvbnRhaW5lclxuICApO1xuICBjb25zdCBhZGRpdGlvbmFsSW5mbyA9IGZpbmRFbGVtZW50QnlOb2RlVHlwZShcbiAgICBOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfQURESVRJT05BTF9JTkZPLFxuICAgIGNoZWNrb3V0Rm9ybUNvbnRhaW5lclxuICApO1xuXG4gIGlmIChcbiAgICAhKGN1c3RvbWVySW5mbyBpbnN0YW5jZW9mIEhUTUxGb3JtRWxlbWVudCkgfHxcbiAgICAhKHNoaXBwaW5nQWRkcmVzcyBpbnN0YW5jZW9mIEhUTUxGb3JtRWxlbWVudCkgfHxcbiAgICAhKHNoaXBwaW5nSW5mbyBpbnN0YW5jZW9mIEhUTUxGb3JtRWxlbWVudCkgfHxcbiAgICAhKGJpbGxpbmdBZGRyZXNzIGluc3RhbmNlb2YgSFRNTEZvcm1FbGVtZW50KSB8fFxuICAgICEoYmlsbGluZ0FkZHJlc3NUb2dnbGUgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KVxuICApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBoYXNBZGRpdGlvbmFsSW5mbyA9XG4gICAgYWRkaXRpb25hbEluZm8gJiYgYWRkaXRpb25hbEluZm8gaW5zdGFuY2VvZiBIVE1MRm9ybUVsZW1lbnQ7XG5cbiAgZmV0Y2hPcmRlclN0YXR1c0ZsYWdzKGFwb2xsb0NsaWVudCkudGhlbigoe3JlcXVpcmVzU2hpcHBpbmd9KSA9PiB7XG4gICAgY2hlY2tGb3JtVmFsaWRpdHkoe1xuICAgICAgY3VzdG9tZXJJbmZvLFxuICAgICAgc2hpcHBpbmdBZGRyZXNzLFxuICAgICAgc2hpcHBpbmdJbmZvLFxuICAgICAgYmlsbGluZ0FkZHJlc3MsXG4gICAgICBiaWxsaW5nQWRkcmVzc1RvZ2dsZSxcbiAgICAgIGFkZGl0aW9uYWxJbmZvOiBoYXNBZGRpdGlvbmFsSW5mbyA/IGFkZGl0aW9uYWxJbmZvIDogbnVsbCxcbiAgICAgIHJlcXVpcmVzU2hpcHBpbmcsXG4gICAgfSk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyID0gKGhhbmRsZXJQcm94eTogRXZlbnRIYW5kbGVyUHJveHlXaXRoQXBvbGxvQ2xpZW50KSA9PiB7XG4gIGhhbmRsZXJQcm94eS5vbihSRU5ERVJfVFJFRV9FVkVOVCwgQm9vbGVhbiwgaGFuZGxlUmVuZGVyQ2hlY2tvdXQpO1xuICBoYW5kbGVyUHJveHkub24oJ2NsaWNrJywgaXNQbGFjZU9yZGVyQnV0dG9uRXZlbnQsIGhhbmRsZVBsYWNlT3JkZXIpO1xuICBoYW5kbGVyUHJveHkub24oXG4gICAgJ2tleWRvd24nLFxuICAgIGlzUGxhY2VPcmRlckJ1dHRvbkV2ZW50LFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tc2hhZG93XG4gICAgKGV2ZW50LCBhcG9sbG9DbGllbnQsIFN0cmlwZVN0b3JlKSA9PiB7XG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMyMzM5IC0gUHJvcGVydHkgJ3doaWNoJyBkb2VzIG5vdCBleGlzdCBvbiB0eXBlICdFdmVudCcuXG4gICAgICBpZiAoZXZlbnQud2hpY2ggPT09IDMyKSB7XG4gICAgICAgIC8vIHByZXZlbnQgc2Nyb2xsaW5nIG9uIHNwYWNlYmFyIGtleSBwcmVzc1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTMjMzOSAtIFByb3BlcnR5ICd3aGljaCcgZG9lcyBub3QgZXhpc3Qgb24gdHlwZSAnRXZlbnQnLlxuICAgICAgaWYgKGV2ZW50LndoaWNoID09PSAxMykge1xuICAgICAgICAvLyBlbnRlciBrZXkgcHJlc3NcbiAgICAgICAgcmV0dXJuIGhhbmRsZVBsYWNlT3JkZXIoZXZlbnQsIGFwb2xsb0NsaWVudCwgU3RyaXBlU3RvcmUpO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbiAgaGFuZGxlclByb3h5Lm9uKFxuICAgICdrZXl1cCcsXG4gICAgaXNQbGFjZU9yZGVyQnV0dG9uRXZlbnQsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1zaGFkb3dcbiAgICAoZXZlbnQsIGFwb2xsb0NsaWVudCwgU3RyaXBlU3RvcmUpID0+IHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzIzMzkgLSBQcm9wZXJ0eSAnd2hpY2gnIGRvZXMgbm90IGV4aXN0IG9uIHR5cGUgJ0V2ZW50Jy5cbiAgICAgIGlmIChldmVudC53aGljaCA9PT0gMzIpIHtcbiAgICAgICAgLy8gc3BhY2ViYXIga2V5IHByZXNzXG4gICAgICAgIHJldHVybiBoYW5kbGVQbGFjZU9yZGVyKGV2ZW50LCBhcG9sbG9DbGllbnQsIFN0cmlwZVN0b3JlKTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIGhhbmRsZXJQcm94eS5vbignc3VibWl0JywgaXNBcHBseURpc2NvdW50Rm9ybUV2ZW50LCBoYW5kbGVBcHBseURpc2NvdW50KTtcblxuICAvLyB3ZSB1c2UgYmx1ciBldmVudHMgb24gdGhlIHRleHQgaW5wdXRzLCBhbmQgY2hhbmdlIGV2ZW50IG9uIHRoZSBjb3VudHJ5IHNlbGVjdFxuICAvLyBzbyB0aGF0IHdlIHVwZGF0ZSBmYXN0ZXIgKGJsdXIgb24gYSBzZWxlY3QgZWxlbWVudCByZXF1aXJlcyBnb2luZyBpbnRvIGFub3RoZXIgZmllbGQpXG4gIGhhbmRsZXJQcm94eS5vbihcbiAgICAnY2hhbmdlJyxcbiAgICBpc0lucHV0SW5zaWRlQ3VzdG9tZXJJbmZvRXZlbnQsXG4gICAgaGFuZGxlVXBkYXRlQ3VzdG9tZXJJbmZvXG4gICk7XG4gIGhhbmRsZXJQcm94eS5vbihcbiAgICAnY2hhbmdlJyxcbiAgICBpc0lucHV0SW5zaWRlQWRkcmVzc1dyYXBwZXJFdmVudCxcbiAgICBoYW5kbGVVcGRhdGVBZGRyZXNzXG4gICk7XG4gIGhhbmRsZXJQcm94eS5vbihcbiAgICAnY2hhbmdlJyxcbiAgICBpc0JpbGxpbmdBZGRyZXNzVG9nZ2xlRXZlbnQsXG4gICAgaGFuZGxlVG9nZ2xlQmlsbGluZ0FkZHJlc3NcbiAgKTtcbiAgaGFuZGxlclByb3h5Lm9uKFxuICAgICdjaGFuZ2UnLFxuICAgIGlzSW5wdXRJbnNpZGVTaGlwcGluZ01ldGhvZEV2ZW50LFxuICAgIGhhbmRsZUNob29zZVNoaXBwaW5nTWV0aG9kXG4gICk7XG4gIGhhbmRsZXJQcm94eS5vbihcbiAgICAnc3VibWl0JyxcbiAgICBpc0Zvcm1JbnNpZGVDaGVja291dENvbnRhaW5lckV2ZW50LFxuICAgIGhhbmRsZVN1Ym1pdEZvcm1JbnNpZGVDaGVja291dENvbnRhaW5lclxuICApO1xuICAvLyB3ZSBoYXZlIHRvIGFkZCBhIGtleXVwIGV2ZW50IGZvciB0aGUgZW50ZXIga2V5IG9uIGZvcm1zIHRvIHJ1biB0aGUgdmFsaWRpdHkgY2hlY2tcbiAgLy8gYXMgZm9ybXMgd2l0aCBtdWx0aXBsZSBpbnB1dHMgYnV0IG5vIHN1Ym1pdCBpbnB1dCBkb24ndCBmaXJlIHRoZSBzdWJtaXQgZXZlbnRcbiAgLy8gaG93ZXZlciB3ZSBkbyBzdGlsbCBuZWVkIHRoYXQgYWJvdmUgc3VibWl0IGNoZWNrLCBhcyB0aGUgZW1haWwgZm9ybSBvbmx5IGhhcyBvbmVcbiAgLy8gaW5wdXQsIGFuZCBhIGJyb3dzZXIgd2lsbCBmaXJlIHRoZSBzdWJtaXQgZXZlbnQgaWYgdGhlIGZvcm0gaGFzIGp1c3Qgb25lIGlucHV0XG4gIC8vIGV2ZW4gaWYgaXQgaGFzIG5vIHN1Ym1pdCBpbnB1dFxuICBoYW5kbGVyUHJveHkub24oXG4gICAgJ2tleXVwJyxcbiAgICBpc0lucHV0SW5zaWRlQ2hlY2tvdXRGb3JtRXZlbnQsXG4gICAgaGFuZGxlU3VibWl0Rm9ybUluc2lkZUNoZWNrb3V0Q29udGFpbmVyXG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB7cmVnaXN0ZXJ9O1xuIl0sIm5hbWVzIjpbInJlZ2lzdGVyIiwiaXNJbnB1dEluc2lkZUN1c3RvbWVySW5mb0V2ZW50IiwidGFyZ2V0IiwiY2hlY2tvdXRGb3JtQ29udGFpbmVyIiwiZmluZEVsZW1lbnRCeU5vZGVUeXBlIiwiTk9ERV9UWVBFX0NPTU1FUkNFX0NIRUNLT1VUX0ZPUk1fQ09OVEFJTkVSIiwiY3VzdG9tZXJJbmZvV3JhcHBlciIsImZpbmRDbG9zZXN0RWxlbWVudEJ5Tm9kZVR5cGUiLCJOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfQ1VTVE9NRVJfSU5GT19XUkFQUEVSIiwiRWxlbWVudCIsInRhZ05hbWUiLCJpc0lucHV0SW5zaWRlQWRkcmVzc1dyYXBwZXJFdmVudCIsInNoaXBwaW5nQWRkcmVzc1dyYXBwZXIiLCJOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfU0hJUFBJTkdfQUREUkVTU19XUkFQUEVSIiwiYmlsbGluZ0FkZHJlc3NXcmFwcGVyIiwiTk9ERV9UWVBFX0NPTU1FUkNFX0NIRUNLT1VUX0JJTExJTkdfQUREUkVTU19XUkFQUEVSIiwiaXNJbnB1dEluc2lkZVNoaXBwaW5nTWV0aG9kRXZlbnQiLCJOT0RFX1RZUEVfQ09NTUVSQ0VfUEFZUEFMX0NIRUNLT1VUX0ZPUk1fQ09OVEFJTkVSIiwic2hpcHBpbmdNZXRob2RXcmFwcGVyIiwiTk9ERV9UWVBFX0NPTU1FUkNFX0NIRUNLT1VUX1NISVBQSU5HX01FVEhPRFNfV1JBUFBFUiIsImlzQmlsbGluZ0FkZHJlc3NUb2dnbGVFdmVudCIsImdldEF0dHJpYnV0ZSIsIkRBVEFfQVRUUl9OT0RFX1RZUEUiLCJOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfQklMTElOR19BRERSRVNTX1RPR0dMRV9DSEVDS0JPWCIsImlzUGxhY2VPcmRlckJ1dHRvbkV2ZW50IiwicGxhY2VPcmRlckJ1dHRvbiIsIk5PREVfVFlQRV9DT01NRVJDRV9DSEVDS09VVF9QTEFDRV9PUkRFUl9CVVRUT04iLCJpc0FwcGx5RGlzY291bnRGb3JtRXZlbnQiLCJOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfRElTQ09VTlRfRk9STSIsImlzRm9ybUluc2lkZUNoZWNrb3V0Q29udGFpbmVyRXZlbnQiLCJjaGVja291dEZvcm0iLCJIVE1MRm9ybUVsZW1lbnQiLCJpc0lucHV0SW5zaWRlQ2hlY2tvdXRGb3JtRXZlbnQiLCJIVE1MSW5wdXRFbGVtZW50IiwiaGFuZGxlUmVuZGVyQ2hlY2tvdXQiLCJldmVudCIsImFwb2xsb0NsaWVudCIsInN0cmlwZVN0b3JlIiwid2luZG93IiwiV2ViZmxvdyIsImVudiIsIkN1c3RvbUV2ZW50IiwidHlwZSIsIlJFTkRFUl9UUkVFX0VWRU5UIiwiZXJyb3JzIiwiZGV0YWlsIiwiZXJyb3IiLCJwdXNoIiwiZm9jdXNlZEVsZSIsImRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsInByZXZGb2N1c2VkSW5wdXQiLCJpZCIsImNoZWNrb3V0Rm9ybUNvbnRhaW5lcnMiLCJmaW5kQWxsRWxlbWVudHNCeU5vZGVUeXBlIiwicmVuZGVyQ2hlY2tvdXRGb3JtQ29udGFpbmVycyIsImNoZWNrRm9ybVZhbGlkaXR5IiwiY3VzdG9tZXJJbmZvIiwic2hpcHBpbmdBZGRyZXNzIiwic2hpcHBpbmdJbmZvIiwiYmlsbGluZ0FkZHJlc3MiLCJiaWxsaW5nQWRkcmVzc1RvZ2dsZSIsImFkZGl0aW9uYWxJbmZvIiwicmVxdWlyZXNTaGlwcGluZyIsInByb3RvdHlwZSIsInJlcG9ydFZhbGlkaXR5IiwiY2hlY2tlZCIsInBsYWNpbmdPcmRlciIsInN0YXJ0T3JkZXJGbG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImJlZm9yZVVubG9hZEhhbmRsZXIiLCJidXR0b25UZXh0IiwiaW5uZXJIVE1MIiwibG9hZGluZ1RleHQiLCJEQVRBX0FUVFJfTE9BRElOR19URVhUIiwiQ0hFQ0tPVVRfUExBQ0VfT1JERVJfTE9BRElOR19URVhUX0RFRkFVTFQiLCJmaW5pc2hPcmRlckZsb3ciLCJpc1JlZGlyZWN0aW5nIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIkNIRUNLT1VUX1BMQUNFX09SREVSX0JVVFRPTl9URVhUX0RFRkFVTFQiLCJoYW5kbGVQbGFjZU9yZGVyIiwiY3VycmVudFRhcmdldCIsImVycm9yU3RhdGUiLCJOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfRVJST1JfU1RBVEUiLCJOT0RFX1RZUEVfQ09NTUVSQ0VfQ0hFQ0tPVVRfQURESVRJT05BTF9JTkZPIiwiSFRNTEVsZW1lbnQiLCJlcnJvck1lc3NhZ2UiLCJxdWVyeVNlbGVjdG9yIiwiQ0FSVF9DSEVDS09VVF9FUlJPUl9NRVNTQUdFX1NFTEVDVE9SIiwiaGFzQXR0cmlidXRlIiwiTkVFRFNfUkVGUkVTSCIsImhhc0FkZGl0aW9uYWxJbmZvIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsImZldGNoT3JkZXJTdGF0dXNGbGFncyIsInRoZW4iLCJpc0ZyZWVPcmRlciIsImlzRm9ybVZhbGlkIiwiY3VzdG9tZXJJbmZvRm9ybURhdGEiLCJmb3JtVG9PYmplY3QiLCJlbWFpbCIsIlN0cmluZyIsInRyaW0iLCJzaGlwcGluZ0FkZHJlc3NJbmZvIiwiYmlsbGluZ0FkZHJlc3NJbmZvIiwic3RyaXBlQmlsbGluZ0FkZHJlc3NJbmZvIiwiYmlsbGluZ19kZXRhaWxzIiwibmFtZSIsImFkZHJlc3MiLCJsaW5lMSIsImFkZHJlc3NfbGluZTEiLCJsaW5lMiIsImFkZHJlc3NfbGluZTIiLCJjaXR5IiwiYWRkcmVzc19jaXR5Iiwic3RhdGUiLCJhZGRyZXNzX3N0YXRlIiwiY291bnRyeSIsImFkZHJlc3NfY291bnRyeSIsInBvc3RhbF9jb2RlIiwiYWRkcmVzc196aXAiLCJzaGlwcGluZ01ldGhvZElkIiwiZWxlbWVudHMiLCJzaGlwcGluZ01ldGhvZENob2ljZSIsInZhbHVlIiwiY3VzdG9tRGF0YSIsImN1c3RvbURhdGFGb3JtVG9BcnJheSIsInN5bmNDaGVja291dEZvcm0iLCJQcm9taXNlIiwiYWxsIiwiY3JlYXRlT3JkZXJJZGVudGl0eU11dGF0aW9uIiwiY3JlYXRlT3JkZXJBZGRyZXNzTXV0YXRpb24iLCJyZXNvbHZlIiwiY3JlYXRlT3JkZXJTaGlwcGluZ01ldGhvZE11dGF0aW9uIiwiY3JlYXRlQ3VzdG9tRGF0YU11dGF0aW9uIiwiaXNJbml0aWFsaXplZCIsInJlamVjdCIsIkVycm9yIiwic3RyaXBlIiwiZ2V0U3RyaXBlSW5zdGFuY2UiLCJjaGVja291dEZvcm1JbnN0YW5jZSIsInBhcnNlSW50IiwiU1RSSVBFX0VMRU1FTlRfSU5TVEFOQ0UiLCJjYXJkIiwiZ2V0RWxlbWVudCIsImNyZWF0ZVBheW1lbnRNZXRob2QiLCJkYXRhIiwiY3JlYXRlU3RyaXBlUGF5bWVudE1ldGhvZE11dGF0aW9uIiwicGF5bWVudE1ldGhvZCIsImNyZWF0ZUF0dGVtcHRTdWJtaXRPcmRlclJlcXVlc3QiLCJjaGVja291dFR5cGUiLCJkZWJ1ZyIsImxvZyIsIm9yZGVyIiwiZ2V0T3JkZXJEYXRhRnJvbUdyYXBoUUxSZXNwb25zZSIsIm9yZGVyUmVxdWlyZXNBZGRpdGlvbmFsQWN0aW9uIiwic3RhdHVzIiwicmV0cmlldmVQYXltZW50SW50ZW50IiwiY2xpZW50U2VjcmV0IiwicmV0cmlldmVSZXN1bHQiLCJpbnRlbnQiLCJwYXltZW50SW50ZW50IiwiYWN0aW9uUHJvbWlzZSIsImNvbmZpcm1hdGlvbl9tZXRob2QiLCJjb25maXJtQ2FyZFBheW1lbnQiLCJoYW5kbGVDYXJkQWN0aW9uIiwicmVzdWx0IiwicGF5bWVudEludGVudElkIiwicmVzcCIsImZpbmlzaGVkT3JkZXIiLCJvayIsInJlZGlyZWN0VG9PcmRlckNvbmZpcm1hdGlvbiIsImNhdGNoIiwiZXJyIiwicmVtb3ZlUHJvcGVydHkiLCJ1cGRhdGVFcnJvck1lc3NhZ2UiLCJoYW5kbGVBcHBseURpc2NvdW50IiwicHJldmVudERlZmF1bHQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJpbnB1dEVsIiwiTk9ERV9UWVBFX0NPTU1FUkNFX0NIRUNLT1VUX0RJU0NPVU5UX0lOUFVUIiwiZXJyb3JTdGF0ZUVsIiwiZGlzY291bnRDb2RlIiwidG9VcHBlckNhc2UiLCJhcHBseURpc2NvdW50IiwiZGlzcGxheSIsInRyaWdnZXJSZW5kZXIiLCJzaG93RXJyb3JNZXNzYWdlRm9yRXJyb3IiLCJoYW5kbGVVcGRhdGVDdXN0b21lckluZm8iLCJoYW5kbGVVcGRhdGVBZGRyZXNzIiwiZGVib3VuY2UiLCJhZGRyZXNzSW5mbyIsImhhbmRsZVRvZ2dsZUJpbGxpbmdBZGRyZXNzIiwiaGFuZGxlQ2hvb3NlU2hpcHBpbmdNZXRob2QiLCJoYW5kbGVTdWJtaXRGb3JtSW5zaWRlQ2hlY2tvdXRDb250YWluZXIiLCJrZXlDb2RlIiwiaGFuZGxlclByb3h5Iiwib24iLCJCb29sZWFuIiwiU3RyaXBlU3RvcmUiLCJ3aGljaCJdLCJtYXBwaW5ncyI6IkFBQUEscURBQXFEOzs7Ozs7Ozs7OztJQWs0QnJELE9BQTBCO2VBQTFCOztJQXpFYUEsUUFBUTtlQUFSQTs7O2lFQXh6QlE7MkJBc0JkOytCQVVBOytCQWdCQTs4REFDVzs7Ozs7O0FBSWxCLHFGQUFxRjtBQUNyRixNQUFNQyxpQ0FBaUMsQ0FBQyxFQUFDQyxNQUFNLEVBQUM7SUFDOUMsK0RBQStEO0lBQy9ELE1BQU1DLHdCQUF3QkMsSUFBQUEsb0NBQXFCLEVBQ2pEQyxxREFBMEM7SUFFNUMsSUFBSSxDQUFDRix1QkFBdUI7UUFDMUIsT0FBTztJQUNUO0lBRUEsTUFBTUcsc0JBQXNCQyxJQUFBQSwyQ0FBNEIsRUFDdERDLDREQUFpRCxFQUNqRE47SUFFRixJQUNFSSx1QkFDQUosa0JBQWtCTyxXQUNsQlAsT0FBT1EsT0FBTyxLQUFLLFNBQ25CO1FBQ0EsT0FBT1I7SUFDVCxPQUFPO1FBQ0wsT0FBTztJQUNUO0FBQ0Y7QUFFQSxxRkFBcUY7QUFDckYsTUFBTVMsbUNBQW1DLENBQUMsRUFBQ1QsTUFBTSxFQUFDO0lBQ2hELCtEQUErRDtJQUMvRCxNQUFNQyx3QkFBd0JDLElBQUFBLG9DQUFxQixFQUNqREMscURBQTBDO0lBRTVDLElBQUksQ0FBQ0YseUJBQXlCLENBQUVELENBQUFBLGtCQUFrQk8sT0FBTSxHQUFJO1FBQzFELE9BQU87SUFDVDtJQUVBLE1BQU1HLHlCQUF5QkwsSUFBQUEsMkNBQTRCLEVBQ3pETSwrREFBb0QsRUFDcERYO0lBRUYsTUFBTVksd0JBQXdCUCxJQUFBQSwyQ0FBNEIsRUFDeERRLDhEQUFtRCxFQUNuRGI7SUFHRixJQUFJVSx3QkFBd0I7UUFDMUIsT0FBT0E7SUFDVCxPQUFPLElBQUlFLHVCQUF1QjtRQUNoQyxPQUFPQTtJQUNULE9BQU87UUFDTCxPQUFPO0lBQ1Q7QUFDRjtBQUVBLHFGQUFxRjtBQUNyRixNQUFNRSxtQ0FBbUMsQ0FBQyxFQUFDZCxNQUFNLEVBQUM7SUFDaEQsK0RBQStEO0lBQy9ELE1BQU1DLHdCQUNKQyxJQUFBQSxvQ0FBcUIsRUFBQ0MscURBQTBDLEtBQ2hFRCxJQUFBQSxvQ0FBcUIsRUFBQ2EsNERBQWlEO0lBQ3pFLElBQUksQ0FBQ2QsdUJBQXVCO1FBQzFCLE9BQU87SUFDVDtJQUVBLE1BQU1lLHdCQUF3QlgsSUFBQUEsMkNBQTRCLEVBQ3hEWSwrREFBb0QsRUFDcERqQjtJQUVGLElBQ0VnQix5QkFDQWhCLGtCQUFrQk8sV0FDbEJQLE9BQU9RLE9BQU8sS0FBSyxTQUNuQjtRQUNBLE9BQU9SO0lBQ1QsT0FBTztRQUNMLE9BQU87SUFDVDtBQUNGO0FBRUEscUZBQXFGO0FBQ3JGLE1BQU1rQiw4QkFBOEIsQ0FBQyxFQUFDbEIsTUFBTSxFQUFDO0lBQzNDLElBQ0VBLGtCQUFrQk8sV0FDbEJQLE9BQU9tQixZQUFZLENBQUNDLDhCQUFtQixNQUNyQ0Msc0VBQTJELEVBQzdEO1FBQ0EsT0FBT3JCO0lBQ1QsT0FBTztRQUNMLE9BQU87SUFDVDtBQUNGO0FBRUEscUZBQXFGO0FBQ3JGLE1BQU1zQiwwQkFBMEIsQ0FBQyxFQUFDdEIsTUFBTSxFQUFDO0lBQ3ZDLE1BQU11QixtQkFBbUJsQixJQUFBQSwyQ0FBNEIsRUFDbkRtQix5REFBOEMsRUFDOUN4QjtJQUVGLElBQUl1QixvQkFBb0J2QixrQkFBa0JPLFNBQVM7UUFDakQsT0FBT1A7SUFDVCxPQUFPO1FBQ0wsT0FBTztJQUNUO0FBQ0Y7QUFFQSxxRkFBcUY7QUFDckYsTUFBTXlCLDJCQUEyQixDQUFDLEVBQUN6QixNQUFNLEVBQUM7SUFDeEMsSUFDRUEsa0JBQWtCTyxXQUNsQlAsT0FBT21CLFlBQVksQ0FBQ0MsOEJBQW1CLE1BQ3JDTSxvREFBeUMsRUFDM0M7UUFDQSxPQUFPMUI7SUFDVCxPQUFPO1FBQ0wsT0FBTztJQUNUO0FBQ0Y7QUFFQSxxRkFBcUY7QUFDckYsTUFBTTJCLHFDQUFxQyxDQUFDLEVBQUMzQixNQUFNLEVBQUM7SUFDbEQsTUFBTTRCLGVBQWV2QixJQUFBQSwyQ0FBNEIsRUFDL0NGLHFEQUEwQyxFQUMxQ0g7SUFFRixJQUFJQSxrQkFBa0I2QixtQkFBbUJELGNBQWM7UUFDckQsT0FBTzVCO0lBQ1QsT0FBTztRQUNMLE9BQU87SUFDVDtBQUNGO0FBRUEscUZBQXFGO0FBQ3JGLE1BQU04QixpQ0FBaUMsQ0FBQyxFQUFDOUIsTUFBTSxFQUFDO0lBQzlDLE1BQU00QixlQUFldkIsSUFBQUEsMkNBQTRCLEVBQy9DRixxREFBMEMsRUFDMUNIO0lBRUYsSUFBSUEsa0JBQWtCK0Isb0JBQW9CSCxjQUFjO1FBQ3RELE9BQU81QjtJQUNULE9BQU87UUFDTCxPQUFPO0lBQ1Q7QUFDRjtBQUVBLE1BQU1nQyx1QkFBdUIsQ0FDM0JDLE9BQ0FDLGNBQ0FDO0lBRUEsSUFBSUMsT0FBT0MsT0FBTyxDQUFDQyxHQUFHLENBQUMsYUFBYUYsT0FBT0MsT0FBTyxDQUFDQyxHQUFHLENBQUMsWUFBWTtRQUNqRTtJQUNGO0lBQ0EsSUFBSSxDQUFFTCxDQUFBQSxpQkFBaUJNLGVBQWVOLE1BQU1PLElBQUksS0FBS0MsNEJBQWlCLEFBQUQsR0FBSTtRQUN2RTtJQUNGO0lBQ0EsTUFBTUMsU0FBcUIsRUFBRTtJQUM3QixNQUFNLEVBQUNDLE1BQU0sRUFBQyxHQUFHVjtJQUNqQixJQUFJVSxVQUFVLFFBQVFBLE9BQU9DLEtBQUssRUFBRTtRQUNsQ0YsT0FBT0csSUFBSSxDQUFDRixPQUFPQyxLQUFLO0lBQzFCO0lBRUEsTUFBTUUsYUFBYVYsT0FBT1csUUFBUSxDQUFDQyxhQUFhO0lBQ2hELE1BQU1wQixlQUFldkIsSUFBQUEsMkNBQTRCLEVBQy9DRixxREFBMEMsRUFDMUMsc0hBQXNIO0lBQ3RIMkM7SUFHRixJQUFJRyxtQkFBbUI7SUFDdkIsdURBQXVEO0lBQ3ZELElBQUlILHNCQUFzQmYsb0JBQW9CSCxjQUFjO1FBQzFEcUIsbUJBQW1CSCxXQUFXSSxFQUFFO1FBQ2hDLElBQUksQ0FBQ0Qsa0JBQWtCO1lBQ3JCQSxtQkFBbUJILFdBQVczQixZQUFZLENBQUM7UUFDN0M7UUFFQSxpQ0FBaUM7UUFDakM4QixtQkFBbUJBLG1CQUFtQixPQUFPQTtJQUMvQztJQUVBLE1BQU1FLHlCQUF5QkMsSUFBQUEsd0NBQXlCLEVBQ3REakQscURBQTBDO0lBRzVDa0QsSUFBQUEsMkNBQTRCLEVBQzFCRix3QkFDQVQsUUFDQVIsY0FDQUMsYUFDQWM7QUFFSjtBQUVBLE1BQU1LLG9CQUFvQixDQUFDLEVBQ3pCQyxZQUFZLEVBQ1pDLGVBQWUsRUFDZkMsWUFBWSxFQUNaQyxjQUFjLEVBQ2RDLG9CQUFvQixFQUNwQkMsY0FBYyxFQUNkQyxnQkFBZ0IsRUFTakI7SUFDQyx5RUFBeUU7SUFDekUsMEVBQTBFO0lBQzFFLDhFQUE4RTtJQUM5RSxJQUFJLENBQUNoQyxnQkFBZ0JpQyxTQUFTLENBQUNDLGNBQWMsRUFBRTtRQUM3QyxPQUFPO0lBQ1Q7SUFFQSxrRkFBa0Y7SUFDbEYsOEVBQThFO0lBQzlFLDhFQUE4RTtJQUM5RSwyRUFBMkU7SUFDM0UseUVBQXlFO0lBQ3pFLDZFQUE2RTtJQUM3RSwwRUFBMEU7SUFDMUUsMkVBQTJFO0lBQzNFLElBQ0UsQ0FBQ1IsYUFBYVEsY0FBYyxNQUMzQkYsb0JBQW9CLENBQUNMLGdCQUFnQk8sY0FBYyxNQUNuREYsb0JBQW9CLENBQUNKLGFBQWFNLGNBQWMsTUFDakQsZ0ZBQWdGO0lBQ2hGLHlEQUF5RDtJQUN2RCxDQUFBLENBQUNGLG9CQUFvQixDQUFDRixxQkFBcUJLLE9BQU8sQUFBRCxLQUNqRCxDQUFDTixlQUFlSyxjQUFjLE1BQy9CSCxrQkFDQ0EsMEJBQTBCL0IsbUJBQzFCLENBQUMrQixlQUFlRyxjQUFjLElBQ2hDO1FBQ0EsT0FBTztJQUNUO0lBRUEsT0FBTztBQUNUO0FBRUEsSUFBSUUsZUFBZTtBQUNuQixNQUFNQyxpQkFBaUIsQ0FBQzNDO0lBQ3RCMEMsZUFBZTtJQUNmN0IsT0FBTytCLGdCQUFnQixDQUFDLGdCQUFnQkMsa0NBQW1CO0lBRTNELE1BQU1DLGFBQWE5QyxpQkFBaUIrQyxTQUFTO0lBQzdDLE1BQU1DLGNBQWNoRCxpQkFBaUJKLFlBQVksQ0FBQ3FELGlDQUFzQjtJQUN4RWpELGlCQUFpQitDLFNBQVMsR0FBR0MsY0FDekJBLGNBQ0FFLG9EQUF5QztJQUU3QyxNQUFNQyxrQkFBa0IsQ0FBQ0MsZ0JBQXlCLEtBQUs7UUFDckQsc0VBQXNFO1FBQ3RFLHdFQUF3RTtRQUN4RSxpRUFBaUU7UUFDakUsSUFBSSxDQUFDQSxlQUFlO1lBQ2xCVixlQUFlO1FBQ2pCO1FBQ0E3QixPQUFPd0MsbUJBQW1CLENBQUMsZ0JBQWdCUixrQ0FBbUI7UUFDOUQ3QyxpQkFBaUIrQyxTQUFTLEdBQUdELGFBQ3pCQSxhQUNBUSxtREFBd0M7SUFDOUM7SUFFQSxPQUFPSDtBQUNUO0FBRUEsTUFBTUksbUJBQW1CLENBQ3ZCN0MsT0FDQUMsY0FDQUM7SUFFQSx5RkFBeUY7SUFDekYsSUFDRUMsT0FBT0MsT0FBTyxDQUFDQyxHQUFHLENBQUMsYUFDbkJGLE9BQU9DLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGNBQ25CMkIsY0FDQTtRQUNBO0lBQ0Y7SUFFQSxNQUFNLEVBQUNjLGFBQWEsRUFBQyxHQUFHOUM7SUFFeEIsSUFBSSxDQUFFOEMsQ0FBQUEseUJBQXlCeEUsT0FBTSxHQUFJO1FBQ3ZDO0lBQ0Y7SUFFQSxNQUFNTix3QkFBd0JJLElBQUFBLDJDQUE0QixFQUN4REYscURBQTBDLEVBQzFDNEU7SUFFRixJQUFJLENBQUU5RSxDQUFBQSxpQ0FBaUNNLE9BQU0sR0FBSTtRQUMvQztJQUNGO0lBRUEsTUFBTXlFLGFBQWE5RSxJQUFBQSxvQ0FBcUIsRUFDdEMrRSxrREFBdUMsRUFDdkNoRjtJQUVGLE1BQU1zRCxlQUFlckQsSUFBQUEsb0NBQXFCLEVBQ3hDSSw0REFBaUQsRUFDakRMO0lBRUYsTUFBTXVELGtCQUFrQnRELElBQUFBLG9DQUFxQixFQUMzQ1MsK0RBQW9ELEVBQ3BEVjtJQUVGLE1BQU13RCxlQUFldkQsSUFBQUEsb0NBQXFCLEVBQ3hDZSwrREFBb0QsRUFDcERoQjtJQUVGLE1BQU15RCxpQkFBaUJ4RCxJQUFBQSxvQ0FBcUIsRUFDMUNXLDhEQUFtRCxFQUNuRFo7SUFFRixNQUFNMEQsdUJBQXVCekQsSUFBQUEsb0NBQXFCLEVBQ2hEbUIsc0VBQTJELEVBQzNEcEI7SUFFRixNQUFNc0IsbUJBQW1CckIsSUFBQUEsb0NBQXFCLEVBQzVDc0IseURBQThDLEVBQzlDdkI7SUFFRixNQUFNMkQsaUJBQWlCMUQsSUFBQUEsb0NBQXFCLEVBQzFDZ0Ysc0RBQTJDLEVBQzNDakY7SUFHRixJQUNFLENBQUUrRSxDQUFBQSxzQkFBc0JHLFdBQVUsS0FDbEMsQ0FBRTVCLENBQUFBLHdCQUF3QjFCLGVBQWMsS0FDeEMsQ0FBRTJCLENBQUFBLDJCQUEyQjNCLGVBQWMsS0FDM0MsQ0FBRTRCLENBQUFBLHdCQUF3QjVCLGVBQWMsS0FDeEMsQ0FBRTZCLENBQUFBLDBCQUEwQjdCLGVBQWMsS0FDMUMsQ0FBRThCLENBQUFBLGdDQUFnQzVCLGdCQUFlLEtBQ2pELENBQUVSLENBQUFBLDRCQUE0QmhCLE9BQU0sR0FDcEM7UUFDQTtJQUNGO0lBRUEsTUFBTTZFLGVBQWVKLFdBQVdLLGFBQWEsQ0FDM0NDLCtDQUFvQztJQUd0QywyRUFBMkU7SUFDM0UsNEVBQTRFO0lBQzVFLElBQUlGLGdCQUFnQkEsYUFBYUcsWUFBWSxDQUFDQyx3QkFBYSxHQUFHO1FBQzVEO0lBQ0Y7SUFFQSxNQUFNQyxvQkFDSjdCLGtCQUFrQkEsMEJBQTBCdUI7SUFFOUMsTUFBTVQsa0JBQWtCUixlQUFlM0M7SUFFdkN5RCxXQUFXVSxLQUFLLENBQUNDLFdBQVcsQ0FBQyxXQUFXO0lBRXhDQyxJQUFBQSxvQ0FBcUIsRUFBQzFELGNBQWMyRCxJQUFJLENBQ3RDLENBQUMsRUFBQ2hDLGdCQUFnQixFQUFFaUMsV0FBVyxFQUFDO1FBQzlCLE1BQU1DLGNBQWN6QyxrQkFBa0I7WUFDcENDO1lBQ0FDO1lBQ0FDO1lBQ0FDO1lBQ0FDO1lBQ0FDO1lBQ0FDO1FBQ0Y7UUFFQSxJQUFJLENBQUNrQyxhQUFhO1lBQ2hCckI7WUFDQTtRQUNGO1FBRUEsNkNBQTZDO1FBQzdDLE1BQU1zQix1QkFBdUJDLElBQUFBLDJCQUFZLEVBQUMxQztRQUMxQyxNQUFNMkMsUUFBUUMsT0FBT0gscUJBQXFCRSxLQUFLLEVBQUVFLElBQUk7UUFDckQsTUFBTUMsc0JBQXNCO1lBQzFCN0QsTUFBTTtZQUNOLEdBQUd5RCxJQUFBQSwyQkFBWSxFQUFDekMsaUJBQWlCLEtBQUs7UUFDeEM7UUFDQSxNQUFNOEMscUJBQXFCO1lBQ3pCOUQsTUFBTTtZQUNOLEdBQUd5RCxJQUFBQSwyQkFBWSxFQUNiLENBQUN0QyxxQkFBcUJLLE9BQU8sSUFBSSxDQUFDSCxtQkFDOUJILGlCQUNBRixpQkFDSixLQUNEO1FBQ0g7UUFDQSxNQUFNK0MsMkJBQTJCO1lBQy9CQyxpQkFBaUI7Z0JBQ2Ysc0dBQXNHO2dCQUN0R0MsTUFBTUgsbUJBQW1CRyxJQUFJO2dCQUM3QlA7Z0JBQ0FRLFNBQVM7b0JBQ1AsK0dBQStHO29CQUMvR0MsT0FBT0wsbUJBQW1CTSxhQUFhO29CQUN2QywrR0FBK0c7b0JBQy9HQyxPQUFPUCxtQkFBbUJRLGFBQWE7b0JBQ3ZDLDhHQUE4RztvQkFDOUdDLE1BQU1ULG1CQUFtQlUsWUFBWTtvQkFDckMsK0dBQStHO29CQUMvR0MsT0FBT1gsbUJBQW1CWSxhQUFhO29CQUN2QyxpSEFBaUg7b0JBQ2pIQyxTQUFTYixtQkFBbUJjLGVBQWU7b0JBQzNDLDZHQUE2RztvQkFDN0dDLGFBQWFmLG1CQUFtQmdCLFdBQVc7Z0JBQzdDO1lBQ0Y7UUFDRjtRQUVBLElBQUlDLG1CQUFtQjtRQUN2QixxSEFBcUg7UUFDckgsSUFBSTFELG9CQUFvQkosYUFBYStELFFBQVEsQ0FBQyx5QkFBeUIsRUFBRTtZQUN2RSwrRkFBK0Y7WUFDL0YsTUFBTUMsdUJBQXVCaEUsYUFBYTRCLGFBQWEsQ0FDckQ7WUFHRix3Q0FBd0M7WUFDeEMsSUFBSW9DLHNCQUFzQjtnQkFDeEJGLG1CQUFtQkUscUJBQXFCQyxLQUFLO1lBQy9DO1FBQ0Y7UUFFQSxNQUFNQyxhQUFhbEMsb0JBQ2ZtQyxJQUFBQSxvQ0FBcUIsRUFBQ2hFLGtCQUN0QixFQUFFO1FBRU4sTUFBTWlFLG1CQUFtQkMsUUFBUUMsR0FBRyxDQUFDO1lBQ25DQyxJQUFBQSwwQ0FBMkIsRUFBQzlGLGNBQWNnRTtZQUMxQytCLElBQUFBLHlDQUEwQixFQUFDL0YsY0FBY29FO1lBQ3pDekMsbUJBQ0lvRSxJQUFBQSx5Q0FBMEIsRUFBQy9GLGNBQWNtRSx1QkFDekN5QixRQUFRSSxPQUFPO1lBQ25CckUsbUJBQ0lzRSxJQUFBQSxnREFBaUMsRUFBQ2pHLGNBQWNxRixvQkFDaERPLFFBQVFJLE9BQU87WUFDbkJ6QyxvQkFFSTJDLElBQUFBLHVDQUF3QixFQUFDbEcsY0FBY3lGLGNBQ3ZDRyxRQUFRSSxPQUFPO1NBQ3BCO1FBRURMLGlCQUNHaEMsSUFBSSxDQUFDO1lBQ0osSUFBSUMsYUFBYTtnQkFDZixPQUFPZ0MsUUFBUUksT0FBTztZQUN4QjtZQUVBLElBQUksQ0FBQy9GLFlBQVlrRyxhQUFhLElBQUk7Z0JBQ2hDLE9BQU9QLFFBQVFRLE1BQU0sQ0FDbkIsSUFBSUMsTUFDRjtZQUdOO1lBRUEsTUFBTUMsU0FBU3JHLFlBQVlzRyxpQkFBaUI7WUFDNUMsTUFBTUMsdUJBQXVCQyxTQUMzQixnSEFBZ0g7WUFDaEgxSSxzQkFBc0JrQixZQUFZLENBQUN5SCxrQ0FBdUIsR0FDMUQ7WUFFRixNQUFNQyxPQUFPMUcsWUFBWTJHLFVBQVUsQ0FDakMsY0FDQUo7WUFFRixPQUFPRixPQUFPTyxtQkFBbUIsQ0FDL0IsUUFDQUYsTUFDQXRDO1FBRUosRUFDQSw0TUFBNE07U0FDM01WLElBQUksQ0FBQyxDQUFDbUQ7WUFDTCxJQUFJLENBQUNBLFFBQVFsRCxhQUFhO2dCQUN4QixPQUFPZ0MsUUFBUUksT0FBTztZQUN4QjtZQUVBLElBQUljLEtBQUtwRyxLQUFLLEVBQUU7Z0JBQ2QsT0FBT2tGLFFBQVFRLE1BQU0sQ0FBQ1UsS0FBS3BHLEtBQUs7WUFDbEM7WUFFQSxPQUFPcUcsSUFBQUEsZ0RBQWlDLEVBQ3RDL0csY0FDQThHLEtBQUtFLGFBQWEsQ0FBQ2hHLEVBQUU7UUFFekIsR0FDQzJDLElBQUksQ0FBQztZQUNKLE9BQU9zRCxJQUFBQSw4Q0FBK0IsRUFBQ2pILGNBQWM7Z0JBQ25Ea0gsY0FBYztZQUNoQjtRQUNGLEdBQ0N2RCxJQUFJLENBQUMsQ0FBQ21EO1lBQ0xLLGNBQUssQ0FBQ0MsR0FBRyxDQUFDTjtZQUNWLE1BQU1PLFFBQVFDLElBQUFBLDhDQUErQixFQUFDUjtZQUM5QyxJQUFJUyxJQUFBQSw0Q0FBNkIsRUFBQ0YsTUFBTUcsTUFBTSxHQUFHO2dCQUMvQyxNQUFNbEIsU0FBU3JHLFlBQVlzRyxpQkFBaUI7Z0JBQzVDLE9BQ0VELE9BQ0dtQixxQkFBcUIsQ0FBQ0osTUFBTUssWUFBWSxDQUN6Qyx1RkFBdUY7aUJBQ3RGL0QsSUFBSSxDQUFDLENBQUNnRTtvQkFDTCxNQUFNQyxTQUNKLEFBQUNELGtCQUFrQkEsZUFBZUUsYUFBYSxJQUFLLENBQUM7b0JBQ3ZELE1BQU1DLGdCQUNKRixPQUFPRyxtQkFBbUIsS0FBSyxjQUMzQnpCLE9BQU8wQixrQkFBa0IsQ0FBQ1gsTUFBTUssWUFBWSxJQUM1Q3BCLE9BQU8yQixnQkFBZ0IsQ0FBQ1osTUFBTUssWUFBWTtvQkFFaEQsK0VBQStFO29CQUMvRSxPQUFPSSxjQUFjbkUsSUFBSSxDQUFDLENBQUN1RTt3QkFDekIsSUFBSUEsT0FBT3hILEtBQUssRUFBRTs0QkFDaEIsT0FBT2tGLFFBQVFRLE1BQU0sQ0FBQzhCLE9BQU94SCxLQUFLO3dCQUNwQzt3QkFFQSxPQUFPdUcsSUFBQUEsOENBQStCLEVBQUNqSCxjQUFjOzRCQUNuRGtILGNBQWM7NEJBQ2RpQixpQkFBaUJELE9BQU9MLGFBQWEsQ0FBQzdHLEVBQUU7d0JBQzFDLEdBQUcyQyxJQUFJLENBQUMsQ0FBQ3lFOzRCQUNQLE1BQU1DLGdCQUNKZixJQUFBQSw4Q0FBK0IsRUFBQ2M7NEJBRWxDLElBQUlDLGNBQWNDLEVBQUUsRUFBRTtnQ0FDcEI5RixnQkFBZ0I7Z0NBQ2hCK0YsSUFBQUEsMENBQTJCLEVBQUNGOzRCQUM5Qjt3QkFDRjtvQkFDRjtnQkFDRjtZQUVOO1lBQ0EsSUFBSWhCLE1BQU1pQixFQUFFLEVBQUU7Z0JBQ1o5RixnQkFBZ0I7Z0JBQ2hCK0YsSUFBQUEsMENBQTJCLEVBQUNsQjtZQUM5QjtRQUNGLEdBQ0NtQixLQUFLLENBQUMsQ0FBQ0M7WUFDTmpHO1lBQ0EyRSxjQUFLLENBQUN6RyxLQUFLLENBQUMrSDtZQUNaM0YsV0FBV1UsS0FBSyxDQUFDa0YsY0FBYyxDQUFDO1lBQ2hDQyxJQUFBQSxpQ0FBa0IsRUFBQzdGLFlBQVkyRjtRQUNqQztJQUNKO0FBRUo7QUFFQSxvR0FBb0c7QUFDcEcsTUFBTUcsc0JBQXNCLENBQUM3SSxPQUFjQztJQUN6Q0QsTUFBTThJLGNBQWMsSUFBSSxpQkFBaUI7SUFDekM5SSxNQUFNK0ksd0JBQXdCLElBQUksNEVBQTRFO0lBRTlHLE1BQU0sRUFBQ2pHLGFBQWEsRUFBQyxHQUFHOUM7SUFDeEIsSUFBSSxDQUFFOEMsQ0FBQUEseUJBQXlCeEUsT0FBTSxHQUFJO1FBQ3ZDO0lBQ0Y7SUFFQSxNQUFNMEssVUFBVS9LLElBQUFBLG9DQUFxQixFQUNuQ2dMLHFEQUEwQyxFQUMxQ25HO0lBRUYsTUFBTTlFLHdCQUNKSSxJQUFBQSwyQ0FBNEIsRUFDMUJGLHFEQUEwQyxFQUMxQzRFLGtCQUVGMUUsSUFBQUEsMkNBQTRCLEVBQzFCVSw0REFBaUQsRUFDakRnRTtJQUVKLElBQUksQ0FBQzlFLHVCQUF1QjtRQUMxQjtJQUNGO0lBQ0EsTUFBTWtMLGVBQWVqTCxJQUFBQSxvQ0FBcUIsRUFDeEMrRSxrREFBdUMsRUFDdkNoRjtJQUdGLElBQ0UsQ0FDRWdMLENBQUFBLG1CQUFtQmxKLG9CQUFvQm9KLHdCQUF3QmhHLFdBQVUsR0FFM0U7UUFDQTtJQUNGO0lBRUEsTUFBTWlHLGVBQWVILFFBQVF2RCxLQUFLLENBQUN0QixJQUFJLEdBQUdpRixXQUFXO0lBQ3JEQyxJQUFBQSw0QkFBYSxFQUFDcEosY0FBYztRQUFDa0o7SUFBWSxHQUN0Q3ZGLElBQUksQ0FBQztRQUNKb0YsUUFBUXZELEtBQUssR0FBRztRQUNoQnlELGFBQWF6RixLQUFLLENBQUM2RixPQUFPLEdBQUc7UUFDN0JDLElBQUFBLDRCQUFhLEVBQUM7SUFDaEIsR0FDQ2QsS0FBSyxDQUFDLENBQUM5SCxRQUFVNkksSUFBQUEsdUNBQXdCLEVBQUM3SSxPQUFPM0M7QUFDdEQ7QUFFQSxvR0FBb0c7QUFDcEcsTUFBTXlMLDJCQUEyQixDQUFDekosT0FBY0M7SUFDOUMsTUFBTSxFQUFDNkMsYUFBYSxFQUFDLEdBQUc5QztJQUV4QixJQUFJLENBQUU4QyxDQUFBQSx5QkFBeUJoRCxnQkFBZSxHQUFJO1FBQ2hEO0lBQ0Y7SUFFQSxNQUFNMkYsUUFBUTNDLGNBQWMyQyxLQUFLLENBQUN0QixJQUFJO0lBQ3RDLE1BQU1GLFFBQVF3QixTQUFTLFFBQVFBLFVBQVUsS0FBSyxPQUFPQTtJQUVyRE0sSUFBQUEsMENBQTJCLEVBQUM5RixjQUFjZ0UsT0FDdkNMLElBQUksQ0FBQztRQUNKMkYsSUFBQUEsNEJBQWEsRUFBQztJQUNoQixHQUNDZCxLQUFLLENBQUMsQ0FBQ0M7UUFDTmEsSUFBQUEsNEJBQWEsRUFBQ2I7SUFDaEI7QUFDSjtBQUVBLE1BQU1nQixzQkFBc0JDLElBQUFBLGlCQUFRLEVBQUMsQ0FBQzNKLE9BQU9DO0lBQzNDLE1BQU0sRUFBQzZDLGFBQWEsRUFBQyxHQUFHOUM7SUFFeEIsSUFBSSxDQUFFOEMsQ0FBQUEseUJBQXlCbEQsZUFBYyxHQUFJO1FBQy9DO0lBQ0Y7SUFFQSxNQUFNVyxPQUNKdUMsY0FBYzVELFlBQVksQ0FBQ0MsOEJBQW1CLE1BQzlDVCwrREFBb0QsR0FDaEQsYUFDQTtJQUNOLE1BQU1rTCxjQUFjO1FBQ2xCcko7UUFDQSxHQUFHeUQsSUFBQUEsMkJBQVksRUFBQ2xCLGVBQWUsS0FBSztJQUN0QztJQUVBa0QsSUFBQUEseUNBQTBCLEVBQUMvRixjQUFjMkosYUFDdENoRyxJQUFJLENBQUM7UUFDSjJGLElBQUFBLDRCQUFhLEVBQUM7SUFDaEIsR0FDQ2QsS0FBSyxDQUFDLENBQUNDO1FBQ05hLElBQUFBLDRCQUFhLEVBQUNiO0lBQ2hCO0FBQ0osR0FBRztBQUVILDRGQUE0RjtBQUM1RixNQUFNbUIsNkJBQTZCLENBQUMsRUFBQy9HLGFBQWEsRUFBQztJQUNqRCxNQUFNOUUsd0JBQXdCSSxJQUFBQSwyQ0FBNEIsRUFDeERGLHFEQUEwQyxFQUMxQzRFO0lBRUYsSUFBSSxDQUFDOUUsdUJBQXVCO1FBQzFCO0lBQ0Y7SUFFQSxNQUFNVyx3QkFBd0JWLElBQUFBLG9DQUFxQixFQUNqRFcsOERBQW1ELEVBQ25EWjtJQUVGLElBQUksQ0FBQ1cseUJBQXlCLENBQUVtRSxDQUFBQSx5QkFBeUJoRCxnQkFBZSxHQUFJO1FBQzFFO0lBQ0Y7SUFFQSxJQUFJZ0QsY0FBY2YsT0FBTyxFQUFFO1FBQ3pCcEQsc0JBQXNCOEUsS0FBSyxDQUFDQyxXQUFXLENBQUMsV0FBVztJQUNyRCxPQUFPO1FBQ0wvRSxzQkFBc0I4RSxLQUFLLENBQUNrRixjQUFjLENBQUM7SUFDN0M7QUFDRjtBQUVBLE1BQU1tQiw2QkFBNkIsQ0FDakMsNEZBQTRGO0FBQzVGLEVBQUNoSCxhQUFhLEVBQUMsRUFDZjdDO0lBRUEsSUFBSSxDQUFFNkMsQ0FBQUEseUJBQXlCaEQsZ0JBQWUsR0FBSTtRQUNoRDtJQUNGO0lBRUFvRyxJQUFBQSxnREFBaUMsRUFBQ2pHLGNBQWM2QyxjQUFjN0IsRUFBRSxFQUM3RDJDLElBQUksQ0FBQztRQUNKMkYsSUFBQUEsNEJBQWEsRUFBQztJQUNoQixHQUNDZCxLQUFLLENBQUMsQ0FBQ0M7UUFDTmEsSUFBQUEsNEJBQWEsRUFBQ2I7SUFDaEI7QUFDSjtBQUVBLE1BQU1xQiwwQ0FBMEMsQ0FDOUMvSixPQUNBQztJQUVBLElBQUlELE1BQU1PLElBQUksS0FBSyxVQUFVO1FBQzNCUCxNQUFNOEksY0FBYztJQUN0QjtJQUVBLElBRUUsQUFEQSxpR0FBaUc7SUFDaEc5SSxNQUFNTyxJQUFJLEtBQUssV0FBV1AsTUFBTWdLLE9BQU8sS0FBSyxNQUM3QyxDQUFFaEssQ0FBQUEsTUFBTThDLGFBQWEsWUFBWXhFLE9BQU0sR0FDdkM7UUFDQTtJQUNGO0lBRUEsSUFDRTBCLE1BQU1qQyxNQUFNLEtBQ1pFLElBQUFBLG9DQUFxQixFQUFDZ0wscURBQTBDLEdBQ2hFO1FBQ0E7SUFDRjtJQUVBLE1BQU1qTCx3QkFBd0JJLElBQUFBLDJDQUE0QixFQUN4REYscURBQTBDLEVBQzFDOEIsTUFBTThDLGFBQWE7SUFFckIsSUFBSSxDQUFFOUUsQ0FBQUEsaUNBQWlDTSxPQUFNLEdBQUk7UUFDL0M7SUFDRjtJQUVBLE1BQU1nRCxlQUFlckQsSUFBQUEsb0NBQXFCLEVBQ3hDSSw0REFBaUQsRUFDakRMO0lBRUYsTUFBTXVELGtCQUFrQnRELElBQUFBLG9DQUFxQixFQUMzQ1MsK0RBQW9ELEVBQ3BEVjtJQUVGLE1BQU13RCxlQUFldkQsSUFBQUEsb0NBQXFCLEVBQ3hDZSwrREFBb0QsRUFDcERoQjtJQUVGLE1BQU15RCxpQkFBaUJ4RCxJQUFBQSxvQ0FBcUIsRUFDMUNXLDhEQUFtRCxFQUNuRFo7SUFFRixNQUFNMEQsdUJBQXVCekQsSUFBQUEsb0NBQXFCLEVBQ2hEbUIsc0VBQTJELEVBQzNEcEI7SUFFRixNQUFNMkQsaUJBQWlCMUQsSUFBQUEsb0NBQXFCLEVBQzFDZ0Ysc0RBQTJDLEVBQzNDakY7SUFHRixJQUNFLENBQUVzRCxDQUFBQSx3QkFBd0IxQixlQUFjLEtBQ3hDLENBQUUyQixDQUFBQSwyQkFBMkIzQixlQUFjLEtBQzNDLENBQUU0QixDQUFBQSx3QkFBd0I1QixlQUFjLEtBQ3hDLENBQUU2QixDQUFBQSwwQkFBMEI3QixlQUFjLEtBQzFDLENBQUU4QixDQUFBQSxnQ0FBZ0M1QixnQkFBZSxHQUNqRDtRQUNBO0lBQ0Y7SUFFQSxNQUFNMEQsb0JBQ0o3QixrQkFBa0JBLDBCQUEwQi9CO0lBRTlDK0QsSUFBQUEsb0NBQXFCLEVBQUMxRCxjQUFjMkQsSUFBSSxDQUFDLENBQUMsRUFBQ2hDLGdCQUFnQixFQUFDO1FBQzFEUCxrQkFBa0I7WUFDaEJDO1lBQ0FDO1lBQ0FDO1lBQ0FDO1lBQ0FDO1lBQ0FDLGdCQUFnQjZCLG9CQUFvQjdCLGlCQUFpQjtZQUNyREM7UUFDRjtJQUNGO0FBQ0Y7QUFFTyxNQUFNL0QsV0FBVyxDQUFDb007SUFDdkJBLGFBQWFDLEVBQUUsQ0FBQzFKLDRCQUFpQixFQUFFMkosU0FBU3BLO0lBQzVDa0ssYUFBYUMsRUFBRSxDQUFDLFNBQVM3Syx5QkFBeUJ3RDtJQUNsRG9ILGFBQWFDLEVBQUUsQ0FDYixXQUNBN0sseUJBQ0Esd0RBQXdEO0lBQ3hELENBQUNXLE9BQU9DLGNBQWNtSztRQUNwQiwrRUFBK0U7UUFDL0UsSUFBSXBLLE1BQU1xSyxLQUFLLEtBQUssSUFBSTtZQUN0QiwwQ0FBMEM7WUFDMUNySyxNQUFNOEksY0FBYztRQUN0QjtRQUNBLCtFQUErRTtRQUMvRSxJQUFJOUksTUFBTXFLLEtBQUssS0FBSyxJQUFJO1lBQ3RCLGtCQUFrQjtZQUNsQixPQUFPeEgsaUJBQWlCN0MsT0FBT0MsY0FBY21LO1FBQy9DO0lBQ0Y7SUFFRkgsYUFBYUMsRUFBRSxDQUNiLFNBQ0E3Syx5QkFDQSx3REFBd0Q7SUFDeEQsQ0FBQ1csT0FBT0MsY0FBY21LO1FBQ3BCLCtFQUErRTtRQUMvRSxJQUFJcEssTUFBTXFLLEtBQUssS0FBSyxJQUFJO1lBQ3RCLHFCQUFxQjtZQUNyQixPQUFPeEgsaUJBQWlCN0MsT0FBT0MsY0FBY21LO1FBQy9DO0lBQ0Y7SUFFRkgsYUFBYUMsRUFBRSxDQUFDLFVBQVUxSywwQkFBMEJxSjtJQUVwRCxnRkFBZ0Y7SUFDaEYsd0ZBQXdGO0lBQ3hGb0IsYUFBYUMsRUFBRSxDQUNiLFVBQ0FwTSxnQ0FDQTJMO0lBRUZRLGFBQWFDLEVBQUUsQ0FDYixVQUNBMUwsa0NBQ0FrTDtJQUVGTyxhQUFhQyxFQUFFLENBQ2IsVUFDQWpMLDZCQUNBNEs7SUFFRkksYUFBYUMsRUFBRSxDQUNiLFVBQ0FyTCxrQ0FDQWlMO0lBRUZHLGFBQWFDLEVBQUUsQ0FDYixVQUNBeEssb0NBQ0FxSztJQUVGLG9GQUFvRjtJQUNwRixnRkFBZ0Y7SUFDaEYsbUZBQW1GO0lBQ25GLGlGQUFpRjtJQUNqRixpQ0FBaUM7SUFDakNFLGFBQWFDLEVBQUUsQ0FDYixTQUNBckssZ0NBQ0FrSztBQUVKO01BRUEsV0FBZTtJQUFDbE07QUFBUSJ9

}),
94797: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    applyDiscountMutation: function() {
        return applyDiscountMutation;
    },
    attemptSubmitOrderMutation: function() {
        return attemptSubmitOrderMutation;
    },
    estimateOrderTaxesMutation: function() {
        return estimateOrderTaxesMutation;
    },
    recalcOrderEstimationsMutation: function() {
        return recalcOrderEstimationsMutation;
    },
    requestPayPalOrderMutation: function() {
        return requestPayPalOrderMutation;
    },
    syncPayPalOrderInfo: function() {
        return syncPayPalOrderInfo;
    },
    updateCustomData: function() {
        return updateCustomData;
    },
    updateObfuscatedOrderAddressMutation: function() {
        return updateObfuscatedOrderAddressMutation;
    },
    updateOrderAddressMutation: function() {
        return updateOrderAddressMutation;
    },
    updateOrderIdentityMutation: function() {
        return updateOrderIdentityMutation;
    },
    updateOrderShippingMethodMutation: function() {
        return updateOrderShippingMethodMutation;
    },
    updateOrderStripePaymentMethodMutation: function() {
        return updateOrderStripePaymentMethodMutation;
    }
});
const _graphqltag = /*#__PURE__*/ _interop_require_default(__webpack_require__(28160));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const updateOrderIdentityMutation = (0, _graphqltag.default)`
  mutation CheckoutUpdateOrderIdentity($email: String) {
    ecommerceUpdateIdentity(email: $email) {
      ok
    }
  }
`;
const updateOrderAddressMutation = (0, _graphqltag.default)`
  mutation CheckoutUpdateOrderAddress(
    $type: String!
    $name: String
    $address_line1: String
    $address_line2: String
    $address_city: String
    $address_state: String
    $address_country: String
    $address_zip: String
  ) {
    ecommerceUpdateAddress(
      type: $type
      addressee: $name
      line1: $address_line1
      line2: $address_line2
      city: $address_city
      state: $address_state
      country: $address_country
      postalCode: $address_zip
    ) {
      ok
    }
  }
`;
const updateObfuscatedOrderAddressMutation = (0, _graphqltag.default)`
  mutation CheckoutUpdateObfuscatedOrderAddress(
    $type: String!
    $name: String
    $address_line1: String
    $address_line2: String
    $address_city: String
    $address_state: String
    $address_country: String
    $address_zip: String
  ) {
    ecommerceUpdateObfuscatedAddress(
      type: $type
      addressee: $name
      line1: $address_line1
      line2: $address_line2
      city: $address_city
      state: $address_state
      country: $address_country
      postalCode: $address_zip
    ) {
      ok
    }
  }
`;
const updateOrderShippingMethodMutation = (0, _graphqltag.default)`
  mutation CheckoutUpdateShippingMethod($id: String) {
    ecommerceUpdateShippingMethod(methodId: $id) {
      ok
    }
  }
`;
const updateOrderStripePaymentMethodMutation = (0, _graphqltag.default)`
  mutation CheckoutUpdateStripePaymentMethod($paymentMethod: String!) {
    ecommerceStoreStripePaymentMethod(paymentMethod: $paymentMethod) {
      ok
    }
  }
`;
const updateCustomData = (0, _graphqltag.default)`
  mutation CheckoutUpdateCustomData(
    $customData: [mutation_commerce_update_custom_data]!
  ) {
    ecommerceUpdateCustomData(customData: $customData) {
      ok
    }
  }
`;
const estimateOrderTaxesMutation = (0, _graphqltag.default)`
  mutation CheckoutEstimateOrderTaxes {
    ecommerceEstimateTaxes {
      ok
    }
  }
`;
const recalcOrderEstimationsMutation = (0, _graphqltag.default)`
  mutation CheckoutRecalcOrderEstimations {
    ecommerceRecalcEstimations {
      ok
    }
  }
`;
const requestPayPalOrderMutation = (0, _graphqltag.default)`
  mutation CheckoutRequestPayPalOrder {
    ecommercePaypalOrderRequest {
      orderId
    }
  }
`;
const syncPayPalOrderInfo = (0, _graphqltag.default)`
  mutation CheckoutSyncPayPalInfo {
    ecommerceSyncPaypalOrderInfoToWF {
      ok
    }
  }
`;
const attemptSubmitOrderMutation = (0, _graphqltag.default)`
  mutation CheckoutAttemptSubmitOrder(
    $checkoutType: mutation_commerce_checkout_type
    $paymentIntentId: String
  ) {
    ecommerceAttemptSubmitOrder(
      checkoutType: $checkoutType
      paymentIntentId: $paymentIntentId
    ) {
      orderId
      token
      ok
      customerPaid {
        decimalValue
        unit
      }
      purchasedItems {
        id
        name
        count
        price {
          decimalValue
        }
      }
      status
      clientSecret
      nextAction
    }
  }
`;
const applyDiscountMutation = (0, _graphqltag.default)`
  mutation CheckoutApplyDiscount($discountCode: String!) {
    ecommerceApplyDiscount(discountCode: $discountCode) {
      ok
    }
  }
`;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoZWNrb3V0TXV0YXRpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBncWwgZnJvbSAnZ3JhcGhxbC10YWcnO1xuXG5leHBvcnQgY29uc3QgdXBkYXRlT3JkZXJJZGVudGl0eU11dGF0aW9uID0gZ3FsYFxuICBtdXRhdGlvbiBDaGVja291dFVwZGF0ZU9yZGVySWRlbnRpdHkoJGVtYWlsOiBTdHJpbmcpIHtcbiAgICBlY29tbWVyY2VVcGRhdGVJZGVudGl0eShlbWFpbDogJGVtYWlsKSB7XG4gICAgICBva1xuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZU9yZGVyQWRkcmVzc011dGF0aW9uID0gZ3FsYFxuICBtdXRhdGlvbiBDaGVja291dFVwZGF0ZU9yZGVyQWRkcmVzcyhcbiAgICAkdHlwZTogU3RyaW5nIVxuICAgICRuYW1lOiBTdHJpbmdcbiAgICAkYWRkcmVzc19saW5lMTogU3RyaW5nXG4gICAgJGFkZHJlc3NfbGluZTI6IFN0cmluZ1xuICAgICRhZGRyZXNzX2NpdHk6IFN0cmluZ1xuICAgICRhZGRyZXNzX3N0YXRlOiBTdHJpbmdcbiAgICAkYWRkcmVzc19jb3VudHJ5OiBTdHJpbmdcbiAgICAkYWRkcmVzc196aXA6IFN0cmluZ1xuICApIHtcbiAgICBlY29tbWVyY2VVcGRhdGVBZGRyZXNzKFxuICAgICAgdHlwZTogJHR5cGVcbiAgICAgIGFkZHJlc3NlZTogJG5hbWVcbiAgICAgIGxpbmUxOiAkYWRkcmVzc19saW5lMVxuICAgICAgbGluZTI6ICRhZGRyZXNzX2xpbmUyXG4gICAgICBjaXR5OiAkYWRkcmVzc19jaXR5XG4gICAgICBzdGF0ZTogJGFkZHJlc3Nfc3RhdGVcbiAgICAgIGNvdW50cnk6ICRhZGRyZXNzX2NvdW50cnlcbiAgICAgIHBvc3RhbENvZGU6ICRhZGRyZXNzX3ppcFxuICAgICkge1xuICAgICAgb2tcbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVPYmZ1c2NhdGVkT3JkZXJBZGRyZXNzTXV0YXRpb24gPSBncWxgXG4gIG11dGF0aW9uIENoZWNrb3V0VXBkYXRlT2JmdXNjYXRlZE9yZGVyQWRkcmVzcyhcbiAgICAkdHlwZTogU3RyaW5nIVxuICAgICRuYW1lOiBTdHJpbmdcbiAgICAkYWRkcmVzc19saW5lMTogU3RyaW5nXG4gICAgJGFkZHJlc3NfbGluZTI6IFN0cmluZ1xuICAgICRhZGRyZXNzX2NpdHk6IFN0cmluZ1xuICAgICRhZGRyZXNzX3N0YXRlOiBTdHJpbmdcbiAgICAkYWRkcmVzc19jb3VudHJ5OiBTdHJpbmdcbiAgICAkYWRkcmVzc196aXA6IFN0cmluZ1xuICApIHtcbiAgICBlY29tbWVyY2VVcGRhdGVPYmZ1c2NhdGVkQWRkcmVzcyhcbiAgICAgIHR5cGU6ICR0eXBlXG4gICAgICBhZGRyZXNzZWU6ICRuYW1lXG4gICAgICBsaW5lMTogJGFkZHJlc3NfbGluZTFcbiAgICAgIGxpbmUyOiAkYWRkcmVzc19saW5lMlxuICAgICAgY2l0eTogJGFkZHJlc3NfY2l0eVxuICAgICAgc3RhdGU6ICRhZGRyZXNzX3N0YXRlXG4gICAgICBjb3VudHJ5OiAkYWRkcmVzc19jb3VudHJ5XG4gICAgICBwb3N0YWxDb2RlOiAkYWRkcmVzc196aXBcbiAgICApIHtcbiAgICAgIG9rXG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgdXBkYXRlT3JkZXJTaGlwcGluZ01ldGhvZE11dGF0aW9uID0gZ3FsYFxuICBtdXRhdGlvbiBDaGVja291dFVwZGF0ZVNoaXBwaW5nTWV0aG9kKCRpZDogU3RyaW5nKSB7XG4gICAgZWNvbW1lcmNlVXBkYXRlU2hpcHBpbmdNZXRob2QobWV0aG9kSWQ6ICRpZCkge1xuICAgICAgb2tcbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVPcmRlclN0cmlwZVBheW1lbnRNZXRob2RNdXRhdGlvbiA9IGdxbGBcbiAgbXV0YXRpb24gQ2hlY2tvdXRVcGRhdGVTdHJpcGVQYXltZW50TWV0aG9kKCRwYXltZW50TWV0aG9kOiBTdHJpbmchKSB7XG4gICAgZWNvbW1lcmNlU3RvcmVTdHJpcGVQYXltZW50TWV0aG9kKHBheW1lbnRNZXRob2Q6ICRwYXltZW50TWV0aG9kKSB7XG4gICAgICBva1xuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZUN1c3RvbURhdGEgPSBncWxgXG4gIG11dGF0aW9uIENoZWNrb3V0VXBkYXRlQ3VzdG9tRGF0YShcbiAgICAkY3VzdG9tRGF0YTogW211dGF0aW9uX2NvbW1lcmNlX3VwZGF0ZV9jdXN0b21fZGF0YV0hXG4gICkge1xuICAgIGVjb21tZXJjZVVwZGF0ZUN1c3RvbURhdGEoY3VzdG9tRGF0YTogJGN1c3RvbURhdGEpIHtcbiAgICAgIG9rXG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgZXN0aW1hdGVPcmRlclRheGVzTXV0YXRpb24gPSBncWxgXG4gIG11dGF0aW9uIENoZWNrb3V0RXN0aW1hdGVPcmRlclRheGVzIHtcbiAgICBlY29tbWVyY2VFc3RpbWF0ZVRheGVzIHtcbiAgICAgIG9rXG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgcmVjYWxjT3JkZXJFc3RpbWF0aW9uc011dGF0aW9uID0gZ3FsYFxuICBtdXRhdGlvbiBDaGVja291dFJlY2FsY09yZGVyRXN0aW1hdGlvbnMge1xuICAgIGVjb21tZXJjZVJlY2FsY0VzdGltYXRpb25zIHtcbiAgICAgIG9rXG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgcmVxdWVzdFBheVBhbE9yZGVyTXV0YXRpb24gPSBncWxgXG4gIG11dGF0aW9uIENoZWNrb3V0UmVxdWVzdFBheVBhbE9yZGVyIHtcbiAgICBlY29tbWVyY2VQYXlwYWxPcmRlclJlcXVlc3Qge1xuICAgICAgb3JkZXJJZFxuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IHN5bmNQYXlQYWxPcmRlckluZm8gPSBncWxgXG4gIG11dGF0aW9uIENoZWNrb3V0U3luY1BheVBhbEluZm8ge1xuICAgIGVjb21tZXJjZVN5bmNQYXlwYWxPcmRlckluZm9Ub1dGIHtcbiAgICAgIG9rXG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgYXR0ZW1wdFN1Ym1pdE9yZGVyTXV0YXRpb24gPSBncWxgXG4gIG11dGF0aW9uIENoZWNrb3V0QXR0ZW1wdFN1Ym1pdE9yZGVyKFxuICAgICRjaGVja291dFR5cGU6IG11dGF0aW9uX2NvbW1lcmNlX2NoZWNrb3V0X3R5cGVcbiAgICAkcGF5bWVudEludGVudElkOiBTdHJpbmdcbiAgKSB7XG4gICAgZWNvbW1lcmNlQXR0ZW1wdFN1Ym1pdE9yZGVyKFxuICAgICAgY2hlY2tvdXRUeXBlOiAkY2hlY2tvdXRUeXBlXG4gICAgICBwYXltZW50SW50ZW50SWQ6ICRwYXltZW50SW50ZW50SWRcbiAgICApIHtcbiAgICAgIG9yZGVySWRcbiAgICAgIHRva2VuXG4gICAgICBva1xuICAgICAgY3VzdG9tZXJQYWlkIHtcbiAgICAgICAgZGVjaW1hbFZhbHVlXG4gICAgICAgIHVuaXRcbiAgICAgIH1cbiAgICAgIHB1cmNoYXNlZEl0ZW1zIHtcbiAgICAgICAgaWRcbiAgICAgICAgbmFtZVxuICAgICAgICBjb3VudFxuICAgICAgICBwcmljZSB7XG4gICAgICAgICAgZGVjaW1hbFZhbHVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YXR1c1xuICAgICAgY2xpZW50U2VjcmV0XG4gICAgICBuZXh0QWN0aW9uXG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgYXBwbHlEaXNjb3VudE11dGF0aW9uID0gZ3FsYFxuICBtdXRhdGlvbiBDaGVja291dEFwcGx5RGlzY291bnQoJGRpc2NvdW50Q29kZTogU3RyaW5nISkge1xuICAgIGVjb21tZXJjZUFwcGx5RGlzY291bnQoZGlzY291bnRDb2RlOiAkZGlzY291bnRDb2RlKSB7XG4gICAgICBva1xuICAgIH1cbiAgfVxuYDtcbiJdLCJuYW1lcyI6WyJhcHBseURpc2NvdW50TXV0YXRpb24iLCJhdHRlbXB0U3VibWl0T3JkZXJNdXRhdGlvbiIsImVzdGltYXRlT3JkZXJUYXhlc011dGF0aW9uIiwicmVjYWxjT3JkZXJFc3RpbWF0aW9uc011dGF0aW9uIiwicmVxdWVzdFBheVBhbE9yZGVyTXV0YXRpb24iLCJzeW5jUGF5UGFsT3JkZXJJbmZvIiwidXBkYXRlQ3VzdG9tRGF0YSIsInVwZGF0ZU9iZnVzY2F0ZWRPcmRlckFkZHJlc3NNdXRhdGlvbiIsInVwZGF0ZU9yZGVyQWRkcmVzc011dGF0aW9uIiwidXBkYXRlT3JkZXJJZGVudGl0eU11dGF0aW9uIiwidXBkYXRlT3JkZXJTaGlwcGluZ01ldGhvZE11dGF0aW9uIiwidXBkYXRlT3JkZXJTdHJpcGVQYXltZW50TWV0aG9kTXV0YXRpb24iLCJncWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBdUphQSxxQkFBcUI7ZUFBckJBOztJQS9CQUMsMEJBQTBCO2VBQTFCQTs7SUFoQ0FDLDBCQUEwQjtlQUExQkE7O0lBUUFDLDhCQUE4QjtlQUE5QkE7O0lBUUFDLDBCQUEwQjtlQUExQkE7O0lBUUFDLG1CQUFtQjtlQUFuQkE7O0lBbENBQyxnQkFBZ0I7ZUFBaEJBOztJQTFDQUMsb0NBQW9DO2VBQXBDQTs7SUExQkFDLDBCQUEwQjtlQUExQkE7O0lBUkFDLDJCQUEyQjtlQUEzQkE7O0lBNERBQyxpQ0FBaUM7ZUFBakNBOztJQVFBQyxzQ0FBc0M7ZUFBdENBOzs7bUVBdEVHOzs7Ozs7QUFFVCxNQUFNRiw4QkFBOEJHLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7O0FBTS9DLENBQUM7QUFFTSxNQUFNSiw2QkFBNkJJLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0I5QyxDQUFDO0FBRU0sTUFBTUwsdUNBQXVDSyxJQUFBQSxtQkFBRyxDQUFBLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCeEQsQ0FBQztBQUVNLE1BQU1GLG9DQUFvQ0UsSUFBQUEsbUJBQUcsQ0FBQSxDQUFDOzs7Ozs7QUFNckQsQ0FBQztBQUVNLE1BQU1ELHlDQUF5Q0MsSUFBQUEsbUJBQUcsQ0FBQSxDQUFDOzs7Ozs7QUFNMUQsQ0FBQztBQUVNLE1BQU1OLG1CQUFtQk0sSUFBQUEsbUJBQUcsQ0FBQSxDQUFDOzs7Ozs7OztBQVFwQyxDQUFDO0FBRU0sTUFBTVYsNkJBQTZCVSxJQUFBQSxtQkFBRyxDQUFBLENBQUM7Ozs7OztBQU05QyxDQUFDO0FBRU0sTUFBTVQsaUNBQWlDUyxJQUFBQSxtQkFBRyxDQUFBLENBQUM7Ozs7OztBQU1sRCxDQUFDO0FBRU0sTUFBTVIsNkJBQTZCUSxJQUFBQSxtQkFBRyxDQUFBLENBQUM7Ozs7OztBQU05QyxDQUFDO0FBRU0sTUFBTVAsc0JBQXNCTyxJQUFBQSxtQkFBRyxDQUFBLENBQUM7Ozs7OztBQU12QyxDQUFDO0FBRU0sTUFBTVgsNkJBQTZCVyxJQUFBQSxtQkFBRyxDQUFBLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNkI5QyxDQUFDO0FBRU0sTUFBTVosd0JBQXdCWSxJQUFBQSxtQkFBRyxDQUFBLENBQUM7Ozs7OztBQU16QyxDQUFDIn0=

}),
17696: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/* globals window, document, HTMLInputElement */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    applyDiscount: function() {
        return applyDiscount;
    },
    beforeUnloadHandler: function() {
        return beforeUnloadHandler;
    },
    createAttemptSubmitOrderRequest: function() {
        return createAttemptSubmitOrderRequest;
    },
    createCustomDataMutation: function() {
        return createCustomDataMutation;
    },
    createOrderAddressMutation: function() {
        return createOrderAddressMutation;
    },
    createOrderIdentityMutation: function() {
        return createOrderIdentityMutation;
    },
    createOrderShippingMethodMutation: function() {
        return createOrderShippingMethodMutation;
    },
    createRecalcOrderEstimationsMutation: function() {
        return createRecalcOrderEstimationsMutation;
    },
    createStripePaymentMethodMutation: function() {
        return createStripePaymentMethodMutation;
    },
    createUpdateObfuscatedOrderAddressMutation: function() {
        return createUpdateObfuscatedOrderAddressMutation;
    },
    getOrderDataFromGraphQLResponse: function() {
        return getOrderDataFromGraphQLResponse;
    },
    initializeStripeElements: function() {
        return initializeStripeElements;
    },
    orderRequiresAdditionalAction: function() {
        return orderRequiresAdditionalAction;
    },
    redirectToOrderConfirmation: function() {
        return redirectToOrderConfirmation;
    },
    renderCheckoutFormContainers: function() {
        return renderCheckoutFormContainers;
    },
    showErrorMessageForError: function() {
        return showErrorMessageForError;
    },
    updateErrorMessage: function() {
        return updateErrorMessage;
    }
});
const _graphqltag = /*#__PURE__*/ _interop_require_default(__webpack_require__(28160));
const _commerceUtils = __webpack_require__(54556);
const _StyleMapObserver = /*#__PURE__*/ _interop_require_default(__webpack_require__(69147));
const _constants = __webpack_require__(10873);
const _rendering = __webpack_require__(91898);
const _webPaymentsEvents = __webpack_require__(94492);
const _checkoutMutations = __webpack_require__(94797);
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const syncStylesToStripeElement = (stripeElement)=>(appliedStyles)=>{
        stripeElement.update({
            style: _StyleMapObserver.default.appliedStylesToStripeElementStyles(appliedStyles)
        });
    };
const initializeStripeElements = (store)=>{
    if (window.Webflow.env('design') || window.Webflow.env('preview') || !store.isInitialized()) {
        return;
    }
    const checkoutFormContainers = (0, _commerceUtils.findAllElementsByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER);
    const cartWrappers = (0, _commerceUtils.findAllElementsByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_WRAPPER);
    const allStripeElements = [
        ...checkoutFormContainers,
        ...cartWrappers
    ];
    allStripeElements.forEach((element, index)=>{
        store.createElementsInstance(index);
        element.setAttribute(_constants.STRIPE_ELEMENT_INSTANCE, String(index));
    });
    const stripeElements = document.querySelectorAll(`[${_constants.STRIPE_ELEMENT_TYPE}]`);
    Array.from(stripeElements).forEach((element)=>{
        const type = element.getAttribute(_constants.STRIPE_ELEMENT_TYPE);
        if (!type) {
            throw new Error('Stripe element missing type string');
        }
        const checkoutFormContainer = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER, element);
        if (!checkoutFormContainer) {
            return;
        }
        const index = parseInt(// @ts-expect-error - TS2345 - Argument of type 'string | null' is not assignable to parameter of type 'string'.
        checkoutFormContainer.getAttribute(_constants.STRIPE_ELEMENT_INSTANCE), 10);
        const el = store.createElement(type, index, {
            style: (0, _commerceUtils.safeParseJson)(element.getAttribute(_constants.STRIPE_ELEMENT_STYLE) || '{}'),
            classes: {
                focus: '-wfp-focus'
            }
        });
        el.mount(element);
        // eslint-disable-next-line unused-imports/no-unused-vars, unused-imports/no-unused-vars
        const styleMapObserver = new _StyleMapObserver.default(element, {
            onChange: syncStylesToStripeElement(el)
        });
    });
};
const errorCodeToCheckoutErrorType = (code, msg)=>{
    switch(code){
        case 'OrderTotalRange':
            if (msg && msg.match(/too small/i)) {
                return 'minimum';
            } else {
                return 'info';
            }
        case 'OrderExtrasChanged':
            return 'extras';
        case 'PriceChanged':
            return 'pricing';
        case 'StripeRejected':
            return 'billing';
        case 'NeedShippingAddress':
        case 'InvalidShippingAddress':
        case 'NeedShippingMethod':
            return 'shipping';
        case 'NeedPaymentMethod':
        case 'StripeFailure':
            return 'payment';
        case 'ItemNotFound':
            return 'product';
        // 'InvalidDiscount' has been renamed to 'DiscountInvalid', but it needs
        // to be listed here to support sites that haven't been published since this change.
        case 'InvalidDiscount':
        case 'DiscountInvalid':
        case 'DiscountDoesNotExist':
            {
                return 'invalid-discount';
            }
        case 'DiscountExpired':
            {
                return 'expired-discount';
            }
        case 'DiscountUsageReached':
            {
                return 'usage-reached-discount';
            }
        case 'DiscountRequirementsNotMet':
            {
                return 'requirements-not-met';
            }
        default:
            return 'info';
    }
};
const getErrorType = (error)=>{
    if (error.graphQLErrors && error.graphQLErrors.length > 0) {
        return errorCodeToCheckoutErrorType(error.graphQLErrors[0].extensions?.code, error.graphQLErrors[0].message);
    }
    if (error.code) {
        return errorCodeToCheckoutErrorType(error.code, error.message);
    }
    return 'info';
};
const updateErrorMessage = (element, error)=>{
    const errorText = element.querySelector(_constants.CART_CHECKOUT_ERROR_MESSAGE_SELECTOR);
    if (!errorText) {
        return;
    }
    // Handle Stripe.js client-side errors. We use Stripe.js's error message
    // as this error typically indicates that the user forgot to enter part of
    // their CC, or entered invalid data. The more specific the error, the more
    // helpful it will be for the user.
    if (error.type && error.type === 'validation_error') {
        errorText.textContent = error.message;
        return;
    }
    const errorType = getErrorType(error);
    // Get the default error message incase the node does not have the error attribute yet.
    const errorData = // @ts-expect-error Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{...}'
    _constants.CHECKOUT_ERRORS[errorType.toUpperCase().replace(/\W/g, '_')] || {};
    const defaultErrorMessage = errorData.copy;
    const errorMessage = errorText.getAttribute((0, _constants.getCheckoutErrorMessageForType)(errorType)) || defaultErrorMessage;
    errorText.textContent = errorMessage;
    if (errorData.requiresRefresh) {
        errorText.setAttribute(_constants.NEEDS_REFRESH, 'true');
    } else {
        errorText.removeAttribute(_constants.NEEDS_REFRESH);
    }
    if (errorType === 'shipping') {
        updateRequiredFields(error);
    }
};
const elementNameByGraphQLError = {
    MISSING_STATE: 'address_state'
};
const updateRequiredFields = (error)=>{
    if (!error.graphQLErrors || error.graphQLErrors.length === 0) {
        return;
    }
    const invalidShippingAddressError = error.graphQLErrors.find(// @ts-expect-error - TS7006 - Parameter 'gqlError' implicitly has an 'any' type.
    (gqlError)=>gqlError.code === 'InvalidShippingAddress');
    if (!invalidShippingAddressError) {
        return;
    }
    // @ts-expect-error - TS7006 - Parameter 'problem' implicitly has an 'any' type.
    invalidShippingAddressError.problems.forEach((problem)=>{
        const { type } = problem;
        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{ readonly MISSING_STATE: "address_state"; }'.
        const elementName = elementNameByGraphQLError[type];
        if (!elementName) {
            return;
        }
        const element = document.getElementsByName(elementName)[0];
        if (!(element instanceof HTMLInputElement)) {
            return;
        }
        element.required = true;
        // IE11 doesn't support the reportValidity API
        if (typeof element.reportValidity === 'function') {
            element.reportValidity();
        }
    });
};
const showErrorMessageForError = (err, scope)=>{
    const errorState = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_ERROR_STATE, scope);
    if (errorState) {
        errorState.style.removeProperty('display');
        updateErrorMessage(errorState, err);
    }
};
const beforeUnloadHandler = (e)=>{
    e.preventDefault();
    e.returnValue = '';
};
const createOrderIdentityMutation = (apolloClient, email)=>apolloClient.mutate({
        mutation: _checkoutMutations.updateOrderIdentityMutation,
        variables: {
            email
        }
    });
const createOrderAddressMutation = (apolloClient, addressInfo)=>apolloClient.mutate({
        mutation: _checkoutMutations.updateOrderAddressMutation,
        variables: addressInfo
    });
const createOrderShippingMethodMutation = (apolloClient, id)=>apolloClient.mutate({
        mutation: _checkoutMutations.updateOrderShippingMethodMutation,
        variables: {
            id
        }
    });
const createCustomDataMutation = (apolloClient, customData)=>apolloClient.mutate({
        mutation: _checkoutMutations.updateCustomData,
        variables: {
            customData
        }
    });
const createStripePaymentMethodMutation = (apolloClient, id)=>apolloClient.mutate({
        mutation: _checkoutMutations.updateOrderStripePaymentMethodMutation,
        variables: {
            paymentMethod: id
        }
    });
const createRecalcOrderEstimationsMutation = (apolloClient)=>apolloClient.mutate({
        mutation: _checkoutMutations.recalcOrderEstimationsMutation,
        errorPolicy: 'ignore'
    });
const createUpdateObfuscatedOrderAddressMutation = (apolloClient, addressInfo)=>apolloClient.mutate({
        mutation: _checkoutMutations.updateObfuscatedOrderAddressMutation,
        variables: addressInfo
    });
const renderCheckout = (checkout, data, prevFocusedInput)=>{
    (0, _rendering.renderTree)(checkout, data);
    const shippingMethodsList = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_LIST, checkout);
    const shippingMethodsEmpty = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_EMPTY_STATE, checkout);
    const shippingAddressWrapper = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_WRAPPER, checkout);
    const billingAddressWrapper = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_WRAPPER, checkout);
    const billingAddressToggle = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_TOGGLE_CHECKBOX, checkout);
    const paymentInfoWrapper = checkout.querySelector('.w-commerce-commercecheckoutpaymentinfowrapper');
    if (!(shippingMethodsList instanceof Element) || !(shippingAddressWrapper instanceof Element) || !(billingAddressWrapper instanceof Element) || !(billingAddressToggle instanceof HTMLInputElement) || !(paymentInfoWrapper instanceof Element)) {
        return;
    }
    if (data.data && data.data.database && data.data.database.commerceOrder) {
        const { data: { database: { commerceOrder: { availableShippingMethods, statusFlags: { requiresShipping, isFreeOrder, shippingAddressRequiresPostalCode, billingAddressRequiresPostalCode, hasSubscription } } } } } = data;
        const shippingZipField = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_ZIP_FIELD, shippingAddressWrapper);
        if (shippingZipField instanceof HTMLInputElement) {
            shippingZipField.required = shippingAddressRequiresPostalCode;
        }
        const billingZipField = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_ZIP_FIELD, billingAddressWrapper);
        if (billingZipField instanceof HTMLInputElement) {
            billingZipField.required = billingAddressRequiresPostalCode;
        }
        const paypalElement = document.querySelector(`[${_constants.PAYPAL_ELEMENT_INSTANCE}]`);
        const paypalButton = checkout.querySelector(`[${_constants.PAYPAL_BUTTON_ELEMENT_INSTANCE}]`);
        if (paypalElement && paypalButton) {
            if (isFreeOrder || hasSubscription) {
                // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                (0, _commerceUtils.hideElement)(paypalButton);
            } else {
                // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                (0, _commerceUtils.showElement)(paypalButton);
            }
        }
        // Edge case: need to make sure if billing address is hidden because of default "same as shipping" checked, but
        // toggle itself is hidden because doesn't require shipping, the billing address is still visible
        if (!requiresShipping && billingAddressToggle.checked && billingAddressToggle.parentElement && billingAddressToggle.parentElement.classList.contains('w-condition-invisible')) {
            (0, _commerceUtils.showElement)(billingAddressWrapper);
        }
        if (!availableShippingMethods || availableShippingMethods.length < 1) {
            (0, _commerceUtils.hideElement)(shippingMethodsList);
            // TODO: remove this ugliness when we've properly constrained & restructured the checkout form
            // It is possible to remove the empty state so we can't return early, but don't want to crash here
            if (shippingMethodsEmpty instanceof Element) {
                (0, _commerceUtils.showElement)(shippingMethodsEmpty);
            }
        } else {
            // TODO remove after migration
            if (shippingMethodsEmpty instanceof Element) {
                (0, _commerceUtils.hideElement)(shippingMethodsEmpty);
            }
            (0, _commerceUtils.showElement)(shippingMethodsList);
        }
        if (isFreeOrder) {
            // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
            (0, _commerceUtils.hideElement)(paymentInfoWrapper);
        } else if (!isFreeOrder && // @ts-expect-error - TS2339 - Property 'style' does not exist on type 'Element'.
        paymentInfoWrapper.style.getPropertyValue('display') === 'none') {
            // was previously hidden
            // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
            (0, _commerceUtils.showElement)(paymentInfoWrapper);
        }
    } else {
        (0, _commerceUtils.hideElement)(shippingMethodsList);
        // TODO remove after migration
        if (shippingMethodsEmpty instanceof Element) {
            (0, _commerceUtils.showElement)(shippingMethodsEmpty);
        }
        // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
        (0, _commerceUtils.showElement)(paymentInfoWrapper);
    }
    if (data.errors.length === 0 && prevFocusedInput) {
        let prevFocusedInputEle = document.getElementById(prevFocusedInput);
        if (!prevFocusedInputEle) {
            prevFocusedInputEle = document.querySelector(`[data-wf-bindings="${prevFocusedInput}"]`);
        }
        if (prevFocusedInputEle) {
            prevFocusedInputEle.focus();
        }
    }
};
const runRenderOnCheckoutElement = (checkoutFormContainer, data, errors, stripeStore, prevFocusedInput)=>{
    renderCheckout(checkoutFormContainer, {
        ...data,
        errors: errors.concat(data.errors).filter(Boolean)
    }, prevFocusedInput);
    if (stripeStore) {
        (0, _webPaymentsEvents.updateWebPaymentsButton)(checkoutFormContainer, data, stripeStore);
    }
};
const renderCheckoutFormContainers = (checkoutFormContainers, errors, apolloClient, stripeStore, prevFocusedInput)=>{
    if (checkoutFormContainers.length === 0) {
        return;
    }
    checkoutFormContainers.forEach((checkoutFormContainer)=>{
        const queryOptions = {
            query: (0, _graphqltag.default)`
        ${checkoutFormContainer.getAttribute(_constants.CHECKOUT_QUERY)}
      `,
            fetchPolicy: 'network-only',
            // errorPolicy is set to `all` so that we continue to get the cart data when an error occurs
            // this is important in cases like when the address entered doesn't have a shipping zone, as that returns
            // a graphQL error, but we still want to render what the customer has entered
            errorPolicy: 'all'
        };
        apolloClient.query(queryOptions).then((data)=>{
            if (data.data && data.data.database && data.data.database.commerceOrder && data.data.database.commerceOrder.availableShippingMethods) {
                const { data: { database: { commerceOrder: { availableShippingMethods, statusFlags: { requiresShipping } } } } } = data;
                const selectedMethod = availableShippingMethods.find(// @ts-expect-error - TS7006 - Parameter 'method' implicitly has an 'any' type.
                (method)=>method.selected === true);
                if (!selectedMethod && requiresShipping) {
                    const id = availableShippingMethods[0] ? availableShippingMethods[0].id : null;
                    return createOrderShippingMethodMutation(apolloClient, id).then(()=>{
                        return createRecalcOrderEstimationsMutation(apolloClient);
                    }).then(()=>{
                        return apolloClient.query(queryOptions);
                    }).then((newData)=>{
                        runRenderOnCheckoutElement(checkoutFormContainer, newData, errors, stripeStore, prevFocusedInput);
                    });
                }
            }
            if (data.data && data.data.database && data.data.database.commerceOrder && data.data.database.commerceOrder.statusFlags && data.data.database.commerceOrder.statusFlags.shouldRecalc) {
                return createRecalcOrderEstimationsMutation(apolloClient).then(()=>{
                    return apolloClient.query(queryOptions);
                }).then((newData)=>{
                    runRenderOnCheckoutElement(checkoutFormContainer, newData, errors, stripeStore, prevFocusedInput);
                });
            } else {
                runRenderOnCheckoutElement(checkoutFormContainer, data, errors, stripeStore, prevFocusedInput);
            }
        }).catch((err)=>{
            errors.push(err);
            renderCheckout(checkoutFormContainer, {
                errors
            }, prevFocusedInput);
        });
    });
};
const createAttemptSubmitOrderRequest = (apolloClient, variables)=>{
    return apolloClient.mutate({
        mutation: _checkoutMutations.attemptSubmitOrderMutation,
        variables
    });
};
const getOrderDataFromGraphQLResponse = (data)=>{
    return data && data.data && data.data.ecommerceAttemptSubmitOrder;
};
const orderRequiresAdditionalAction = (status)=>status === _constants.REQUIRES_ACTION;
const redirectToOrderConfirmation = (order, isPayPal = false)=>{
    const redirectUrl = `/order-confirmation?orderId=${order.orderId}&token=${order.token}`;
    if (isPayPal) {
        const message = {
            isWebflow: true,
            type: 'success',
            detail: redirectUrl
        };
        window.parent.postMessage(JSON.stringify(message), window.location.origin);
    } else {
        window.location.href = redirectUrl;
    }
};
const applyDiscount = (apolloClient, variables)=>{
    return apolloClient.mutate({
        mutation: _checkoutMutations.applyDiscountMutation,
        variables
    });
};

//# sourceMappingURL=data:application/json;base64,

}),
54556: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/* globals document, window, CustomEvent */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    addLoadingCallback: function() {
        return addLoadingCallback;
    },
    customDataFormToArray: function() {
        return customDataFormToArray;
    },
    executeLoadingCallbacks: function() {
        return executeLoadingCallbacks;
    },
    fetchOrderStatusFlags: function() {
        return fetchOrderStatusFlags;
    },
    findAllElementsByNodeType: function() {
        return findAllElementsByNodeType;
    },
    findClosestElementByClassName: function() {
        return findClosestElementByClassName;
    },
    findClosestElementByNodeType: function() {
        return findClosestElementByNodeType;
    },
    findClosestElementWithAttribute: function() {
        return findClosestElementWithAttribute;
    },
    findElementByNodeType: function() {
        return findElementByNodeType;
    },
    formToObject: function() {
        return formToObject;
    },
    hasSubscription: function() {
        return hasSubscription;
    },
    hideElement: function() {
        return hideElement;
    },
    isFreeOrder: function() {
        return isFreeOrder;
    },
    isProductionLikeEnv: function() {
        return isProductionLikeEnv;
    },
    isProtocolHttps: function() {
        return isProtocolHttps;
    },
    safeParseJson: function() {
        return safeParseJson;
    },
    setElementLoading: function() {
        return setElementLoading;
    },
    showElement: function() {
        return showElement;
    },
    trackOrder: function() {
        return trackOrder;
    },
    triggerRender: function() {
        return triggerRender;
    }
});
const _graphqltag = /*#__PURE__*/ _interop_require_default(__webpack_require__(28160));
const _constants = __webpack_require__(10873);
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const safeParseJson = (jsonString)=>{
    let json = null;
    try {
        if (jsonString != null) {
            json = JSON.parse(decodeURIComponent(jsonString));
        }
    } catch (e) {
        if (!(e instanceof SyntaxError && e.message.match(/\bJSON\b/i))) {
            throw e;
        }
    } finally{
        return json;
    }
};
const findElementByNodeType = (type, scope = document)=>{
    // @ts-expect-error - TS2322 - Type 'Element | null' is not assignable to type 'HTMLElement | null | undefined'.
    return scope.querySelector(`[${_constants.DATA_ATTR_NODE_TYPE}="${type}"]`);
};
const findAllElementsByNodeType = (type, scope = document)=>{
    return Array.from(scope.querySelectorAll(`[${_constants.DATA_ATTR_NODE_TYPE}="${type}"]`));
};
const findClosestElementByNodeType = (nodeType, element)=>{
    let target = element;
    while(target){
        if (target instanceof Element && target.getAttribute(_constants.DATA_ATTR_NODE_TYPE) === nodeType) {
            return target;
        } else {
            // @ts-expect-error - TS2322 - Type 'HTMLElement | null' is not assignable to type 'EventTarget'.
            target = target instanceof Element ? target.parentElement : null;
        }
    }
    return target;
};
const findClosestElementWithAttribute = (dataAttribute, element)=>{
    let target = element;
    while(target){
        if (target instanceof Element && target.hasAttribute(dataAttribute)) {
            return target;
        } else {
            // @ts-expect-error - TS2322 - Type 'HTMLElement | null' is not assignable to type 'EventTarget'.
            target = target instanceof Element ? target.parentElement : null;
        }
    }
    return target;
};
const findClosestElementByClassName = (className, element)=>{
    let target = element;
    while(target){
        if (target instanceof Element && target.classList.contains(className)) {
            return target;
        } else {
            // @ts-expect-error - TS2322 - Type 'HTMLElement | null' is not assignable to type 'EventTarget'.
            target = target instanceof Element ? target.parentElement : null;
        }
    }
    return target;
};
const triggerRender = (error, isInitial = false)=>{
    const renderEvent = new CustomEvent(_constants.RENDER_TREE_EVENT, {
        detail: {
            error,
            isInitial
        }
    });
    window.dispatchEvent(renderEvent);
};
const isProductionLikeEnv = ()=> true || 0;
const isProtocolHttps = ()=>!isProductionLikeEnv() || window.location.protocol === 'https:';
const formToObject = (form, toString)=>{
    const values = {};
    // @ts-expect-error - TS2345 - Argument of type '(element: ElementWithValue) => void' is not assignable to parameter of type '(value: Element, index: number, array: Element[]) => void'.
    Array.from(form.elements).forEach((element)=>{
        const name = element.getAttribute('name');
        if (name && name !== '') {
            const value = toString ? String(element.value).trim() : element.value;
            values[name] = value == null || value === '' ? null : value;
        }
    });
    return values;
};
const customDataFormToArray = (form)=>{
    // @ts-expect-error - TS7034 - Variable 'customData' implicitly has type 'any[]' in some locations where its type cannot be determined.
    const customData = [];
    if (!form || !(form instanceof HTMLFormElement)) {
        // @ts-expect-error - TS7005 - Variable 'customData' implicitly has an 'any[]' type.
        return customData;
    }
    Array.from(form.elements).forEach(// @ts-expect-error - TS2345 - Argument of type '(element: HTMLElement | HTMLInputElement | HTMLTextAreaElement) => void' is not assignable to parameter of type '(value: Element, index: number, array: Element[]) => void'.
    (element)=>{
        const name = element.getAttribute('name');
        if (element instanceof HTMLTextAreaElement && element.value) {
            customData.push({
                name: name ? name : 'Textarea',
                textArea: element.value
            });
        } else if (element instanceof HTMLInputElement) {
            if (element.type === 'checkbox') {
                customData.push({
                    name: name ? name : 'Checkbox',
                    checkbox: element.checked
                });
            } else if (element.value) {
                customData.push({
                    name: name ? name : 'Text Input',
                    textInput: element.value
                });
            }
        }
    });
    // @ts-expect-error - TS7005 - Variable 'customData' implicitly has an 'any[]' type.
    return customData;
};
const setElementLoading = (el)=>{
    // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
    const tr = window.Webflow.tram(el);
    tr.set({
        opacity: 0.2
    });
    tr.add('opacity 500ms ease-in-out');
    const animate = ()=>{
        tr.start({
            opacity: 0.2
        }).then({
            opacity: 0.4
        }).then(animate);
    };
    animate();
    return ()=>tr.destroy();
};
const loadingCallbacks = [];
const addLoadingCallback = (cb)=>{
    loadingCallbacks.push(cb);
};
const executeLoadingCallbacks = ()=>{
    let finishLoading;
    while((finishLoading = loadingCallbacks.shift()) !== undefined){
        finishLoading();
    }
};
const isFreeOrder = (response)=>response && response.data && response.data.database && response.data.database.commerceOrder && response.data.database.commerceOrder.statusFlags && response.data.database.commerceOrder.statusFlags.isFreeOrder === true;
const hasSubscription = (response)=>response && response.data && response.data.database && response.data.database.commerceOrder && response.data.database.commerceOrder.statusFlags && response.data.database.commerceOrder.statusFlags.hasSubscription === true;
const showElement = (element)=>element.style.removeProperty('display');
const hideElement = (element)=>element.style.setProperty('display', 'none');
// the @client directive ensures we only fetch this from the local cache so that we don't wait on network
// we can only use this safely inside a rendered cart/checkout/confirmation container
// as to render that view, a query had to be made which *always* includes the flags listed below.
// if you are adding new flags to this, please ensure that the flags are *always* included
// for all types of commerce elements in `packages/systems/dynamo/utils/DynamoQuery/DynamoQuery.js`
const orderStatusFlagsQuery = (0, _graphqltag.default)`
  query FetchCartInfo {
    database @client {
      id
      commerceOrder {
        id
        statusFlags {
          requiresShipping
          isFreeOrder
          hasSubscription
        }
      }
    }
  }
`;
const fetchOrderStatusFlags = (apolloClient)=>apolloClient.query({
        query: orderStatusFlagsQuery
    }).then((data)=>{
        return data && data.data && data.data.database && data.data.database.commerceOrder && data.data.database.commerceOrder.statusFlags;
    });
const acceptedOrderDataQuery = (0, _graphqltag.default)`
  query FetchAcceptedOrderData(
    $finalizedOrder: commerce_order_finalized_order_args
  ) {
    database {
      id
      commerceOrder(finalizedOrder: $finalizedOrder) {
        id
        total {
          decimalValue
          unit
        }
        userItems {
          id
          count
          product {
            id
            f_name_
          }
          sku {
            id
          }
          price {
            decimalValue
          }
        }
      }
    }
  }
`;
const fetchAcceptedOrderData = (apolloClient, finalizedOrder)=>apolloClient.query({
        query: acceptedOrderDataQuery,
        variables: {
            finalizedOrder
        }
    }).then((data)=>data?.data?.database?.commerceOrder);
const trackOrder = (apolloClient, finalizedOrder)=>{
    // early return if both facebook and google don't exist on the page
    // we don't need to fetch this data if we're not doing any analytics
    if (typeof fbq === 'undefined' && typeof gtag === 'undefined') {
        return;
    }
    // check to see if this order was tracked already, and if it was, return early
    let trackedOrders = {};
    try {
        const storedTrackedOrders = window.localStorage.getItem('wf-seen-orders');
        if (storedTrackedOrders) {
            trackedOrders = JSON.parse(storedTrackedOrders);
        }
    } catch (err) {
        return;
    }
    if (trackedOrders[finalizedOrder.orderId]) {
        return;
    }
    // we have to fetch the accepted order data, instead of relying on the pending order data
    // that's fetched on the order confirmation page, because we only get the purchased items
    // data if the user has an Order Items element on the page. while i would presume that most
    // people would keep that element on the page, it's not a guarantee, so we need to separately
    // fetch it here to ensure that we always send the analytics, regardless of how the user has
    // customized their order confirmation page.
    fetchAcceptedOrderData(apolloClient, finalizedOrder).then((order)=>{
        if (!order) {
            return;
        }
        const { decimalValue, unit } = order.total;
        if (typeof fbq !== 'undefined' && typeof fbq === 'function') {
            fbq('track', 'Purchase', {
                value: decimalValue,
                currency: unit,
                // @ts-expect-error - TS7006 - Parameter 'item' implicitly has an 'any' type.
                content_ids: (order.userItems || []).map((item)=>item.sku.id),
                content_type: 'product',
                // @ts-expect-error - TS7006 - Parameter 'item' implicitly has an 'any' type.
                contents: (order.userItems || []).map((item)=>({
                        id: item.sku.id,
                        quantity: item.count,
                        item_price: item.price.decimalValue
                    }))
            });
        }
        if (typeof gtag !== 'undefined' && typeof gtag === 'function') {
            gtag('event', 'purchase', {
                transaction_id: order.id,
                value: decimalValue,
                currency: unit,
                // @ts-expect-error - TS7006 - Parameter 'item' implicitly has an 'any' type.
                items: (order.userItems || []).map((item)=>({
                        id: item.sku.id,
                        name: item.product.f_name_,
                        quantity: item.count,
                        price: item.price.decimalValue
                    }))
            });
        }
        trackedOrders[finalizedOrder.orderId] = true;
        try {
            window.localStorage.setItem('wf-seen-orders', JSON.stringify(trackedOrders));
        } catch (err) {
            return;
        }
    });
};

//# sourceMappingURL=data:application/json;base64,

}),
14155: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "PillGroups", ({
    enumerable: true,
    get: function() {
        return PillGroups;
    }
}));
const _constants = __webpack_require__(10873);
const KEY_CODES = Object.freeze({
    RETURN: 13,
    SPACE: 32,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40
});
class PillGroups {
    form;
    pillGroups;
    onSelect;
    static hasPillGroups(form) {
        return form.querySelectorAll(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_PILL_GROUP}"]`).length > 0;
    }
    constructor(form, onSelect){
        this.form = form;
        this.pillGroups = {};
        this.onSelect = onSelect;
    }
    init() {
        const groupNodes = this.form.querySelectorAll(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_PILL_GROUP}"]`);
        for (const group of groupNodes){
            // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
            const pillGroup = new PillGroup(group, this.onSelect, this);
            pillGroup.init();
            this.pillGroups[pillGroup.optionSetId] = pillGroup;
        }
    }
    setSelectedPillsForSkuValues(skuValues) {
        for (const optionSetId of Object.keys(skuValues)){
            const optionId = skuValues[optionSetId];
            const pillGroup = this.pillGroups[optionSetId];
            if (pillGroup) {
                const pill = pillGroup.findPillById(String(optionId));
                pillGroup.updatePillsWithNewSelected(pill);
            }
        }
    }
}
class PillGroup {
    node;
    optionSetId;
    onSelect;
    pills;
    groups;
    constructor(node, onSelect, groups){
        this.node = node;
        this.optionSetId = String(node.getAttribute(_constants.DATA_ATTR_COMMERCE_OPTION_SET_ID));
        this.onSelect = onSelect;
        this.pills = [];
        this.groups = groups;
    }
    get firstEnabledPill() {
        // find returns the first one it finds, and the pills are in order
        return this.pills.find((pill)=>pill.disabled === false);
    }
    // hacky fake option set compat
    get value() {
        const possiblePill = this.pills.find((pill)=>pill.checked === true);
        return possiblePill ? possiblePill.value : '';
    }
    // hacky fake option set compat
    get options() {
        return this.pills;
    }
    // hacky fake option set compat
    // eslint-disable-next-line accessor-pairs
    set selectedIndex(index) {
        const pill = this.pills[index] || null;
        // @ts-expect-error - TS2345 - Argument of type 'Pill | null' is not assignable to parameter of type 'Pill'.
        this.emitSelected(pill);
    }
    // hacky fake option set compat
    // we only want to support the one DOM attribute, which we have on this group, just not
    // directly exposed, as we don't directly expose the DOM element for the group
    getAttribute(attr) {
        if (attr === _constants.DATA_ATTR_COMMERCE_OPTION_SET_ID) {
            return this.optionSetId;
        } else {
            throw new Error(`PillGroup: Attempted to fetch unsupported attribute ${attr}`);
        }
    }
    init() {
        const pills = this.node.querySelectorAll(`[${_constants.DATA_ATTR_NODE_TYPE}="${_constants.NODE_TYPE_COMMERCE_ADD_TO_CART_PILL}"]`);
        this.pills = Array.from(pills).map((pillNode)=>{
            // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
            const pill = new Pill(pillNode, this);
            pill.init();
            return pill;
        });
        // if this group has any enabled pills, we set the first one's tab index so it can be focused
        if (this.firstEnabledPill) {
            this.firstEnabledPill.tabIndex = 0;
        }
        // @zach: store reference to this group on the node so we can access it later
        // we shouldn't be doing this but it's a lot easier than creating some global store
        // i tried the global store method first but the problem is our instance IDs are just the product IDs
        // so if you have two ATCs for the same product, they'd overwrite each other, and only one option list would work
        // so just storing it on the DOM element, and then grabbing it when updating all the option sets is a lot easier :)
        // @ts-expect-error - TS2339 - Property '_wfPillGroup' does not exist on type 'HTMLElement'.
        this.node._wfPillGroup = this;
    }
    findPillById(optionId) {
        return this.pills.find((pill)=>pill.optionId === optionId);
    }
    updatePillsWithNewSelected(selectedPill) {
        // we unselect all of the pills in the pill group
        for (const pill of this.pills){
            pill.tabIndex = -1;
            pill.checked = false;
        }
        if (selectedPill instanceof Pill) {
            // if passed a pill, we give it the proper tab index, and set the aria checked
            selectedPill.tabIndex = 0;
            selectedPill.checked = true;
        } else {
            // if not passed a pill, we're deselecting any option in this group
            // so we call set the tabIndex to the first enabled pill,
            // so tab focus goes back to the first pill on the next enter
            if (this.firstEnabledPill) {
                this.firstEnabledPill.tabIndex = 0;
            }
        }
    }
    emitSelected(selectedPill) {
        this.onSelect({
            optionId: selectedPill.optionId,
            optionSetId: this.optionSetId,
            groups: Object.values(this.groups.pillGroups)
        });
    }
    traverseAndEmitSelected(currentPill, direction) {
        const currentIndex = this.pills.indexOf(currentPill);
        let found = false;
        let idx = currentIndex;
        let nextIndex;
        while(!found){
            if (direction === 'previous') {
                nextIndex = idx - 1;
                // if we reached the start of the list, go to the end
                if (nextIndex < 0) {
                    nextIndex = this.pills.length - 1;
                }
            } else if (direction === 'next') {
                nextIndex = idx + 1;
                // if we reached the end of the list, go to the start
                if (nextIndex === this.pills.length) {
                    nextIndex = 0;
                }
            } else {
                throw new Error(`Unknown pill traversal direction "${direction}", use "previous" or "next"`);
            }
            // if we're back at the pill we started with, we went through the entire list
            // and didn't find any other enabled pills, so we keep this one selected
            if (nextIndex === currentIndex) {
                break;
            }
            const pill = this.pills[nextIndex];
            // @ts-expect-error - TS18048 - 'pill' is possibly 'undefined'.
            if (!pill.disabled) {
                // if the next pill is enabled, we emit it as selected, focus it now that we know what pill should be
                // and finally, break the loop
                // @ts-expect-error - TS2345 - Argument of type 'Pill | undefined' is not assignable to parameter of type 'Pill'.
                this.emitSelected(pill);
                // @ts-expect-error - TS18048 - 'pill' is possibly 'undefined'.
                pill.focus();
                found = true;
            } else {
                // otherwise, we increment our loop index, so we can start the loop again
                // and check the next pill
                idx = nextIndex;
            }
        }
    }
}
class Pill {
    node;
    optionId;
    group;
    constructor(node, group){
        this.node = node;
        this.optionId = String(this.node.getAttribute('data-option-id'));
        this.group = group;
    }
    init() {
        this.tabIndex = -1;
        this.checked = false;
        this.node.addEventListener('keydown', this.handleKeyDown);
        this.node.addEventListener('click', this.handleClick);
    }
    get tabIndex() {
        return this.node.tabIndex;
    }
    set tabIndex(index) {
        this.node.tabIndex = index;
    }
    get value() {
        return this.optionId;
    }
    get checked() {
        return this.node.getAttribute('aria-checked') === 'true';
    }
    set checked(checked) {
        this.node.setAttribute('aria-checked', String(checked));
        if (checked) {
            this.node.classList.add('w--ecommerce-pill-selected');
        } else {
            this.node.classList.remove('w--ecommerce-pill-selected');
        }
    }
    get disabled() {
        return this.node.getAttribute('aria-disabled') === 'true';
    }
    set disabled(disabled) {
        this.node.setAttribute('aria-disabled', String(disabled));
        if (disabled) {
            // if we pragmatically disable a pill, we want to make sure it's not checked
            // and that it can't be focused by the browser
            this.node.classList.add('w--ecommerce-pill-disabled');
            this.checked = false;
            this.tabIndex = -1;
        } else {
            this.node.classList.remove('w--ecommerce-pill-disabled');
        }
    }
    get enabled() {
        return !this.disabled;
    }
    set enabled(enabled) {
        this.disabled = !enabled;
    }
    focus() {
        this.node.focus();
    }
    handleKeyDown = (ev)=>{
        let eventHandled = false;
        // we don't want to handle events when holding down alt or cmd
        // as these are navigation shortcuts that we don't want to break
        if (ev.altKey || ev.metaKey) {
            return;
        }
        switch(ev.keyCode){
            // return and space should act like a click on the pill, selecting/deselecting as needed
            case KEY_CODES.RETURN:
            case KEY_CODES.SPACE:
                this.handleClick();
                eventHandled = true;
                break;
            // up and left go to the previous pill in the group
            case KEY_CODES.UP:
            case KEY_CODES.LEFT:
                this.group.traverseAndEmitSelected(this, 'previous');
                eventHandled = true;
                break;
            // down and right go to the next pill in the group
            case KEY_CODES.DOWN:
            case KEY_CODES.RIGHT:
                this.group.traverseAndEmitSelected(this, 'next');
                eventHandled = true;
                break;
            default:
                break;
        }
        // we only want to stop keyboard events for the keys we're trying to intercept
        if (eventHandled) {
            ev.stopPropagation();
            ev.preventDefault();
        }
    };
    handleClick = ()=>{
        if (this.disabled || this.checked) {
            return;
        }
        this.focus();
        this.group.emitSelected(this);
    };
}

//# sourceMappingURL=data:application/json;base64,

}),
85986: (function (__unused_webpack_module, exports) {
"use strict";
// Added a Flow type here since
// our bundle builder when stripping Flow types
// uses a newer version of flow-parser (0.203)
// which requires a variable declaration to have
// a type
// eslint-disable-next-line no-var

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return _default;
    }
}));
const _default = {
    log: (...args)=>{
        if (false) {}
    },
    error: (...args)=>{
        if (false) {}
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlYnVnLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEFkZGVkIGEgRmxvdyB0eXBlIGhlcmUgc2luY2Vcbi8vIG91ciBidW5kbGUgYnVpbGRlciB3aGVuIHN0cmlwcGluZyBGbG93IHR5cGVzXG4vLyB1c2VzIGEgbmV3ZXIgdmVyc2lvbiBvZiBmbG93LXBhcnNlciAoMC4yMDMpXG4vLyB3aGljaCByZXF1aXJlcyBhIHZhcmlhYmxlIGRlY2xhcmF0aW9uIHRvIGhhdmVcbi8vIGEgdHlwZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXZhclxuZGVjbGFyZSB2YXIgcHJvY2VzczogYW55O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGxvZzogKC4uLmFyZ3M6IEFycmF5PHVua25vd24+KSA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICBjb25zb2xlLmxvZyguLi5hcmdzKTtcbiAgICB9XG4gIH0sXG4gIGVycm9yOiAoLi4uYXJnczogQXJyYXk8dW5rbm93bj4pID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgIGNvbnNvbGUubG9nKC4uLmFyZ3MpO1xuICAgIH1cbiAgfSxcbn07XG4iXSwibmFtZXMiOlsibG9nIiwiYXJncyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImNvbnNvbGUiLCJlcnJvciJdLCJtYXBwaW5ncyI6IkFBQUEsK0JBQStCO0FBQy9CLCtDQUErQztBQUMvQyw4Q0FBOEM7QUFDOUMsZ0RBQWdEO0FBQ2hELFNBQVM7QUFDVCxrQ0FBa0M7Ozs7OytCQUdsQzs7O2VBQUE7OztNQUFBLFdBQWU7SUFDYkEsS0FBSyxDQUFDLEdBQUdDO1FBQ1AsSUFBSUMsUUFBUUMsR0FBRyxDQUFDQyxRQUFRLEtBQUssZUFBZTtZQUMxQ0MsUUFBUUwsR0FBRyxJQUFJQztRQUNqQjtJQUNGO0lBQ0FLLE9BQU8sQ0FBQyxHQUFHTDtRQUNULElBQUlDLFFBQVFDLEdBQUcsQ0FBQ0MsUUFBUSxLQUFLLGVBQWU7WUFDMUNDLFFBQVFMLEdBQUcsSUFBSUM7UUFDakI7SUFDRjtBQUNGIn0=

}),
48873: (function (__unused_webpack_module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "default", ({
    enumerable: true,
    get: function() {
        return EventHandlerProxyWithApolloClient;
    }
}));
// @ts-expect-error - TS7023 - 'enumeratePrototypeProps' implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions.
const enumeratePrototypeProps = (obj, propNames = [])=>{
    if (obj == null) {
        return propNames;
    }
    return propNames.concat(enumeratePrototypeProps(Object.getPrototypeOf(obj)))// @ts-expect-error - TS2769 - No overload matches this call.
    .concat(Object.keys(obj));
};
const createEventProxy = (event, currentTarget)=>{
    // @ts-expect-error - TS2347 - Untyped function calls may not accept type arguments.
    const propertyDefinitions = enumeratePrototypeProps(event)// @ts-expect-error - TS7006 - Parameter 'propName' implicitly has an 'any' type.
    .filter((propName)=>propName !== 'currentTarget')// @ts-expect-error - TS7006 - Parameter 'proxies' implicitly has an 'any' type. | TS7006 - Parameter 'propName' implicitly has an 'any' type.
    .reduce((proxies, propName)=>{
        proxies[propName] = // @ts-expect-error Object.keys is "unsound", always infers `string` as output
        typeof event[propName] === 'function' ? // @ts-expect-error Object.keys is "unsound", always infers `string` as output
        {
            value: (...args)=>event[propName](...args)
        } : // @ts-expect-error Object.keys is "unsound", always infers `string` as output
        {
            get: ()=>event[propName]
        };
        return proxies;
    }, {});
    const retargetedEvent = Object.create(event, {
        // set currentTarget to the matched node:
        currentTarget: {
            value: currentTarget
        },
        ...propertyDefinitions
    });
    return retargetedEvent;
};
class EventHandlerProxyWithApolloClient {
    apolloClient;
    stripeStore;
    eventHandlers;
    constructor(apolloClient, stripeStore){
        this.eventHandlers = {};
        this.apolloClient = apolloClient;
        this.stripeStore = stripeStore;
    }
    on = (eventName, eventMatcher, handler)=>{
        const existingHandlers = this.eventHandlers[eventName] instanceof Array ? this.eventHandlers[eventName] : [];
        this.eventHandlers[eventName] = [
            ...existingHandlers,
            this.createHandlerProxy(eventName, eventMatcher, handler)
        ];
        return this;
    };
    createHandlerProxy = (eventName, eventMatcher, handler)=>(event)=>{
            const match = eventMatcher(event);
            const eventProxy = match instanceof Element ? createEventProxy(event, match) : event;
            if (match) {
                handler(eventProxy, this.apolloClient, this.stripeStore);
            }
        };
    attachHandlers = (target)=>{
        Object.keys(this.eventHandlers).forEach((eventName)=>{
            const handlerProxies = this.eventHandlers[eventName];
            // @ts-expect-error - TS18048 - 'handlerProxies' is possibly 'undefined'.
            handlerProxies.forEach((handlerProxy)=>target.addEventListener(eventName, handlerProxy, true));
        });
        return this;
    };
    removeHandlers = (target)=>{
        Object.keys(this.eventHandlers).forEach((eventName)=>{
            const handlerProxies = this.eventHandlers[eventName];
            // @ts-expect-error - TS18048 - 'handlerProxies' is possibly 'undefined'.
            handlerProxies.forEach((handlerProxy)=>target.removeEventListener(eventName, handlerProxy, true));
        });
        return this;
    };
}

//# sourceMappingURL=data:application/json;base64,

}),
2330: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/* globals window, document */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    design: function() {
        return design;
    },
    destroy: function() {
        return destroy;
    },
    init: function() {
        return init;
    },
    preview: function() {
        return preview;
    }
});
__webpack_require__(84037);
__webpack_require__(68259);
__webpack_require__(60033);
__webpack_require__(9246);
__webpack_require__(67321);
__webpack_require__(52897);
__webpack_require__(233);
__webpack_require__(49754);
__webpack_require__(30971);
__webpack_require__(62374);
__webpack_require__(55152);
__webpack_require__(35273);
__webpack_require__(30172);
__webpack_require__(65723);
__webpack_require__(48258);
__webpack_require__(89433);
const _apolloClient = __webpack_require__(25195);
const _eventHandlerProxyWithApolloClient = /*#__PURE__*/ _interop_require_default(__webpack_require__(48873));
const _addToCartEvents = /*#__PURE__*/ _interop_require_default(__webpack_require__(84303));
const _cartEvents = /*#__PURE__*/ _interop_require_default(__webpack_require__(82150));
const _checkoutEvents = /*#__PURE__*/ _interop_require_default(__webpack_require__(82333));
const _orderConfirmationEvents = /*#__PURE__*/ _interop_require_default(__webpack_require__(45870));
const _webPaymentsEvents = /*#__PURE__*/ _interop_require_default(__webpack_require__(94492));
const _stripeStore = __webpack_require__(5841);
const _commerceUtils = __webpack_require__(54556);
__webpack_require__(67304);
__webpack_require__(14362);
const _checkoutUtils = __webpack_require__(17696);
const _paypalEvents = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(86365));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const GQL_QUERY_PATH = '/.wf_graphql/apollo';
// @ts-expect-error - TS7034 - Variable 'handlerProxy' implicitly has type 'any' in some locations where its type cannot be determined.
let handlerProxy;
// @ts-expect-error - TS7034 - Variable 'apolloClient' implicitly has type 'any' in some locations where its type cannot be determined.
let apolloClient;
let stripeStore;
function attachHandlers() {
    // @ts-expect-error - TS7005 - Variable 'handlerProxy' implicitly has an 'any' type.
    handlerProxy && handlerProxy.attachHandlers(window);
}
function detachHandlers() {
    // @ts-expect-error - TS7005 - Variable 'handlerProxy' implicitly has an 'any' type.
    handlerProxy && handlerProxy.removeHandlers(window);
}
// Can be called from published sites or the Designer engine
// Published sites: call point is defined in /models/site.js
// Designer: call point is in CommerceProxyEngine
function init({ siteId }) {
    const designerOrPreview = window.Webflow.env('design') || window.Webflow.env('preview');
    apolloClient = (0, _apolloClient.createApolloClient)({
        path: designerOrPreview ? `/api/v2/sites/${siteId}/apollo` : GQL_QUERY_PATH,
        retryConfig: {
            maxAttempts: 5
        },
        useCsrf: true,
        // Disable batching with reverse proxy. Solves an edge case in E-commerce
        // where legacy and new queries are mixed in the same batch.
        disableBatching: !designerOrPreview
    });
    stripeStore = new _stripeStore.StripeStore(document);
    handlerProxy = new _eventHandlerProxyWithApolloClient.default(apolloClient, stripeStore);
    _addToCartEvents.default.register(handlerProxy);
    _cartEvents.default.register(handlerProxy);
    _checkoutEvents.default.register(handlerProxy);
    _orderConfirmationEvents.default.register(handlerProxy);
    _webPaymentsEvents.default.register(handlerProxy);
    _paypalEvents.default.register(handlerProxy);
    (0, _checkoutUtils.initializeStripeElements)(stripeStore);
    detachHandlers();
    attachHandlers();
    (0, _commerceUtils.triggerRender)(null, true);
    // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
    if (!window.Webflow.env()) {
        // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
        window.Webflow.load((0, _paypalEvents.renderPaypalButtons)(apolloClient));
    }
}
// `preview` should always be called after `init`
function preview() {
    detachHandlers();
    attachHandlers();
    (0, _commerceUtils.triggerRender)(null, true);
}
// `design` should always be called after `init`
function design() {
    detachHandlers();
    // When variant option is changed, we need to reset the Apollo cache in oder to
    // render the right data for the selected variant (main-images, more-images, etc)
    // @ts-expect-error - TS7005 - Variable 'apolloClient' implicitly has an 'any' type.
    if (apolloClient && apolloClient.store) {
        apolloClient.resetStore();
    }
}
function destroy() {
    detachHandlers();
}

//# sourceMappingURL=data:application/json;base64,

}),
45870: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/* globals window, CustomEvent */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    register: function() {
        return register;
    }
});
const _graphqltag = /*#__PURE__*/ _interop_require_default(__webpack_require__(28160));
const _qs = /*#__PURE__*/ _interop_require_default(__webpack_require__(26882));
const _commerceUtils = __webpack_require__(54556);
const _rendering = __webpack_require__(91898);
const _constants = __webpack_require__(10873);
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const renderOrderConfirmation = (orderConfirmation, data)=>{
    (0, _rendering.renderTree)(orderConfirmation, data);
};
const handleRenderOrderConfirmation = (event, apolloClient)=>{
    if (window.Webflow.env('design') || window.Webflow.env('preview')) {
        return;
    }
    if (!(event instanceof CustomEvent && event.type === _constants.RENDER_TREE_EVENT)) {
        return;
    }
    const errors = [];
    const { detail } = event;
    if (detail != null && detail.error) {
        errors.push(detail.error);
    }
    const orderConfirmationContainer = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_ORDER_CONFIRMATION_WRAPPER);
    if (!orderConfirmationContainer) {
        return;
    }
    const { orderId, token } = _qs.default.parse(window.location.search.substring(1));
    if (!orderId || !token) {
        return;
    }
    const finalizedOrder = {
        orderId,
        token
    };
    // runs the analytics (facebook and google pixel)
    // we don't block on it, since this isn't needed for any rendering
    // so it if fails, it can just fail silently
    (0, _commerceUtils.trackOrder)(apolloClient, finalizedOrder);
    const allOrderConfirmationContainers = (0, _commerceUtils.findAllElementsByNodeType)(_constants.NODE_TYPE_COMMERCE_ORDER_CONFIRMATION_WRAPPER);
    apolloClient.query({
        query: (0, _graphqltag.default)`
        ${orderConfirmationContainer.getAttribute(_constants.ORDER_QUERY)}
      `,
        variables: {
            finalizedOrder
        },
        fetchPolicy: 'network-only',
        // errorPolicy is set to `all` so that we continue to get the cart data when an error occurs
        // this is important in cases like when the address entered doesn't have a shipping zone, as that returns
        // a graphQL error, but we still want to render what the customer has entered
        errorPolicy: 'all'
    }).then((data)=>{
        allOrderConfirmationContainers.forEach((orderConfirmationContainerNode)=>{
            renderOrderConfirmation(orderConfirmationContainerNode, {
                ...data,
                errors: errors.concat(data.errors).filter(Boolean)
            });
        });
    }).catch((err)=>{
        errors.push(err);
        allOrderConfirmationContainers.forEach((orderConfirmationContainerNode)=>{
            renderOrderConfirmation(orderConfirmationContainerNode, {
                errors
            });
        });
    });
};
const register = (handlerProxy)=>{
    handlerProxy.on(_constants.RENDER_TREE_EVENT, Boolean, handleRenderOrderConfirmation);
};
const _default = {
    register
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9yZGVyQ29uZmlybWF0aW9uRXZlbnRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgd2luZG93LCBDdXN0b21FdmVudCAqL1xuaW1wb3J0IGdxbCBmcm9tICdncmFwaHFsLXRhZyc7XG5pbXBvcnQgcXMgZnJvbSAncXMnO1xuaW1wb3J0IEV2ZW50SGFuZGxlclByb3h5V2l0aEFwb2xsb0NsaWVudCBmcm9tICcuL2V2ZW50SGFuZGxlclByb3h5V2l0aEFwb2xsb0NsaWVudCc7XG5pbXBvcnQge1xuICBmaW5kRWxlbWVudEJ5Tm9kZVR5cGUsXG4gIGZpbmRBbGxFbGVtZW50c0J5Tm9kZVR5cGUsXG4gIHRyYWNrT3JkZXIsXG59IGZyb20gJy4vY29tbWVyY2VVdGlscyc7XG5pbXBvcnQge3JlbmRlclRyZWV9IGZyb20gJy4vcmVuZGVyaW5nJztcbmltcG9ydCB7XG4gIE5PREVfVFlQRV9DT01NRVJDRV9PUkRFUl9DT05GSVJNQVRJT05fV1JBUFBFUixcbiAgUkVOREVSX1RSRUVfRVZFTlQsXG4gIE9SREVSX1FVRVJZLFxufSBmcm9tICdAcGFja2FnZXMvc3lzdGVtcy9jb21tZXJjZS9jb25zdGFudHMnO1xuaW1wb3J0IHtBcG9sbG9DbGllbnQsIE5vcm1hbGl6ZWRDYWNoZU9iamVjdH0gZnJvbSAnQGFwb2xsby9jbGllbnQnO1xuXG5jb25zdCByZW5kZXJPcmRlckNvbmZpcm1hdGlvbiA9IChcbiAgb3JkZXJDb25maXJtYXRpb246IEVsZW1lbnQsXG4gIGRhdGE6IFJlY29yZDxhbnksIGFueT5cbikgPT4ge1xuICByZW5kZXJUcmVlKG9yZGVyQ29uZmlybWF0aW9uLCBkYXRhKTtcbn07XG5cbmNvbnN0IGhhbmRsZVJlbmRlck9yZGVyQ29uZmlybWF0aW9uID0gKFxuICBldmVudDogRXZlbnQgfCBDdXN0b21FdmVudCxcbiAgYXBvbGxvQ2xpZW50OiBBcG9sbG9DbGllbnQ8Tm9ybWFsaXplZENhY2hlT2JqZWN0PlxuKSA9PiB7XG4gIGlmICh3aW5kb3cuV2ViZmxvdy5lbnYoJ2Rlc2lnbicpIHx8IHdpbmRvdy5XZWJmbG93LmVudigncHJldmlldycpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghKGV2ZW50IGluc3RhbmNlb2YgQ3VzdG9tRXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gUkVOREVSX1RSRUVfRVZFTlQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgZXJyb3JzOiBBcnJheTxhbnk+ID0gW107XG4gIGNvbnN0IHtkZXRhaWx9ID0gZXZlbnQ7XG4gIGlmIChkZXRhaWwgIT0gbnVsbCAmJiBkZXRhaWwuZXJyb3IpIHtcbiAgICBlcnJvcnMucHVzaChkZXRhaWwuZXJyb3IpO1xuICB9XG5cbiAgY29uc3Qgb3JkZXJDb25maXJtYXRpb25Db250YWluZXIgPSBmaW5kRWxlbWVudEJ5Tm9kZVR5cGUoXG4gICAgTk9ERV9UWVBFX0NPTU1FUkNFX09SREVSX0NPTkZJUk1BVElPTl9XUkFQUEVSXG4gICk7XG4gIGlmICghb3JkZXJDb25maXJtYXRpb25Db250YWluZXIpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7XG4gICAgb3JkZXJJZCxcbiAgICB0b2tlbixcbiAgfToge1xuICAgIG9yZGVySWQ/OiBzdHJpbmc7XG4gICAgdG9rZW4/OiBzdHJpbmc7XG4gIH0gPSBxcy5wYXJzZSh3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKSk7XG4gIGlmICghb3JkZXJJZCB8fCAhdG9rZW4pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBmaW5hbGl6ZWRPcmRlciA9IHtvcmRlcklkLCB0b2tlbn0gYXMgY29uc3Q7XG5cbiAgLy8gcnVucyB0aGUgYW5hbHl0aWNzIChmYWNlYm9vayBhbmQgZ29vZ2xlIHBpeGVsKVxuICAvLyB3ZSBkb24ndCBibG9jayBvbiBpdCwgc2luY2UgdGhpcyBpc24ndCBuZWVkZWQgZm9yIGFueSByZW5kZXJpbmdcbiAgLy8gc28gaXQgaWYgZmFpbHMsIGl0IGNhbiBqdXN0IGZhaWwgc2lsZW50bHlcbiAgdHJhY2tPcmRlcihhcG9sbG9DbGllbnQsIGZpbmFsaXplZE9yZGVyKTtcblxuICBjb25zdCBhbGxPcmRlckNvbmZpcm1hdGlvbkNvbnRhaW5lcnMgPSBmaW5kQWxsRWxlbWVudHNCeU5vZGVUeXBlKFxuICAgIE5PREVfVFlQRV9DT01NRVJDRV9PUkRFUl9DT05GSVJNQVRJT05fV1JBUFBFUlxuICApO1xuXG4gIGFwb2xsb0NsaWVudFxuICAgIC5xdWVyeSh7XG4gICAgICBxdWVyeTogZ3FsYFxuICAgICAgICAke29yZGVyQ29uZmlybWF0aW9uQ29udGFpbmVyLmdldEF0dHJpYnV0ZShPUkRFUl9RVUVSWSl9XG4gICAgICBgLFxuICAgICAgdmFyaWFibGVzOiB7ZmluYWxpemVkT3JkZXJ9LFxuICAgICAgZmV0Y2hQb2xpY3k6ICduZXR3b3JrLW9ubHknLFxuICAgICAgLy8gZXJyb3JQb2xpY3kgaXMgc2V0IHRvIGBhbGxgIHNvIHRoYXQgd2UgY29udGludWUgdG8gZ2V0IHRoZSBjYXJ0IGRhdGEgd2hlbiBhbiBlcnJvciBvY2N1cnNcbiAgICAgIC8vIHRoaXMgaXMgaW1wb3J0YW50IGluIGNhc2VzIGxpa2Ugd2hlbiB0aGUgYWRkcmVzcyBlbnRlcmVkIGRvZXNuJ3QgaGF2ZSBhIHNoaXBwaW5nIHpvbmUsIGFzIHRoYXQgcmV0dXJuc1xuICAgICAgLy8gYSBncmFwaFFMIGVycm9yLCBidXQgd2Ugc3RpbGwgd2FudCB0byByZW5kZXIgd2hhdCB0aGUgY3VzdG9tZXIgaGFzIGVudGVyZWRcbiAgICAgIGVycm9yUG9saWN5OiAnYWxsJyxcbiAgICB9KVxuICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICBhbGxPcmRlckNvbmZpcm1hdGlvbkNvbnRhaW5lcnMuZm9yRWFjaChcbiAgICAgICAgKG9yZGVyQ29uZmlybWF0aW9uQ29udGFpbmVyTm9kZSkgPT4ge1xuICAgICAgICAgIHJlbmRlck9yZGVyQ29uZmlybWF0aW9uKG9yZGVyQ29uZmlybWF0aW9uQ29udGFpbmVyTm9kZSwge1xuICAgICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgICAgIGVycm9yczogZXJyb3JzLmNvbmNhdChkYXRhLmVycm9ycykuZmlsdGVyKEJvb2xlYW4pLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGVycm9ycy5wdXNoKGVycik7XG4gICAgICBhbGxPcmRlckNvbmZpcm1hdGlvbkNvbnRhaW5lcnMuZm9yRWFjaChcbiAgICAgICAgKG9yZGVyQ29uZmlybWF0aW9uQ29udGFpbmVyTm9kZSkgPT4ge1xuICAgICAgICAgIHJlbmRlck9yZGVyQ29uZmlybWF0aW9uKG9yZGVyQ29uZmlybWF0aW9uQ29udGFpbmVyTm9kZSwge2Vycm9yc30pO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyID0gKGhhbmRsZXJQcm94eTogRXZlbnRIYW5kbGVyUHJveHlXaXRoQXBvbGxvQ2xpZW50KSA9PiB7XG4gIGhhbmRsZXJQcm94eS5vbihSRU5ERVJfVFJFRV9FVkVOVCwgQm9vbGVhbiwgaGFuZGxlUmVuZGVyT3JkZXJDb25maXJtYXRpb24pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQge3JlZ2lzdGVyfTtcbiJdLCJuYW1lcyI6WyJyZWdpc3RlciIsInJlbmRlck9yZGVyQ29uZmlybWF0aW9uIiwib3JkZXJDb25maXJtYXRpb24iLCJkYXRhIiwicmVuZGVyVHJlZSIsImhhbmRsZVJlbmRlck9yZGVyQ29uZmlybWF0aW9uIiwiZXZlbnQiLCJhcG9sbG9DbGllbnQiLCJ3aW5kb3ciLCJXZWJmbG93IiwiZW52IiwiQ3VzdG9tRXZlbnQiLCJ0eXBlIiwiUkVOREVSX1RSRUVfRVZFTlQiLCJlcnJvcnMiLCJkZXRhaWwiLCJlcnJvciIsInB1c2giLCJvcmRlckNvbmZpcm1hdGlvbkNvbnRhaW5lciIsImZpbmRFbGVtZW50QnlOb2RlVHlwZSIsIk5PREVfVFlQRV9DT01NRVJDRV9PUkRFUl9DT05GSVJNQVRJT05fV1JBUFBFUiIsIm9yZGVySWQiLCJ0b2tlbiIsInFzIiwicGFyc2UiLCJsb2NhdGlvbiIsInNlYXJjaCIsInN1YnN0cmluZyIsImZpbmFsaXplZE9yZGVyIiwidHJhY2tPcmRlciIsImFsbE9yZGVyQ29uZmlybWF0aW9uQ29udGFpbmVycyIsImZpbmRBbGxFbGVtZW50c0J5Tm9kZVR5cGUiLCJxdWVyeSIsImdxbCIsImdldEF0dHJpYnV0ZSIsIk9SREVSX1FVRVJZIiwidmFyaWFibGVzIiwiZmV0Y2hQb2xpY3kiLCJlcnJvclBvbGljeSIsInRoZW4iLCJmb3JFYWNoIiwib3JkZXJDb25maXJtYXRpb25Db250YWluZXJOb2RlIiwiY29uY2F0IiwiZmlsdGVyIiwiQm9vbGVhbiIsImNhdGNoIiwiZXJyIiwiaGFuZGxlclByb3h5Iiwib24iXSwibWFwcGluZ3MiOiJBQUFBLCtCQUErQjs7Ozs7Ozs7Ozs7SUEwRy9CLE9BQTBCO2VBQTFCOztJQUphQSxRQUFRO2VBQVJBOzs7bUVBckdHOzJEQUNEOytCQU1SOzJCQUNrQjsyQkFLbEI7Ozs7OztBQUdQLE1BQU1DLDBCQUEwQixDQUM5QkMsbUJBQ0FDO0lBRUFDLElBQUFBLHFCQUFVLEVBQUNGLG1CQUFtQkM7QUFDaEM7QUFFQSxNQUFNRSxnQ0FBZ0MsQ0FDcENDLE9BQ0FDO0lBRUEsSUFBSUMsT0FBT0MsT0FBTyxDQUFDQyxHQUFHLENBQUMsYUFBYUYsT0FBT0MsT0FBTyxDQUFDQyxHQUFHLENBQUMsWUFBWTtRQUNqRTtJQUNGO0lBQ0EsSUFBSSxDQUFFSixDQUFBQSxpQkFBaUJLLGVBQWVMLE1BQU1NLElBQUksS0FBS0MsNEJBQWlCLEFBQUQsR0FBSTtRQUN2RTtJQUNGO0lBRUEsTUFBTUMsU0FBcUIsRUFBRTtJQUM3QixNQUFNLEVBQUNDLE1BQU0sRUFBQyxHQUFHVDtJQUNqQixJQUFJUyxVQUFVLFFBQVFBLE9BQU9DLEtBQUssRUFBRTtRQUNsQ0YsT0FBT0csSUFBSSxDQUFDRixPQUFPQyxLQUFLO0lBQzFCO0lBRUEsTUFBTUUsNkJBQTZCQyxJQUFBQSxvQ0FBcUIsRUFDdERDLHdEQUE2QztJQUUvQyxJQUFJLENBQUNGLDRCQUE0QjtRQUMvQjtJQUNGO0lBRUEsTUFBTSxFQUNKRyxPQUFPLEVBQ1BDLEtBQUssRUFDTixHQUdHQyxXQUFFLENBQUNDLEtBQUssQ0FBQ2hCLE9BQU9pQixRQUFRLENBQUNDLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDO0lBQzlDLElBQUksQ0FBQ04sV0FBVyxDQUFDQyxPQUFPO1FBQ3RCO0lBQ0Y7SUFFQSxNQUFNTSxpQkFBaUI7UUFBQ1A7UUFBU0M7SUFBSztJQUV0QyxpREFBaUQ7SUFDakQsa0VBQWtFO0lBQ2xFLDRDQUE0QztJQUM1Q08sSUFBQUEseUJBQVUsRUFBQ3RCLGNBQWNxQjtJQUV6QixNQUFNRSxpQ0FBaUNDLElBQUFBLHdDQUF5QixFQUM5RFgsd0RBQTZDO0lBRy9DYixhQUNHeUIsS0FBSyxDQUFDO1FBQ0xBLE9BQU9DLElBQUFBLG1CQUFHLENBQUEsQ0FBQztRQUNULEVBQUVmLDJCQUEyQmdCLFlBQVksQ0FBQ0Msc0JBQVcsRUFBRTtNQUN6RCxDQUFDO1FBQ0RDLFdBQVc7WUFBQ1I7UUFBYztRQUMxQlMsYUFBYTtRQUNiLDRGQUE0RjtRQUM1Rix5R0FBeUc7UUFDekcsNkVBQTZFO1FBQzdFQyxhQUFhO0lBQ2YsR0FDQ0MsSUFBSSxDQUFDLENBQUNwQztRQUNMMkIsK0JBQStCVSxPQUFPLENBQ3BDLENBQUNDO1lBQ0N4Qyx3QkFBd0J3QyxnQ0FBZ0M7Z0JBQ3RELEdBQUd0QyxJQUFJO2dCQUNQVyxRQUFRQSxPQUFPNEIsTUFBTSxDQUFDdkMsS0FBS1csTUFBTSxFQUFFNkIsTUFBTSxDQUFDQztZQUM1QztRQUNGO0lBRUosR0FDQ0MsS0FBSyxDQUFDLENBQUNDO1FBQ05oQyxPQUFPRyxJQUFJLENBQUM2QjtRQUNaaEIsK0JBQStCVSxPQUFPLENBQ3BDLENBQUNDO1lBQ0N4Qyx3QkFBd0J3QyxnQ0FBZ0M7Z0JBQUMzQjtZQUFNO1FBQ2pFO0lBRUo7QUFDSjtBQUVPLE1BQU1kLFdBQVcsQ0FBQytDO0lBQ3ZCQSxhQUFhQyxFQUFFLENBQUNuQyw0QkFBaUIsRUFBRStCLFNBQVN2QztBQUM5QztNQUVBLFdBQWU7SUFBQ0w7QUFBUSJ9

}),
86365: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/* global window, document, Element, CustomEvent, HTMLElement, HTMLFormElement */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    renderPaypalButtons: function() {
        return renderPaypalButtons;
    }
});
const _commerceUtils = __webpack_require__(54556);
const _checkoutUtils = __webpack_require__(17696);
const _cartUtils = __webpack_require__(69773);
const _debug = /*#__PURE__*/ _interop_require_default(__webpack_require__(85986));
const _checkoutMutations = __webpack_require__(94797);
const _constants = __webpack_require__(10873);
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
const isPlaceOrderButtonEvent = ({ target })=>{
    const placeOrderButton = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_PLACE_ORDER_BUTTON, target);
    if (placeOrderButton && target instanceof Element) {
        return target;
    } else {
        return false;
    }
};
let hasSyncedWithPaypal = false;
const handleRenderPayPalCheckout = (event, apolloClient)=>{
    if (window.Webflow.env('design') || window.Webflow.env('preview')) {
        return;
    }
    if (!(event instanceof CustomEvent && event.type === _constants.RENDER_TREE_EVENT)) {
        return;
    }
    const checkoutFormContainers = (0, _commerceUtils.findAllElementsByNodeType)(_constants.NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_FORM_CONTAINER);
    if (!checkoutFormContainers || checkoutFormContainers.length === 0) {
        return;
    }
    const errors = [];
    const { detail } = event;
    if (detail != null && detail.error) {
        errors.push(detail.error);
    }
    const focusedEle = window.document.activeElement;
    const checkoutForm = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_FORM_CONTAINER, // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'EventTarget'.
    focusedEle);
    let prevFocusedInput = null;
    // Only trigger for focused elements in a checkout form
    if (focusedEle instanceof HTMLInputElement && checkoutForm) {
        prevFocusedInput = focusedEle.id;
        if (!prevFocusedInput) {
            prevFocusedInput = focusedEle.getAttribute('data-wf-bindings');
        }
        // Move from empty string to null
        prevFocusedInput = prevFocusedInput ? null : prevFocusedInput;
    }
    const syncWithPayPalIfNeeded = !hasSyncedWithPaypal ? apolloClient.mutate({
        mutation: _checkoutMutations.syncPayPalOrderInfo
    }) : Promise.resolve();
    syncWithPayPalIfNeeded.then(()=>{
        hasSyncedWithPaypal = true;
        (0, _checkoutUtils.renderCheckoutFormContainers)(checkoutFormContainers, errors, apolloClient, undefined, prevFocusedInput);
    });
};
let placingOrder = false;
const startOrderFlow = (placeOrderButton)=>{
    placingOrder = true;
    window.addEventListener('beforeunload', _checkoutUtils.beforeUnloadHandler);
    const buttonText = placeOrderButton.innerHTML;
    const loadingText = placeOrderButton.getAttribute(_constants.DATA_ATTR_LOADING_TEXT);
    placeOrderButton.innerHTML = loadingText ? loadingText : _constants.CHECKOUT_PLACE_ORDER_LOADING_TEXT_DEFAULT;
    const finishOrderFlow = (isRedirecting = false)=>{
        // we only set `placingOrder` to false if we're not redirecting to the
        // confirmation page. this is so that while waiting for the confirmation
        // page to load, the user can't attempt to submit the order again
        if (!isRedirecting) {
            placingOrder = false;
        }
        window.removeEventListener('beforeunload', _checkoutUtils.beforeUnloadHandler);
        placeOrderButton.innerHTML = buttonText ? buttonText : _constants.CHECKOUT_PLACE_ORDER_BUTTON_TEXT_DEFAULT;
    };
    return finishOrderFlow;
};
const checkFormValidity = ({ shippingInfo, additionalInfo, requiresShipping })=>{
    if (!HTMLFormElement.prototype.reportValidity) {
        return true;
    }
    if (requiresShipping && !shippingInfo.reportValidity() || additionalInfo && additionalInfo instanceof HTMLFormElement && !additionalInfo.reportValidity()) {
        return false;
    }
    return true;
};
// @ts-expect-error - TS2314 - Generic type 'ApolloClient<TCacheShape>' requires 1 type argument(s).
const handlePlaceOrder = (event, apolloClient)=>{
    // Want to skip placing order if in design/preview mode, or an order place is in progress
    if (window.Webflow.env('design') || window.Webflow.env('preview') || placingOrder) {
        return;
    }
    const { currentTarget } = event;
    if (!(currentTarget instanceof Element)) {
        return;
    }
    const checkoutFormContainer = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_FORM_CONTAINER, currentTarget);
    if (!(checkoutFormContainer instanceof Element)) {
        return;
    }
    const errorState = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_ERROR_STATE, checkoutFormContainer);
    const shippingInfo = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_WRAPPER, checkoutFormContainer);
    const placeOrderButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_PLACE_ORDER_BUTTON, checkoutFormContainer);
    const additionalInfo = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CHECKOUT_ADDITIONAL_INFO, checkoutFormContainer);
    if (!(errorState instanceof HTMLElement) || !(shippingInfo instanceof HTMLFormElement) || !(placeOrderButton instanceof Element)) {
        return;
    }
    const errorMessage = errorState.querySelector(_constants.CART_CHECKOUT_ERROR_MESSAGE_SELECTOR);
    // If the error message has this attribute, we want to block the order from
    // being submitted as the user is being forced to refresh the checkout page.
    if (errorMessage && errorMessage.hasAttribute(_constants.NEEDS_REFRESH)) {
        return;
    }
    const hasAdditionalInfo = additionalInfo && additionalInfo instanceof HTMLElement;
    const finishOrderFlow = startOrderFlow(placeOrderButton);
    errorState.style.setProperty('display', 'none');
    (0, _commerceUtils.fetchOrderStatusFlags)(apolloClient).then(({ requiresShipping })=>{
        const isFormValid = checkFormValidity({
            shippingInfo,
            additionalInfo,
            requiresShipping
        });
        if (!isFormValid) {
            finishOrderFlow();
            return;
        }
        // final sync with server, to ensure validity
        let shippingMethodId = '';
        // @ts-expect-error - TS7015 - Element implicitly has an 'any' type because index expression is not of type 'number'.
        if (requiresShipping && shippingInfo.elements['shipping-method-choice']) {
            // this is an IE11-safe way of just doing shippingInfo.elements['shipping-method-choice'].value
            const shippingMethodChoice = shippingInfo.querySelector('input[name="shipping-method-choice"]:checked');
            // this should never be falsey, but Flow
            if (shippingMethodChoice) {
                shippingMethodId = shippingMethodChoice.value;
            }
        }
        const customData = hasAdditionalInfo ? (0, _commerceUtils.customDataFormToArray)(additionalInfo) : [];
        const syncPayPalCheckoutForm = Promise.all([
            requiresShipping ? (0, _checkoutUtils.createOrderShippingMethodMutation)(apolloClient, shippingMethodId) : Promise.resolve(),
            hasAdditionalInfo ? (0, _checkoutUtils.createCustomDataMutation)(apolloClient, customData) : Promise.resolve()
        ]);
        syncPayPalCheckoutForm.then(()=>{
            return (0, _checkoutUtils.createAttemptSubmitOrderRequest)(apolloClient, {
                checkoutType: 'paypal'
            });
        }).then((data)=>{
            _debug.default.log(data);
            const order = (0, _checkoutUtils.getOrderDataFromGraphQLResponse)(data);
            if (order.ok) {
                finishOrderFlow(true);
                (0, _checkoutUtils.redirectToOrderConfirmation)(order, true);
            }
        }).catch((err)=>{
            finishOrderFlow();
            _debug.default.error(err);
            errorState.style.removeProperty('display');
            (0, _checkoutUtils.updateErrorMessage)(errorState, err);
            if (err.graphQLErrors && err.graphQLErrors[0] && err.graphQLErrors[0].message) {
                const parsedError = (0, _commerceUtils.safeParseJson)(err.graphQLErrors[0].message);
                if (!parsedError) {
                    return;
                }
                if (parsedError.details && parsedError.details[0] && parsedError.details[0].issue === 'INSTRUMENT_DECLINED') {
                    const message = {
                        isWebflow: true,
                        type: 'error',
                        detail: parsedError
                    };
                    window.parent.postMessage(JSON.stringify(message), window.location.origin);
                }
            }
        });
    });
};
// width and height is defined twice, so that on older browsers that
// don't support vw/vh, we get the 100% instead
const iframeStyle = `
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
  width: 100vw;
  height: 100vh;
  min-width: 100%;
  min-height: 100%;
  max-width: 100%;
  max-height: 100%;
  z-index: 2147483647;
  border: 0;
  background-color: #ffffff;
`;
const createConfirmationIframe = (actions)=>{
    const documentRoot = document.documentElement;
    // we use this instead of document.body to appease the flow gods
    const documentBody = document.querySelector('body');
    if (!documentRoot || !documentBody) {
        return;
    }
    const iframe = document.createElement('iframe');
    iframe.setAttribute('style', iframeStyle);
    iframe.setAttribute('src', '/paypal-checkout');
    if (!documentBody.parentNode) {
        return;
    }
    documentBody.parentNode.appendChild(iframe);
    const previousRootOverflow = documentRoot.style.overflow;
    documentRoot.style.overflow = 'hidden';
    const previousBodyDisplay = documentBody.style.display;
    documentBody.style.display = 'none';
    const paypalMessageHandler = (event)=>{
        if (event.origin !== window.location.origin) {
            return;
        }
        const data = (0, _commerceUtils.safeParseJson)(String(event.data));
        // we include an `isWebflow` since paypal sends some messages on the page
        // and we want to make sure that we don't accidentally intercept one of their messages
        if (!data || data.isWebflow !== true || !data.type || !data.detail) {
            return;
        }
        if (data.type === 'success') {
            window.removeEventListener('message', paypalMessageHandler);
            window.location.href = data.detail;
        }
        if (data.type === 'error') {
            window.removeEventListener('message', paypalMessageHandler);
            if (previousRootOverflow) {
                documentRoot.style.overflow = previousRootOverflow;
            } else {
                documentRoot.style.overflow = '';
            }
            if (previousBodyDisplay) {
                documentBody.style.display = previousBodyDisplay;
            } else {
                documentBody.style.display = '';
            }
            if (documentBody.parentNode) {
                documentBody.parentNode.removeChild(iframe);
            }
            actions.restart();
        }
    };
    window.addEventListener('message', paypalMessageHandler);
};
const renderPaypalButtons = (apolloClient)=>()=>{
        const paypalElement = document.querySelector(`[${_constants.PAYPAL_ELEMENT_INSTANCE}]`);
        const buttons = Array.from(document.querySelectorAll(`[${_constants.PAYPAL_BUTTON_ELEMENT_INSTANCE}]`));
        if (paypalElement && buttons && buttons.length > 0) {
            buttons.forEach((button)=>{
                const style = (0, _commerceUtils.safeParseJson)(button.getAttribute(_constants.PAYPAL_BUTTON_ELEMENT_INSTANCE));
                // @ts-expect-error - TS2551 - Property 'paypal' does not exist on type 'Window & typeof globalThis'. Did you mean 'Papa'?
                window.paypal.Buttons({
                    style,
                    createOrder () {
                        return apolloClient.mutate({
                            mutation: _checkoutMutations.requestPayPalOrderMutation
                        }).then((data)=>{
                            const { data: { ecommercePaypalOrderRequest: { orderId } } } = data;
                            return orderId;
                        }).catch((err)=>{
                            (0, _checkoutUtils.showErrorMessageForError)(err);
                            if ((0, _cartUtils.isCartOpen)()) {
                                (0, _cartUtils.showErrorMessageForError)(err);
                            }
                            throw err;
                        });
                    },
                    onApprove (data, actions) {
                        createConfirmationIframe(actions);
                    }
                }).render(button);
            });
        }
    };
const register = (handlerProxy)=>{
    handlerProxy.on(_constants.RENDER_TREE_EVENT, Boolean, handleRenderPayPalCheckout);
    handlerProxy.on('click', isPlaceOrderButtonEvent, handlePlaceOrder);
    handlerProxy.on('keydown', isPlaceOrderButtonEvent, (event, apolloClient)=>{
        // @ts-expect-error - TS2339 - Property 'which' does not exist on type 'Event'.
        if (event.which === 32) {
            // prevent scrolling on spacebar key press
            event.preventDefault();
        }
        // @ts-expect-error - TS2339 - Property 'which' does not exist on type 'Event'.
        if (event.which === 13) {
            // enter key press
            return handlePlaceOrder(event, apolloClient);
        }
    });
    handlerProxy.on('keyup', isPlaceOrderButtonEvent, (event, apolloClient)=>{
        // @ts-expect-error - TS2339 - Property 'which' does not exist on type 'Event'.
        if (event.which === 32) {
            // spacebar key press
            return handlePlaceOrder(event, apolloClient);
        }
    });
};
const _default = {
    register
};

//# sourceMappingURL=data:application/json;base64,

}),
91898: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/* globals window, document, HTMLElement */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    applySkuBoundConditionalVisibility: function() {
        return applySkuBoundConditionalVisibility;
    },
    renderTree: function() {
        return renderTree;
    }
});
const _Transformers = __webpack_require__(61649);
const _escape = /*#__PURE__*/ _interop_require_default(__webpack_require__(28929));
const _cloneDeep = /*#__PURE__*/ _interop_require_default(__webpack_require__(37252));
const _transform = /*#__PURE__*/ _interop_require_default(__webpack_require__(16089));
const _constants = __webpack_require__(10873);
const _constants1 = __webpack_require__(29197);
const _RenderingUtils = __webpack_require__(86078);
const _commerceUtils = __webpack_require__(54556);
const _DynamoFormattingUtils = __webpack_require__(82688);
const _site = __webpack_require__(32949);
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const allowedFieldTypes = {
    ..._constants1.SHARED_ALLOWED_FIELD_TYPES,
    'data-commerce-sku-id': [
        'ItemRef'
    ]
};
const isBindingPropToFieldTypeAllowed = (// @ts-expect-error - TS7006 - Parameter 'bindingProperty' implicitly has an 'any' type.
bindingProperty, type)=>{
    // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{ readonly 'data-commerce-sku-id': readonly ["ItemRef"]; readonly innerHTML: { PlainText: string; HighlightedText: string; RichText: string; Number: string; Video: string; Option: string; Date: string; Phone: string; ... 6 more ...; CommercePropValues: string; }; ... 11 more ...; readonly dataWHref: string[]; }'.
    const allowedTypes = allowedFieldTypes[bindingProperty];
    return allowedTypes instanceof Array ? allowedTypes.indexOf(type) > -1 : allowedTypes && type in allowedTypes;
};
// @ts-expect-error - TS7023 - 'getIn' implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions. | TS7006 - Parameter 'object' implicitly has an 'any' type.
const getIn = (object, path)=>{
    const nextDotIndex = path.indexOf('.');
    if (object == null) {
        return null;
    }
    if (nextDotIndex !== -1) {
        const pathPart = path.slice(0, nextDotIndex);
        const restOfPath = path.slice(nextDotIndex + 1, path.length);
        return getIn(object[pathPart], restOfPath);
    }
    return object[path];
};
const applyBindingsMutation = ({ // @ts-expect-error - TS7031 - Binding element 'bindingProperty' implicitly has an 'any' type.
bindingProperty, // @ts-expect-error - TS7031 - Binding element 'type' implicitly has an 'any' type.
type, // @ts-expect-error - TS7031 - Binding element 'filter' implicitly has an 'any' type.
filter, // @ts-expect-error - TS7031 - Binding element 'path' implicitly has an 'any' type.
path, // @ts-expect-error - TS7031 - Binding element 'timezone' implicitly has an 'any' type.
timezone, // @ts-expect-error - TS7031 - Binding element 'pageLinkHrefPrefix' implicitly has an 'any' type.
pageLinkHrefPrefix, collectionSlugMap = {}, // @ts-expect-error - TS7031 - Binding element 'data' implicitly has an 'any' type.
data, // @ts-expect-error - TS7031 - Binding element 'node' implicitly has an 'any' type.
node, emailLinkSubject = '' })=>{
    if (!isBindingPropToFieldTypeAllowed(bindingProperty, type)) {
        return;
    }
    const prefix = 'data.';
    let suffix = '';
    if (type === 'ImageRef' && bindingProperty === 'src') {
        suffix = '.url';
    }
    let rawValue;
    if (type === 'CommercePropValues') {
        rawValue = getCommercePropValue(data, `${prefix}${path}`);
    } else {
        rawValue = getIn(data, `${prefix}${path}${suffix}`);
    }
    const transformedValue = (0, _Transformers.transformers)(rawValue, filter, {
        timezone,
        pageLinkHrefPrefix,
        collectionSlugMap,
        // @ts-expect-error - TS2339 - Property '__WEBFLOW_CURRENCY_SETTINGS' does not exist on type 'Window & typeof globalThis'.
        currencySettings: window.__WEBFLOW_CURRENCY_SETTINGS
    });
    const propertyMutator = getPropertyMutator(bindingProperty, emailLinkSubject);
    if (typeof propertyMutator === 'function') {
        propertyMutator(node, type, transformedValue);
    }
};
const applyBindings = (bindings, data, node)=>{
    if (bindings == null) {
        return;
    }
    bindings.forEach((binding)=>{
        Object.keys(binding).forEach((bindingProperty)=>{
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"value" | "id" | "alt" | "data-commerce-sku-id" | "innerHTML" | "src" | "checked" | "for" | "style.color" | "style.background-color" | "style.border-color" | "style.background-image", Binding>>'.
            const bindingValue = binding[bindingProperty];
            const { type, filter, dataPath: path, timezone, pageLinkHrefPrefix, collectionSlugMap, emailLinkSubject } = bindingValue;
            applyBindingsMutation({
                bindingProperty,
                type,
                filter,
                path,
                timezone,
                pageLinkHrefPrefix,
                collectionSlugMap,
                data,
                node,
                emailLinkSubject
            });
        });
    });
};
const applyConditionalVisibility = (// @ts-expect-error - TS7006 - Parameter 'conditionData' implicitly has an 'any' type.
conditionData, data, node)=>{
    if (!conditionData) {
        return;
    }
    const { dataPath, meta } = conditionData;
    const prefixedDataPath = `data.${dataPath}`;
    // manually construct item when the condition is bound to Product Options
    const item = meta && meta.type === 'CommercePropValues' ? {
        name: getIn(data, `${prefixedDataPath}.name`),
        value: getCommercePropValue(data, prefixedDataPath)
    } : getIn(data, prefixedDataPath);
    (0, _RenderingUtils.applyConditionToNode)(node, item, conditionData, true);
};
const applySkuBoundConditionalVisibility = ({ conditionData, newSkuItem, node })=>{
    const { condition } = conditionData;
    const skuConditionData = (0, _transform.default)(condition.fields, (data, val, field)=>{
        const skuField = field.split('default-sku:');
        if (skuField.length > 1) {
            // @ts-expect-error - TS18046 - 'data' is of type 'unknown'.
            data[skuField[1]] = val;
            return data;
        }
    });
    // Need to flatten the inventory quantity to allow cond vis bound to inventory counts
    const inventoryQuantity = newSkuItem.inventory.type === 'infinite' ? null : newSkuItem.inventory.quantity;
    const itemWithFlattenedInventory = {
        ...newSkuItem,
        ecSkuInventoryQuantity: inventoryQuantity
    };
    (0, _RenderingUtils.applyConditionToNode)(node, itemWithFlattenedInventory, {
        ...conditionData,
        condition: {
            fields: skuConditionData
        }
    }, true);
};
const createStyleMutator = // @ts-expect-error - TS7006 - Parameter 'node' implicitly has an 'any' type. | TS7006 - Parameter 'type' implicitly has an 'any' type.
(property)=>(node, type, value)=>{
        if (!(node instanceof HTMLElement && typeof value === 'string')) {
            return;
        }
        if (type === 'ImageRef') {
            node.style.setProperty(property, `url(${value})`);
        }
        node.style.setProperty(property, value);
    };
const createAttributeMutator = // @ts-expect-error - TS7006 - Parameter 'node' implicitly has an 'any' type. | TS7006 - Parameter 'type' implicitly has an 'any' type.
(attribute)=>(node, type, value)=>{
        const sanitizedString = value != null ? String(value) : '';
        node.setAttribute(attribute, sanitizedString);
        if (attribute === 'src' && sanitizedString) {
            (0, _RenderingUtils.removeWDynBindEmptyClass)(node);
        }
    };
const valueMutator = (node, type, value)=>{
    if (node.hasRendered) {
        return;
    }
    let sanitizedString;
    // if it's a select element, and we have no value, we default to the last value
    // this was added for the case of the first render of the country select field
    // so that it isn't a blank select box when it's a new order without a country set
    if (node.tagName === 'SELECT') {
        sanitizedString = value != null ? String(value) : node.value || '';
    } else {
        sanitizedString = value != null ? String(value) : '';
    }
    node.setAttribute('value', sanitizedString);
    if (node.tagName === 'INPUT' && String(node.type).toLowerCase() === 'text') {
        node.hasRendered = true;
    }
    node.value = sanitizedString;
};
const checkedMutator = (node, type, value)=>{
    node.checked = Boolean(value);
};
// @ts-expect-error - TS7031 - Binding element 'height' implicitly has an 'any' type. | TS7031 - Binding element 'width' implicitly has an 'any' type.
const aspectRatio = ({ height, width })=>{
    return height && width ? height / width : 0;
};
const mutators = {
    // @ts-expect-error - TS7006 - Parameter 'node' implicitly has an 'any' type. | TS7006 - Parameter 'type' implicitly has an 'any' type. | TS7006 - Parameter 'value' implicitly has an 'any' type.
    innerHTML: (node, type, value)=>{
        const originalValue = value;
        if (type === 'Video') {
            /*
      TODO handle also innerHTML Video Links
      For example,
      innerHTML: [
        {
          id: 'video-id',
          slug: 'video',
          type: 'Video',
        },
        {
          id: 'url',
          slug: 'url',
          type: 'Link',
        },
      ],
       */ value = value != null && value.metadata != null && typeof value.metadata.html === 'string' ? value.metadata.html : null;
        }
        const valueString = value != null ? String(value) : '';
        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{ PlainText: string; HighlightedText: string; RichText: string; Number: string; Video: string; Option: string; Date: string; Phone: string; Email: string; CommercePrice: string; Link: string; ImageRef: boolean; FileRef: boolean; ItemRef: boolean; CommercePropValues: string; }'.
        if (allowedFieldTypes.innerHTML[type] === 'innerHTML') {
            node.innerHTML = valueString;
        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{ PlainText: string; HighlightedText: string; RichText: string; Number: string; Video: string; Option: string; Date: string; Phone: string; Email: string; CommercePrice: string; Link: string; ImageRef: boolean; FileRef: boolean; ItemRef: boolean; CommercePropValues: string; }'.
        } else if (allowedFieldTypes.innerHTML[type] === 'innerText') {
            node.innerHTML = (0, _escape.default)(valueString);
        }
        // Videos have their `padding-top` style set automatically to make them responsive, and are a locked style.
        // This is usually done in `shared/render/plugins/Embed/Video.jsx` on the server render. However, the render-time value
        // when rendering the cart is `0`, as the server does not have the associated data from the binding passed to it at
        // render-time, since we're not getting that data until we do the client-side render, after fetching the cart data.
        // So, along with setting the proper innerHTML binding for the embed itself, we also have to do an exception here
        // and set the `padding-top` to the video's aspect ratio (height over width).
        if (type === 'Video' && originalValue && originalValue.metadata && node instanceof HTMLElement) {
            node.style.setProperty('padding-top', `${aspectRatio(originalValue.metadata) * 100}%`);
        }
        if (node.innerHTML) {
            (0, _RenderingUtils.removeWDynBindEmptyClass)(node);
        }
    },
    'style.color': createStyleMutator('color'),
    'style.background-color': createStyleMutator('background-color'),
    'style.border-color': createStyleMutator('border-color'),
    'style.background-image': createStyleMutator('background-image'),
    src: createAttributeMutator('src'),
    alt: createAttributeMutator('alt'),
    id: createAttributeMutator('id'),
    for: createAttributeMutator('for'),
    value: valueMutator,
    checked: checkedMutator,
    'data-commerce-sku-id': createAttributeMutator('data-commerce-sku-id')
};
const hrefMutator = (emailLinkSubject)=>(node, type, value)=>{
        if (value) {
            const href = String(value);
            switch(type){
                case 'Phone':
                    {
                        node.setAttribute('href', (0, _DynamoFormattingUtils.formatPhone)(href, 'href'));
                        break;
                    }
                case 'Email':
                    {
                        let subject;
                        try {
                            subject = encodeURIComponent(emailLinkSubject);
                        } catch (e) {
                            subject = '';
                        }
                        const formattedEmail = (0, _DynamoFormattingUtils.formatEmail)(href, subject, 'href');
                        node.setAttribute('href', formattedEmail || '#');
                        break;
                    }
                default:
                    {
                        node.setAttribute('href', href);
                        break;
                    }
            }
        } else {
            node.setAttribute('href', '#');
        }
    };
// @ts-expect-error - TS7006 - Parameter 'bindingProperty' implicitly has an 'any' type.
const getPropertyMutator = (bindingProperty, emailLinkSubject)=>{
    if (bindingProperty === 'href' || bindingProperty === 'dataWHref') {
        return hrefMutator(emailLinkSubject);
    }
    // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{ readonly innerHTML: (node: any, type: any, value: any) => void; readonly 'style.color': (node: any, type: any, value: unknown) => void; readonly 'style.background-color': (node: any, type: any, value: unknown) => void; ... 8 more ...; readonly 'data-commerce-sku-id': (node: any, type: any, value: unknown) => void; }'.
    if (typeof mutators[bindingProperty] === 'function') {
        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'any' can't be used to index type '{ readonly innerHTML: (node: any, type: any, value: any) => void; readonly 'style.color': (node: any, type: any, value: unknown) => void; readonly 'style.background-color': (node: any, type: any, value: unknown) => void; ... 8 more ...; readonly 'data-commerce-sku-id': (node: any, type: any, value: unknown) => void; }'.
        return mutators[bindingProperty];
    }
    return null;
};
const getCommercePropValue = (data, path)=>{
    const option = getIn(data, path);
    if (option) {
        const pathToOptionAsArray = path.split('.');
        const pathToCommercePropValues = pathToOptionAsArray.slice(0, pathToOptionAsArray.indexOf('product')).concat([
            'sku',
            'f_sku_values_3dr'
        ]).join('.');
        const skuValues = getIn(data, pathToCommercePropValues);
        if (Array.isArray(skuValues)) {
            return (0, _site.getProductOptionValueName)(option, (0, _site.simplifySkuValues)(skuValues));
        }
    }
    return '';
};
const getTemplateScript = (node)=>{
    const templateId = node.getAttribute(_constants.WF_TEMPLATE_ID_DATA_KEY);
    const templateScript = templateId && node.parentElement && node.parentElement.querySelector(`#${templateId}`);
    return templateScript;
};
const createDomFragment = (html)=>{
    const div = document.createElement('div');
    div.innerHTML = html;
    return div.children[0];
};
const getTemplateString = (node, index)=>{
    const templateScript = getTemplateScript(node);
    const rawTemplateContent = templateScript && templateScript.textContent;
    const instanceRegEx = /([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}_instance-)\d+/gi;
    const decodedTemplate = rawTemplateContent && decodeURIComponent(rawTemplateContent).replace(instanceRegEx, `$1${index}`);
    if (Boolean(decodedTemplate) && node.hasAttribute(_constants.WF_COLLECTION_DATA_KEY)) {
        const collectionPath = node.getAttribute(_constants.WF_COLLECTION_DATA_KEY);
        if (collectionPath && typeof collectionPath === 'string') {
            const searchTerm = encodeURIComponent(`${(0, _escape.default)(collectionPath)}[]`).replace(/\./g, '\\.');
            const templateSearchTerm = encodeURIComponent(`${(0, _escape.default)(collectionPath)}${encodeURIComponent('[]')}`).replace(/\./g, '\\.');
            const collectionPathRegExp = new RegExp(`${searchTerm}|${templateSearchTerm}`, 'g');
            return decodedTemplate && decodedTemplate.replace(collectionPathRegExp, `${collectionPath}.${index}`);
        }
    }
    return decodedTemplate;
};
const getTemplateCollection = (node, data)=>{
    const collectionPath = node.hasAttribute(_constants.WF_COLLECTION_DATA_KEY) && node.getAttribute(_constants.WF_COLLECTION_DATA_KEY);
    return collectionPath ? getIn(data, `data.${collectionPath}`) : [];
};
const checkForAndApplyTemplateCollection = (node, data)=>{
    if (node && node.hasAttribute(_constants.WF_TEMPLATE_ID_DATA_KEY)) {
        const collection = getTemplateCollection(node, data);
        node.innerHTML = '';
        if (collection != null && collection.length > 0) {
            for(let index = 0; index < collection.length; index++){
                const templateString = getTemplateString(node, index);
                const template = templateString && createDomFragment(templateString);
                if (template instanceof Element) {
                    if (typeof node.append === 'function') {
                        node.append(renderTree(template, data));
                    } else if (typeof node.appendChild === 'function') {
                        node.appendChild(renderTree(template, data));
                    } else {
                        throw new Error('Could not append child to node');
                    }
                }
            }
        }
    }
};
const checkForAndApplyBindings = (node, data)=>{
    if (node && node.hasAttribute(_constants.WF_BINDING_DATA_KEY)) {
        const bindingData = (0, _commerceUtils.safeParseJson)(node.getAttribute(_constants.WF_BINDING_DATA_KEY));
        applyBindings(bindingData, data, node);
    }
};
const checkForAndApplyConditionalVisibility = (node, data)=>{
    if (node && node.hasAttribute(_constants.WF_CONDITION_DATA_KEY)) {
        const conditionData = (0, _commerceUtils.safeParseJson)(node.getAttribute(_constants.WF_CONDITION_DATA_KEY));
        applyConditionalVisibility(conditionData, data, node);
    }
};
const renderTree = (tree, data)=>{
    data = flattenOrderData(data);
    return (0, _RenderingUtils.walkDOM)(tree, (node)=>{
        checkForAndApplyTemplateCollection(node, data);
        checkForAndApplyBindings(node, data);
        checkForAndApplyConditionalVisibility(node, data);
    });
};
const shippingDataReplacementPaths = {
    cardProvider: [
        'customerInfo',
        'stripePayment',
        'card',
        'provider'
    ],
    cardLastFour: [
        'customerInfo',
        'stripePayment',
        'card',
        'last4'
    ],
    cardExpiresMonth: [
        'customerInfo',
        'stripePayment',
        'card',
        'expires',
        'month'
    ],
    cardExpiresYear: [
        'customerInfo',
        'stripePayment',
        'card',
        'expires',
        'year'
    ],
    customerEmail: [
        'customerInfo',
        'identity',
        'email'
    ],
    shippingAddressAddressee: [
        'customerInfo',
        'shippingAddress',
        'addressee'
    ],
    shippingAddressLine1: [
        'customerInfo',
        'shippingAddress',
        'line1'
    ],
    shippingAddressLine2: [
        'customerInfo',
        'shippingAddress',
        'line2'
    ],
    shippingAddressCity: [
        'customerInfo',
        'shippingAddress',
        'city'
    ],
    shippingAddressState: [
        'customerInfo',
        'shippingAddress',
        'state'
    ],
    shippingAddressCountry: [
        'customerInfo',
        'shippingAddress',
        'country'
    ],
    shippingAddressPostalCode: [
        'customerInfo',
        'shippingAddress',
        'postalCode'
    ],
    billingAddressAddressee: [
        'customerInfo',
        'billingAddress',
        'addressee'
    ],
    billingAddressLine1: [
        'customerInfo',
        'billingAddress',
        'line1'
    ],
    billingAddressLine2: [
        'customerInfo',
        'billingAddress',
        'line2'
    ],
    billingAddressCity: [
        'customerInfo',
        'billingAddress',
        'city'
    ],
    billingAddressPostalCode: [
        'customerInfo',
        'billingAddress',
        'postalCode'
    ],
    billingAddressState: [
        'customerInfo',
        'billingAddress',
        'state'
    ],
    billingAddressCountry: [
        'customerInfo',
        'billingAddress',
        'country'
    ],
    requiresShipping: [
        'statusFlags',
        'requiresShipping'
    ],
    hasDownloads: [
        'statusFlags',
        'hasDownloads'
    ]
};
const flattenCustomData = (customData)=>// @ts-expect-error - Flow 0.121.0
    customData.reduce((flattenedData, data)=>{
        if (data.textArea) {
            flattenedData.additionalTextArea = data.textArea;
        } else if (data.textInput) {
            flattenedData.additionalTextInput = data.textInput;
        } else if (data.checkbox !== null) {
            flattenedData.additionalCheckbox = data.checkbox;
        }
        return flattenedData;
    }, {});
const flattenOrderData = (data)=>{
    const orderExists = data && data.data && data.data.database && data.data.database.commerceOrder !== null;
    if (!orderExists) {
        return data;
    }
    // @ts-expect-error - TS2339 - Property 'commerceOrder' does not exist on type '{ commerceOrder?: { availableShippingMethods?: [] | undefined; } | undefined; } | undefined'. | TS18048 - 'data.data' is possibly 'undefined'.
    const { commerceOrder } = data.data.database;
    const paymentProcessor = commerceOrder.paymentProcessor;
    const availableShippingMethods = commerceOrder.availableShippingMethods || [];
    const selectedShippingMethod = availableShippingMethods.find(// @ts-expect-error - TS7006 - Parameter 'shippingMethod' implicitly has an 'any' type.
    (shippingMethod)=>shippingMethod.selected === true);
    const flattenedCustomData = commerceOrder.customData ? flattenCustomData(commerceOrder.customData) : {};
    const flattenedOrderData = {
        ...commerceOrder,
        shippingMethodName: selectedShippingMethod && selectedShippingMethod.name,
        shippingMethodDescription: selectedShippingMethod && selectedShippingMethod.description,
        ...flattenedCustomData
    };
    // We have to deep clone the data here, as the properties from the data
    // returned by Apollo are read-only.
    const clonedData = (0, _cloneDeep.default)(data);
    // @ts-expect-error - TS18048 - 'clonedData.data' is possibly 'undefined'.
    clonedData.data.database.commerceOrder = Object.keys(shippingDataReplacementPaths).reduce((updatedData, flattenPath)=>{
        // Override cardProvider for PayPal order
        if (flattenPath === 'cardProvider' && paymentProcessor === 'paypal') {
            updatedData = {
                ...updatedData,
                cardProvider: 'PayPal'
            };
            return updatedData;
        }
        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ readonly cardProvider: readonly ["customerInfo", "stripePayment", "card", "provider"]; readonly cardLastFour: readonly ["customerInfo", "stripePayment", "card", "last4"]; readonly cardExpiresMonth: readonly [...]; ... 17 more ...; readonly hasDownloads: readonly [...]; }'.
        const replacementFrom = shippingDataReplacementPaths[flattenPath];
        const replacementData = replacementFrom.reduce((acc, key)=>acc && acc[key], updatedData);
        updatedData[flattenPath] = replacementData;
        return updatedData;
    }, flattenedOrderData);
    return clonedData;
};

//# sourceMappingURL=data:application/json;base64,

}),
5841: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/* globals window */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    StripeStore: function() {
        return StripeStore;
    },
    generateDisplayItemsFromOrder: function() {
        return generateDisplayItemsFromOrder;
    },
    generateShippingOptionsFromMethods: function() {
        return generateShippingOptionsFromMethods;
    }
});
const _debug = /*#__PURE__*/ _interop_require_default(__webpack_require__(85986));
const _constants = __webpack_require__(10873);
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class StripeStore {
    constructor(docElement){
        if (window.Webflow.env('design') || window.Webflow.env('preview')) {
            return;
        }
        const stripeJsElement = docElement.querySelector(`[${_constants.STRIPE_ECOMMERCE_KEY}]`);
        if (!stripeJsElement) {
            this.store = {
                initialized: false,
                stripe: {},
                elements: [],
                elementInstances: [],
                cartPaymentRequests: [],
                styleMapObservers: {}
            };
            // @ts-expect-error - TS2322 - Type 'void' is not assignable to type 'StripeStore'. | TS2409 - Return type of constructor signature must be assignable to the instance type of the class.
            return _debug.default.error("Stripe has not been set up for this project – Go to the project's Ecommerce Payment settings in the Designer to link Stripe.");
        }
        const ecommKey = stripeJsElement.getAttribute(_constants.STRIPE_ECOMMERCE_KEY);
        const ecommAccountId = stripeJsElement.getAttribute(_constants.STRIPE_ECOMMERCE_ACCOUNT_ID);
        const stripeOpts = ecommAccountId ? {
            stripeAccount: ecommAccountId,
            apiVersion: '2020-03-02'
        } : null;
        // @ts-expect-error - TS2339 - Property 'Stripe' does not exist on type 'Window & typeof globalThis'.
        const stripe = window.Stripe(ecommKey, stripeOpts);
        this.store = {
            initialized: true,
            stripe,
            elements: [],
            elementInstances: [],
            cartPaymentRequests: [],
            styleMapObservers: {}
        };
    }
    isInitialized() {
        return this.store.initialized;
    }
    getStripeInstance() {
        return this.store.stripe;
    }
    getElementsInstance(index) {
        return this.store.elements[index];
    }
    getElement(type, index) {
        // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
        return this.store.elementInstances[index][type];
    }
    createElementsInstance(index) {
        if (this.store.elements[index]) {
            throw new Error(`Storage already exists for checkout form instance ${index}`);
        } else {
            const stripeInstance = this.getStripeInstance();
            this.store.elements[index] = stripeInstance.elements();
            this.store.elementInstances[index] = {};
        }
    }
    createElement(type, index, options) {
        if (!this.isInitialized()) {
            throw new Error("Stripe has not been set up for this project – Go to the project's Ecommerce Payment settings in the Designer to link Stripe.");
        }
        // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
        if (this.store.elementInstances[index][type]) {
            throw new Error(`Stripe Element of type ${type} for instance ${index} already exists on this page`);
        }
        // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
        const el = this.store.elements[index].create(type, options);
        // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
        this.store.elementInstances[index][type] = el;
        return el;
    }
    updateCartPaymentRequest(index, orderData, siteData) {
        const stripeInstance = this.getStripeInstance();
        const requiresShipping = Boolean(orderData.statusFlags.requiresShipping);
        const options = {
            country: siteData.businessAddress.country || siteData.defaultCountry || 'US',
            currency: siteData.defaultCurrency.toLowerCase(),
            total: {
                amount: orderData.subtotal.value,
                label: 'Subtotal',
                pending: true
            },
            displayItems: generateDisplayItemsFromOrder(orderData, false),
            requestPayerName: true,
            requestPayerEmail: true,
            requestPayerPhone: false,
            requestShipping: requiresShipping
        };
        try {
            this.store.cartPaymentRequests[index] = stripeInstance.paymentRequest(options);
        } catch (error) {
            let ignoreError = false;
            // Stripe errors are `IntegrationError`s
            if (error.name === 'IntegrationError') {
                const unsupportedCountryPattern = /country should be one of the following strings(?:.*)You specified: (.*)./;
                const matches = error.message.match(unsupportedCountryPattern);
                ignoreError = Boolean(matches);
            }
            // We want the error to carry on if it's not exactly what we're looking for.
            if (!ignoreError) {
                throw error;
            } else {
                console.error(error);
            }
        }
        return this.store.cartPaymentRequests[index];
    }
    getCartPaymentRequest(index) {
        return this.store.cartPaymentRequests[index];
    }
}
const generateDisplayItemsFromOrder = (orderData, showExtraItems)=>[
        // @ts-expect-error - TS7006 - Parameter 'item' implicitly has an 'any' type.
        ...orderData.userItems.map((item)=>({
                label: `${item.product.f_name_} ${item.count > 1 ? `(${item.count})` : ''}`,
                amount: item.rowTotal.value
            })),
        ...showExtraItems ? orderData.extraItems.map((item)=>({
                label: item.name,
                amount: item.price.value
            })) : []
    ];
const generateShippingOptionsFromMethods = (shippingMethods)=>shippingMethods.map((method)=>({
            id: method.id,
            label: method.name,
            detail: method.description || '',
            amount: method.price.value
        }));

//# sourceMappingURL=data:application/json;base64,

}),
94492: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/* globals window */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    register: function() {
        return register;
    },
    updateWebPaymentsButton: function() {
        return updateWebPaymentsButton;
    }
});
const _graphqltag = /*#__PURE__*/ _interop_require_default(__webpack_require__(28160));
const _commerceUtils = __webpack_require__(54556);
const _stripeStore = __webpack_require__(5841);
const _checkoutUtils = __webpack_require__(17696);
const _cartUtils = __webpack_require__(69773);
const _constants = __webpack_require__(10873);
const _debug = /*#__PURE__*/ _interop_require_default(__webpack_require__(85986));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const hasItems = (response)=>response && response.data && response.data.database && response.data.database.commerceOrder && response.data.database.commerceOrder.userItems && response.data.database.commerceOrder.userItems.length > 0;
// @ts-expect-error - TS7031 - Binding element 'target' implicitly has an 'any' type.
const isWebPaymentsButtonEvent = ({ target })=>{
    const cartCheckoutButton = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_QUICK_CHECKOUT_BUTTON, target);
    const cartApplePayButton = (0, _commerceUtils.findClosestElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_APPLE_PAY_BUTTON, target);
    if (cartCheckoutButton) {
        return cartCheckoutButton;
    } else if (cartApplePayButton) {
        return cartApplePayButton;
    } else {
        return false;
    }
};
const updateWebPaymentsButton = (wrapper, data, stripeStore)=>{
    const webPaymentsActionsElements = (0, _commerceUtils.findAllElementsByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_QUICK_CHECKOUT_ACTIONS, wrapper);
    if (!webPaymentsActionsElements || webPaymentsActionsElements.length === 0 || !hasItems(data)) {
        return;
    }
    webPaymentsActionsElements.forEach((webPaymentsActions)=>{
        (0, _commerceUtils.hideElement)(webPaymentsActions);
        if (!stripeStore || !stripeStore.isInitialized() || !data.data.site.commerce.quickCheckoutEnabled) {
            return;
        }
        const stripeInstance = parseInt(// @ts-expect-error - TS2345 - Argument of type 'string | null' is not assignable to parameter of type 'string'.
        wrapper.getAttribute(_constants.STRIPE_ELEMENT_INSTANCE), 10);
        const paymentRequest = stripeStore.updateCartPaymentRequest(stripeInstance, data.data.database.commerceOrder, data.data.site.commerce);
        if (!paymentRequest || typeof paymentRequest.canMakePayment !== 'function') {
            return;
        }
        if ((0, _commerceUtils.isFreeOrder)(data)) {
            return;
        }
        paymentRequest.canMakePayment()// @ts-expect-error - TS7006 - Parameter 'result' implicitly has an 'any' type.
        .then((result)=>{
            if (!result) {
                return;
            }
            const { applePay } = result;
            (0, _commerceUtils.showElement)(webPaymentsActions);
            const cartCheckoutButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_QUICK_CHECKOUT_BUTTON, webPaymentsActions);
            const cartApplePayButton = (0, _commerceUtils.findElementByNodeType)(_constants.NODE_TYPE_COMMERCE_CART_APPLE_PAY_BUTTON, webPaymentsActions);
            if (!cartCheckoutButton || !cartApplePayButton) {
                return;
            }
            if (applePay) {
                (0, _commerceUtils.hideElement)(cartCheckoutButton);
                (0, _commerceUtils.showElement)(cartApplePayButton);
            } else {
                (0, _commerceUtils.hideElement)(cartApplePayButton);
                (0, _commerceUtils.showElement)(cartCheckoutButton);
            }
        }).catch(()=>{
            _debug.default.log('PaymentRequest not available in this browser – silently exiting');
        });
    });
};
const getShippingMethodsQuery = (0, _graphqltag.default)`
  query FetchShippingMethods {
    database {
      id
      commerceOrder {
        id
        availableShippingMethods {
          id
          name
          description
          price {
            value
          }
        }
      }
    }
  }
`;
const handleWebPaymentsButton = (event, apolloClient, stripeStore)=>{
    event.preventDefault();
    if (window.Webflow.env('design') || window.Webflow.env('preview')) {
        if (window.Webflow.env('preview')) {
            window.alert('Web Payments is not available in preview mode.');
        }
        return;
    }
    const { currentTarget } = event;
    const stripeElement = (0, _commerceUtils.findClosestElementWithAttribute)(_constants.STRIPE_ELEMENT_INSTANCE, // @ts-expect-error - TS2345 - Argument of type 'EventTarget | null' is not assignable to parameter of type 'EventTarget'.
    currentTarget);
    if (!(stripeElement instanceof Element)) {
        return;
    }
    const stripeInstance = parseInt(// @ts-expect-error - TS2345 - Argument of type 'string | null' is not assignable to parameter of type 'string'.
    stripeElement.getAttribute(_constants.STRIPE_ELEMENT_INSTANCE), 10);
    const paymentRequest = stripeStore.getCartPaymentRequest(stripeInstance);
    // @ts-expect-error - TS18048 - 'paymentRequest' is possibly 'undefined'.
    paymentRequest.show();
    // @ts-expect-error - TS18048 - 'paymentRequest' is possibly 'undefined'.
    if (paymentRequest.hasRegisteredListener('paymentmethod')) {
        // we remove any existing event listeners, which can happen if the modal
        // was closed before a successful payment occurred
        // @ts-expect-error - TS18048 - 'paymentRequest' is possibly 'undefined'.
        paymentRequest.removeAllListeners();
    }
    // @ts-expect-error - TS18048 - 'paymentRequest' is possibly 'undefined'.
    paymentRequest.on('shippingaddresschange', // @ts-expect-error - TS7031 - Binding element 'updateWith' implicitly has an 'any' type. | TS7031 - Binding element 'shippingAddress' implicitly has an 'any' type.
    ({ updateWith, shippingAddress })=>{
        // @ts-expect-error - TS7034 - Variable 'shippingMethods' implicitly has type 'any[]' in some locations where its type cannot be determined.
        let shippingMethods = [];
        const graphQlQuery = stripeElement.getAttribute(_constants.CART_QUERY) || stripeElement.getAttribute(_constants.CHECKOUT_QUERY);
        // In some cases we receive an obfuscated address from quick checkout service (e.g. Apple pay)
        // We're using a different mutation to mark such address as 'obfuscated' in order to skip address validation when calculating taxes
        (0, _checkoutUtils.createUpdateObfuscatedOrderAddressMutation)(apolloClient, {
            type: 'shipping',
            name: shippingAddress.recipient,
            address_line1: shippingAddress.addressLine[0],
            address_line2: shippingAddress.addressLine[1],
            address_city: shippingAddress.city,
            address_state: shippingAddress.region,
            address_country: shippingAddress.country,
            address_zip: shippingAddress.postalCode
        }).then(()=>{
            return apolloClient.query({
                query: getShippingMethodsQuery,
                fetchPolicy: 'network-only',
                errorPolicy: 'all'
            });
        }).then(({ data })=>{
            if (!data.database.commerceOrder.availableShippingMethods || data.database.commerceOrder.availableShippingMethods.length === 0) {
                updateWith({
                    status: 'invalid_shipping_address'
                });
                return Promise.reject('No valid shipping addresses');
            } else {
                shippingMethods = data.database.commerceOrder.availableShippingMethods;
                return (0, _checkoutUtils.createOrderShippingMethodMutation)(apolloClient, data.database.commerceOrder.availableShippingMethods[0].id);
            }
        }).then(()=>{
            return (0, _checkoutUtils.createRecalcOrderEstimationsMutation)(apolloClient);
        }).then(()=>{
            return apolloClient.query({
                query: (0, _graphqltag.default)`
              ${graphQlQuery}
            `,
                fetchPolicy: 'network-only',
                errorPolicy: 'all'
            });
        }).then(({ data })=>{
            updateWith({
                status: 'success',
                displayItems: (0, _stripeStore.generateDisplayItemsFromOrder)(data.database.commerceOrder, true),
                shippingOptions: // @ts-expect-error - TS7005 - Variable 'shippingMethods' implicitly has an 'any[]' type.
                (0, _stripeStore.generateShippingOptionsFromMethods)(shippingMethods),
                total: {
                    amount: data.database.commerceOrder.total.value,
                    label: 'Total',
                    pending: false
                }
            });
        });
    });
    // @ts-expect-error - TS7031 - Binding element 'updateWith' implicitly has an 'any' type. | TS7031 - Binding element 'shippingOption' implicitly has an 'any' type.
    paymentRequest.on('shippingoptionchange', ({ updateWith, shippingOption })=>{
        const graphQlQuery = stripeElement.getAttribute(_constants.CART_QUERY) || stripeElement.getAttribute(_constants.CHECKOUT_QUERY);
        (0, _checkoutUtils.createOrderShippingMethodMutation)(apolloClient, shippingOption.id).then(()=>{
            return (0, _checkoutUtils.createRecalcOrderEstimationsMutation)(apolloClient);
        }).then(()=>{
            return apolloClient.query({
                query: (0, _graphqltag.default)`
            ${graphQlQuery}
          `,
                fetchPolicy: 'network-only',
                errorPolicy: 'all'
            });
        }).then(({ data })=>{
            updateWith({
                status: 'success',
                displayItems: (0, _stripeStore.generateDisplayItemsFromOrder)(data.database.commerceOrder, true),
                total: {
                    amount: data.database.commerceOrder.total.value,
                    label: 'Total',
                    pending: false
                }
            });
        });
    });
    // @ts-expect-error - TS7006 - Parameter 'ev' implicitly has an 'any' type.
    paymentRequest.on('paymentmethod', (ev)=>{
        (0, _commerceUtils.fetchOrderStatusFlags)(apolloClient).then(({ requiresShipping })=>{
            return Promise.all([
                (0, _checkoutUtils.createOrderIdentityMutation)(apolloClient, ev.payerEmail),
                requiresShipping ? (0, _checkoutUtils.createOrderAddressMutation)(apolloClient, {
                    type: 'shipping',
                    name: ev.shippingAddress.recipient,
                    address_line1: ev.shippingAddress.addressLine[0],
                    address_line2: ev.shippingAddress.addressLine[1],
                    address_city: ev.shippingAddress.city,
                    address_state: ev.shippingAddress.region,
                    address_country: ev.shippingAddress.country,
                    address_zip: ev.shippingAddress.postalCode
                }) : Promise.resolve(),
                (0, _checkoutUtils.createOrderAddressMutation)(apolloClient, {
                    type: 'billing',
                    name: ev.paymentMethod.billing_details.name,
                    address_line1: ev.paymentMethod.billing_details.address.line1,
                    address_line2: ev.paymentMethod.billing_details.address.line2,
                    address_city: ev.paymentMethod.billing_details.address.city,
                    address_state: ev.paymentMethod.billing_details.address.state,
                    address_country: ev.paymentMethod.billing_details.address.country,
                    address_zip: ev.paymentMethod.billing_details.address.postal_code
                }),
                requiresShipping ? (0, _checkoutUtils.createOrderShippingMethodMutation)(apolloClient, ev.shippingOption.id) : Promise.resolve(),
                (0, _checkoutUtils.createStripePaymentMethodMutation)(apolloClient, ev.paymentMethod.id)
            ]);
        }).then(()=>{
            return (0, _checkoutUtils.createAttemptSubmitOrderRequest)(apolloClient, {
                checkoutType: 'quickCheckout'
            });
        }).then((data)=>{
            const order = (0, _checkoutUtils.getOrderDataFromGraphQLResponse)(data);
            if ((0, _checkoutUtils.orderRequiresAdditionalAction)(order.status)) {
                ev.complete('success');
                const stripe = stripeStore.getStripeInstance();
                // @ts-expect-error - TS7006 - Parameter 'result' implicitly has an 'any' type.
                return stripe.handleCardAction(order.clientSecret).then((result)=>{
                    if (result.error) {
                        return Promise.reject(new Error('payment_intent_failed'));
                    }
                    return (0, _checkoutUtils.createAttemptSubmitOrderRequest)(apolloClient, {
                        checkoutType: 'quickCheckout',
                        paymentIntentId: result.paymentIntent.id
                    }).then((resp)=>{
                        const finishedOrder = (0, _checkoutUtils.getOrderDataFromGraphQLResponse)(resp);
                        if (finishedOrder.ok) {
                            (0, _checkoutUtils.redirectToOrderConfirmation)(finishedOrder);
                        } else {
                            return Promise.reject(new Error('payment_intent_failed'));
                        }
                    });
                });
            }
            if (order.ok) {
                ev.complete('success');
                (0, _checkoutUtils.redirectToOrderConfirmation)(order);
            } else {
                return Promise.reject(new Error('order_failed'));
            }
        }).catch((err)=>{
            const hasGraphQLErrors = err && err.graphQLErrors && err.graphQLErrors.length > 0;
            if (hasGraphQLErrors) {
                switch(err.graphQLErrors[0].code){
                    case 'PriceChanged':
                        {
                            ev.complete('success');
                            // We have to wrap this in a small timeout or else the error won't show up and the payment dialog will time out
                            setTimeout(()=>{
                                window.alert('The prices of one or more items in your cart have changed. Please refresh this page and try again.');
                            }, 100);
                            return;
                        }
                    case 'ItemNotFound':
                        {
                            ev.complete('success');
                            setTimeout(()=>{
                                window.alert('One or more of the products in your cart have been removed. Please refresh the page and try again.');
                            }, 100);
                            return;
                        }
                    case 'OrderTotalRange':
                        {
                            ev.complete('success');
                            (0, _checkoutUtils.showErrorMessageForError)(err, ev.currentTarget);
                            if ((0, _cartUtils.isCartOpen)()) {
                                (0, _cartUtils.showErrorMessageForError)(err, ev.currentTarget);
                            }
                            return;
                        }
                    default:
                }
            }
            if (err && err.message && err.message === 'payment_intent_failed') {
                // in the case that we failed outside of the browser UI (i.e. when we had to fall back to the page for 3d secure)
                // we're going to not call the `ev.complete`, since we already had to mark it with `success` to get back to the page
                // and since we don't have an error element, we're going to pop up an alert informing them of the issue
                window.alert('There was an error processing your payment. Please try again, or contact us if you continue to have problems.');
            } else {
                // otherwise, since we're still in the native browser UI, we can rely on the browser to tell them that something went wrong
                ev.complete('fail');
            }
        });
    });
};
const register = (handlerProxy)=>{
    handlerProxy.on('click', isWebPaymentsButtonEvent, handleWebPaymentsButton);
    handlerProxy.on('keydown', isWebPaymentsButtonEvent, (event, ...rest)=>{
        // @ts-expect-error - TS2339 - Property 'which' does not exist on type 'Event'.
        if (event.which === 32) {
            // prevent scrolling on spacebar key press
            event.preventDefault();
        }
        // @ts-expect-error - TS2339 - Property 'which' does not exist on type 'Event'.
        if (event.which === 13) {
            // enter key press
            return handleWebPaymentsButton(event, ...rest);
        }
    });
    handlerProxy.on('keyup', isWebPaymentsButtonEvent, (event, ...rest)=>{
        // @ts-expect-error - TS2339 - Property 'which' does not exist on type 'Event'.
        if (event.which === 32) {
            // spacebar key press
            return handleWebPaymentsButton(event, ...rest);
        }
    });
};
const _default = {
    register
};

//# sourceMappingURL=data:application/json;base64,

}),
64054: (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Webflow: E-commerce
 */ 
const Webflow = __webpack_require__(43949);
// $FlowFixMe[cannot-resolve-module] Added when migrating to TypeScript
const { design, destroy, init, preview } = __webpack_require__(2330);
Webflow.define('commerce', module.exports = function() {
    return {
        design,
        destroy,
        init,
        preview
    };
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYmZsb3ctY29tbWVyY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBXZWJmbG93OiBFLWNvbW1lcmNlXG4gKi9cbmNvbnN0IFdlYmZsb3cgPSByZXF1aXJlKCcuLi9CYXNlU2l0ZU1vZHVsZXMvd2ViZmxvdy1saWInKTtcbi8vICRGbG93Rml4TWVbY2Fubm90LXJlc29sdmUtbW9kdWxlXSBBZGRlZCB3aGVuIG1pZ3JhdGluZyB0byBUeXBlU2NyaXB0XG5jb25zdCB7ZGVzaWduLCBkZXN0cm95LCBpbml0LCBwcmV2aWV3fSA9IHJlcXVpcmUoJy4vbW9kdWxlcycpO1xuXG5XZWJmbG93LmRlZmluZShcbiAgJ2NvbW1lcmNlJyxcbiAgKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7ZGVzaWduLCBkZXN0cm95LCBpbml0LCBwcmV2aWV3fTtcbiAgfSlcbik7XG4iXSwibmFtZXMiOlsiV2ViZmxvdyIsInJlcXVpcmUiLCJkZXNpZ24iLCJkZXN0cm95IiwiaW5pdCIsInByZXZpZXciLCJkZWZpbmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Q0FFQztBQUNELE1BQU1BLFVBQVVDLFFBQVE7QUFDeEIsdUVBQXVFO0FBQ3ZFLE1BQU0sRUFBQ0MsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFDLEdBQUdKLFFBQVE7QUFFakRELFFBQVFNLE1BQU0sQ0FDWixZQUNDQyxPQUFPQyxPQUFPLEdBQUc7SUFDaEIsT0FBTztRQUFDTjtRQUFRQztRQUFTQztRQUFNQztJQUFPO0FBQ3hDIn0=

}),
48935: (function (__unused_webpack_module, exports) {
"use strict";
// Please keep this file small: it gets imported by published site code.

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CLASS_NAME_DYNAMIC_LIST: function() {
        return CLASS_NAME_DYNAMIC_LIST;
    },
    CLASS_NAME_DYNAMIC_LIST_COLUMN: function() {
        return CLASS_NAME_DYNAMIC_LIST_COLUMN;
    },
    CLASS_NAME_DYNAMIC_LIST_ITEM: function() {
        return CLASS_NAME_DYNAMIC_LIST_ITEM;
    },
    CLASS_NAME_DYNAMIC_LIST_REPEATER_ITEM: function() {
        return CLASS_NAME_DYNAMIC_LIST_REPEATER_ITEM;
    },
    CLASS_NAME_DYNAMIC_LIST_REPEATER_REF: function() {
        return CLASS_NAME_DYNAMIC_LIST_REPEATER_REF;
    },
    CLASS_NAME_DYNAMIC_LIST_ROW: function() {
        return CLASS_NAME_DYNAMIC_LIST_ROW;
    },
    CLASS_NAME_DYNAMIC_WRAPPER: function() {
        return CLASS_NAME_DYNAMIC_WRAPPER;
    },
    getColumnNumberClassName: function() {
        return getColumnNumberClassName;
    }
});
const CLASS_NAME_DYNAMIC_WRAPPER = 'w-dyn-list';
const CLASS_NAME_DYNAMIC_LIST = 'w-dyn-items';
const CLASS_NAME_DYNAMIC_LIST_REPEATER_REF = 'w-dyn-items-repeater-ref';
const CLASS_NAME_DYNAMIC_LIST_ITEM = 'w-dyn-item';
const CLASS_NAME_DYNAMIC_LIST_REPEATER_ITEM = 'w-dyn-repeater-item';
const CLASS_NAME_DYNAMIC_LIST_ROW = 'w-row';
const CLASS_NAME_DYNAMIC_LIST_COLUMN = 'w-col';
const getColumnNumberClassName = (cols)=>`w-col-${cols}`;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnN0YW50cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBQbGVhc2Uga2VlcCB0aGlzIGZpbGUgc21hbGw6IGl0IGdldHMgaW1wb3J0ZWQgYnkgcHVibGlzaGVkIHNpdGUgY29kZS5cblxuZXhwb3J0IGNvbnN0IENMQVNTX05BTUVfRFlOQU1JQ19XUkFQUEVSID0gJ3ctZHluLWxpc3QnO1xuZXhwb3J0IGNvbnN0IENMQVNTX05BTUVfRFlOQU1JQ19MSVNUID0gJ3ctZHluLWl0ZW1zJztcbmV4cG9ydCBjb25zdCBDTEFTU19OQU1FX0RZTkFNSUNfTElTVF9SRVBFQVRFUl9SRUYgPSAndy1keW4taXRlbXMtcmVwZWF0ZXItcmVmJztcbmV4cG9ydCBjb25zdCBDTEFTU19OQU1FX0RZTkFNSUNfTElTVF9JVEVNID0gJ3ctZHluLWl0ZW0nO1xuZXhwb3J0IGNvbnN0IENMQVNTX05BTUVfRFlOQU1JQ19MSVNUX1JFUEVBVEVSX0lURU0gPSAndy1keW4tcmVwZWF0ZXItaXRlbSc7XG5leHBvcnQgY29uc3QgQ0xBU1NfTkFNRV9EWU5BTUlDX0xJU1RfUk9XID0gJ3ctcm93JztcbmV4cG9ydCBjb25zdCBDTEFTU19OQU1FX0RZTkFNSUNfTElTVF9DT0xVTU4gPSAndy1jb2wnO1xuXG5leHBvcnQgY29uc3QgZ2V0Q29sdW1uTnVtYmVyQ2xhc3NOYW1lID0gKGNvbHM6IHN0cmluZykgPT4gYHctY29sLSR7Y29sc31gO1xuIl0sIm5hbWVzIjpbIkNMQVNTX05BTUVfRFlOQU1JQ19MSVNUIiwiQ0xBU1NfTkFNRV9EWU5BTUlDX0xJU1RfQ09MVU1OIiwiQ0xBU1NfTkFNRV9EWU5BTUlDX0xJU1RfSVRFTSIsIkNMQVNTX05BTUVfRFlOQU1JQ19MSVNUX1JFUEVBVEVSX0lURU0iLCJDTEFTU19OQU1FX0RZTkFNSUNfTElTVF9SRVBFQVRFUl9SRUYiLCJDTEFTU19OQU1FX0RZTkFNSUNfTElTVF9ST1ciLCJDTEFTU19OQU1FX0RZTkFNSUNfV1JBUFBFUiIsImdldENvbHVtbk51bWJlckNsYXNzTmFtZSIsImNvbHMiXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTs7Ozs7Ozs7Ozs7O0lBRzNEQSx1QkFBdUI7ZUFBdkJBOztJQUtBQyw4QkFBOEI7ZUFBOUJBOztJQUhBQyw0QkFBNEI7ZUFBNUJBOztJQUNBQyxxQ0FBcUM7ZUFBckNBOztJQUZBQyxvQ0FBb0M7ZUFBcENBOztJQUdBQywyQkFBMkI7ZUFBM0JBOztJQUxBQywwQkFBMEI7ZUFBMUJBOztJQVFBQyx3QkFBd0I7ZUFBeEJBOzs7QUFSTixNQUFNRCw2QkFBNkI7QUFDbkMsTUFBTU4sMEJBQTBCO0FBQ2hDLE1BQU1JLHVDQUF1QztBQUM3QyxNQUFNRiwrQkFBK0I7QUFDckMsTUFBTUMsd0NBQXdDO0FBQzlDLE1BQU1FLDhCQUE4QjtBQUNwQyxNQUFNSixpQ0FBaUM7QUFFdkMsTUFBTU0sMkJBQTJCLENBQUNDLE9BQWlCLENBQUMsTUFBTSxFQUFFQSxLQUFLLENBQUMifQ==

}),
73392: (function (__unused_webpack_module, exports) {
"use strict";
/*
 * WARNING
 *
 * This file is included in the `webflow.js` bundle, so
 * please refrain from adding dependencies that might
 * have an outsized impact on bundle size.
 *
 * Thank you!
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "createJsonFromBoundMedia", ({
    enumerable: true,
    get: function() {
        return createJsonFromBoundMedia;
    }
}));
const createJsonItemFromBoundMedia = (binding)=>{
    if (binding) {
        if (binding.metadata) {
            const { html, height, width, thumbnail_url: thumbnailUrl } = binding.metadata;
            return {
                url: binding.url,
                html,
                height,
                width,
                thumbnailUrl,
                type: 'video'
            };
        } else {
            return {
                url: binding.url,
                type: 'image'
            };
        }
    }
    return null;
};
const createJsonFromBoundMedia = (binding, nodeJsonData)=>{
    const group = nodeJsonData ? nodeJsonData.group : undefined;
    if (Array.isArray(binding)) {
        const items = binding.reduce((memo, subBinding)=>{
            const jsonItem = createJsonItemFromBoundMedia(subBinding);
            if (jsonItem) {
                memo.push(jsonItem);
            }
            return memo;
        }, []);
        return items.length > 0 ? {
            items,
            group
        } : null;
    }
    const jsonItem = createJsonItemFromBoundMedia(binding);
    return jsonItem !== null ? {
        items: [
            jsonItem
        ],
        group
    } : null;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBXQVJOSU5HXG4gKlxuICogVGhpcyBmaWxlIGlzIGluY2x1ZGVkIGluIHRoZSBgd2ViZmxvdy5qc2AgYnVuZGxlLCBzb1xuICogcGxlYXNlIHJlZnJhaW4gZnJvbSBhZGRpbmcgZGVwZW5kZW5jaWVzIHRoYXQgbWlnaHRcbiAqIGhhdmUgYW4gb3V0c2l6ZWQgaW1wYWN0IG9uIGJ1bmRsZSBzaXplLlxuICpcbiAqIFRoYW5rIHlvdSFcbiAqL1xuXG50eXBlIExpZ2h0Ym94SnNvbiA9IHtcbiAgaXRlbXM6IEFycmF5PExpZ2h0Ym94SnNvbkl0ZW0+O1xuICBncm91cDogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZDtcbn07XG5cbnR5cGUgTGlnaHRib3hKc29uSXRlbSA9IHtcbiAgdXJsOiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcbiAgaHRtbD86IHN0cmluZztcbiAgaGVpZ2h0PzogbnVtYmVyO1xuICB3aWR0aD86IG51bWJlcjtcbiAgdGh1bWJuYWlsVXJsPzogc3RyaW5nO1xufTtcblxuY29uc3QgY3JlYXRlSnNvbkl0ZW1Gcm9tQm91bmRNZWRpYSA9IChcbiAgYmluZGluZzogYW55XG4pOiBMaWdodGJveEpzb25JdGVtIHwgbnVsbCA9PiB7XG4gIGlmIChiaW5kaW5nKSB7XG4gICAgaWYgKGJpbmRpbmcubWV0YWRhdGEpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgaHRtbCxcbiAgICAgICAgaGVpZ2h0LFxuICAgICAgICB3aWR0aCxcbiAgICAgICAgdGh1bWJuYWlsX3VybDogdGh1bWJuYWlsVXJsLFxuICAgICAgfSA9IGJpbmRpbmcubWV0YWRhdGE7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1cmw6IGJpbmRpbmcudXJsLFxuICAgICAgICBodG1sLFxuICAgICAgICBoZWlnaHQsXG4gICAgICAgIHdpZHRoLFxuICAgICAgICB0aHVtYm5haWxVcmwsXG4gICAgICAgIHR5cGU6ICd2aWRlbycsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge3VybDogYmluZGluZy51cmwsIHR5cGU6ICdpbWFnZSd9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVKc29uRnJvbUJvdW5kTWVkaWEgPSAoXG4gIGJpbmRpbmc6IGFueSxcbiAgbm9kZUpzb25EYXRhPzogTGlnaHRib3hKc29uIHwgbnVsbFxuKTogTGlnaHRib3hKc29uIHwgbnVsbCA9PiB7XG4gIGNvbnN0IGdyb3VwID0gbm9kZUpzb25EYXRhID8gbm9kZUpzb25EYXRhLmdyb3VwIDogdW5kZWZpbmVkO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmcpKSB7XG4gICAgY29uc3QgaXRlbXMgPSBiaW5kaW5nLnJlZHVjZSgobWVtbywgc3ViQmluZGluZykgPT4ge1xuICAgICAgY29uc3QganNvbkl0ZW0gPSBjcmVhdGVKc29uSXRlbUZyb21Cb3VuZE1lZGlhKHN1YkJpbmRpbmcpO1xuICAgICAgaWYgKGpzb25JdGVtKSB7XG4gICAgICAgIG1lbW8ucHVzaChqc29uSXRlbSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4gaXRlbXMubGVuZ3RoID4gMCA/IHtpdGVtcywgZ3JvdXB9IDogbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGpzb25JdGVtID0gY3JlYXRlSnNvbkl0ZW1Gcm9tQm91bmRNZWRpYShiaW5kaW5nKTtcbiAgcmV0dXJuIGpzb25JdGVtICE9PSBudWxsXG4gICAgPyB7XG4gICAgICAgIGl0ZW1zOiBbanNvbkl0ZW1dLFxuICAgICAgICBncm91cCxcbiAgICAgIH1cbiAgICA6IG51bGw7XG59O1xuIl0sIm5hbWVzIjpbImNyZWF0ZUpzb25Gcm9tQm91bmRNZWRpYSIsImNyZWF0ZUpzb25JdGVtRnJvbUJvdW5kTWVkaWEiLCJiaW5kaW5nIiwibWV0YWRhdGEiLCJodG1sIiwiaGVpZ2h0Iiwid2lkdGgiLCJ0aHVtYm5haWxfdXJsIiwidGh1bWJuYWlsVXJsIiwidXJsIiwidHlwZSIsIm5vZGVKc29uRGF0YSIsImdyb3VwIiwidW5kZWZpbmVkIiwiQXJyYXkiLCJpc0FycmF5IiwiaXRlbXMiLCJyZWR1Y2UiLCJtZW1vIiwic3ViQmluZGluZyIsImpzb25JdGVtIiwicHVzaCIsImxlbmd0aCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0NBUUM7Ozs7K0JBMENZQTs7O2VBQUFBOzs7QUExQmIsTUFBTUMsK0JBQStCLENBQ25DQztJQUVBLElBQUlBLFNBQVM7UUFDWCxJQUFJQSxRQUFRQyxRQUFRLEVBQUU7WUFDcEIsTUFBTSxFQUNKQyxJQUFJLEVBQ0pDLE1BQU0sRUFDTkMsS0FBSyxFQUNMQyxlQUFlQyxZQUFZLEVBQzVCLEdBQUdOLFFBQVFDLFFBQVE7WUFDcEIsT0FBTztnQkFDTE0sS0FBS1AsUUFBUU8sR0FBRztnQkFDaEJMO2dCQUNBQztnQkFDQUM7Z0JBQ0FFO2dCQUNBRSxNQUFNO1lBQ1I7UUFDRixPQUFPO1lBQ0wsT0FBTztnQkFBQ0QsS0FBS1AsUUFBUU8sR0FBRztnQkFBRUMsTUFBTTtZQUFPO1FBQ3pDO0lBQ0Y7SUFDQSxPQUFPO0FBQ1Q7QUFFTyxNQUFNViwyQkFBMkIsQ0FDdENFLFNBQ0FTO0lBRUEsTUFBTUMsUUFBUUQsZUFBZUEsYUFBYUMsS0FBSyxHQUFHQztJQUVsRCxJQUFJQyxNQUFNQyxPQUFPLENBQUNiLFVBQVU7UUFDMUIsTUFBTWMsUUFBUWQsUUFBUWUsTUFBTSxDQUFDLENBQUNDLE1BQU1DO1lBQ2xDLE1BQU1DLFdBQVduQiw2QkFBNkJrQjtZQUM5QyxJQUFJQyxVQUFVO2dCQUNaRixLQUFLRyxJQUFJLENBQUNEO1lBQ1o7WUFDQSxPQUFPRjtRQUNULEdBQUcsRUFBRTtRQUVMLE9BQU9GLE1BQU1NLE1BQU0sR0FBRyxJQUFJO1lBQUNOO1lBQU9KO1FBQUssSUFBSTtJQUM3QztJQUVBLE1BQU1RLFdBQVduQiw2QkFBNkJDO0lBQzlDLE9BQU9rQixhQUFhLE9BQ2hCO1FBQ0VKLE9BQU87WUFBQ0k7U0FBUztRQUNqQlI7SUFDRixJQUNBO0FBQ04ifQ==

}),
32949: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
_export_star(__webpack_require__(31350), exports);
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vdXRpbHMvQ29tbWVyY2UnO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWMifQ==

}),
31350: (function (__unused_webpack_module, exports) {
"use strict";
// keep this file as simple as possible and avoid any additional imports, as this can increase published site bundle size a location

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getProductOptionValueName: function() {
        return getProductOptionValueName;
    },
    simplifySkuValues: function() {
        return simplifySkuValues;
    }
});
const simplifySkuValues = (skuValues)=>skuValues.reduce((acc, pair)=>{
        acc[pair.property.id] = pair.value.id;
        return acc;
    }, {});
const getProductOptionValueName = (property, simplifiedSkuValues)=>{
    if (property.id && property.enum) {
        const propValueId = simplifiedSkuValues[property.id];
        const propValue = property.enum.find((value)=>value.id === propValueId);
        if (propValue && typeof propValue.name === 'string') {
            return propValue.name;
        }
    }
    return '';
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvbW1lcmNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGtlZXAgdGhpcyBmaWxlIGFzIHNpbXBsZSBhcyBwb3NzaWJsZSBhbmQgYXZvaWQgYW55IGFkZGl0aW9uYWwgaW1wb3J0cywgYXMgdGhpcyBjYW4gaW5jcmVhc2UgcHVibGlzaGVkIHNpdGUgYnVuZGxlIHNpemUgYSBsb2NhdGlvblxuXG5pbXBvcnQgdHlwZSB7UHJvcGVydHl9IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL2NvbW1lcmNlL2NvcmUnO1xuXG50eXBlIFNpbXBsaWZpZWRTa3VWYWx1ZXMgPSB7XG4gIFtwcm9wZXJ0eUlkOiBzdHJpbmddOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY29uc3Qgc2ltcGxpZnlTa3VWYWx1ZXMgPSAoXG4gIHNrdVZhbHVlczogQXJyYXk8e1xuICAgIHByb3BlcnR5OiB7XG4gICAgICBpZDogc3RyaW5nO1xuICAgIH07XG4gICAgdmFsdWU6IHtcbiAgICAgIGlkOiBzdHJpbmc7XG4gICAgfTtcbiAgfT5cbik6IFNpbXBsaWZpZWRTa3VWYWx1ZXMgPT5cbiAgc2t1VmFsdWVzLnJlZHVjZTxSZWNvcmQ8c3RyaW5nLCBhbnk+PigoYWNjLCBwYWlyKSA9PiB7XG4gICAgYWNjW3BhaXIucHJvcGVydHkuaWRdID0gcGFpci52YWx1ZS5pZDtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbmV4cG9ydCBjb25zdCBnZXRQcm9kdWN0T3B0aW9uVmFsdWVOYW1lID0gKFxuICBwcm9wZXJ0eTogUHJvcGVydHksXG4gIHNpbXBsaWZpZWRTa3VWYWx1ZXM6IFNpbXBsaWZpZWRTa3VWYWx1ZXNcbik6IHN0cmluZyA9PiB7XG4gIGlmIChwcm9wZXJ0eS5pZCAmJiBwcm9wZXJ0eS5lbnVtKSB7XG4gICAgY29uc3QgcHJvcFZhbHVlSWQgPSBzaW1wbGlmaWVkU2t1VmFsdWVzW3Byb3BlcnR5LmlkXTtcbiAgICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wZXJ0eS5lbnVtLmZpbmQoKHZhbHVlKSA9PiB2YWx1ZS5pZCA9PT0gcHJvcFZhbHVlSWQpO1xuICAgIGlmIChwcm9wVmFsdWUgJiYgdHlwZW9mIHByb3BWYWx1ZS5uYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHByb3BWYWx1ZS5uYW1lO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59O1xuIl0sIm5hbWVzIjpbImdldFByb2R1Y3RPcHRpb25WYWx1ZU5hbWUiLCJzaW1wbGlmeVNrdVZhbHVlcyIsInNrdVZhbHVlcyIsInJlZHVjZSIsImFjYyIsInBhaXIiLCJwcm9wZXJ0eSIsImlkIiwidmFsdWUiLCJzaW1wbGlmaWVkU2t1VmFsdWVzIiwiZW51bSIsInByb3BWYWx1ZUlkIiwicHJvcFZhbHVlIiwiZmluZCIsIm5hbWUiXSwibWFwcGluZ3MiOiJBQUFBLG9JQUFvSTs7Ozs7Ozs7Ozs7O0lBdUJ2SEEseUJBQXlCO2VBQXpCQTs7SUFmQUMsaUJBQWlCO2VBQWpCQTs7O0FBQU4sTUFBTUEsb0JBQW9CLENBQy9CQyxZQVNBQSxVQUFVQyxNQUFNLENBQXNCLENBQUNDLEtBQUtDO1FBQzFDRCxHQUFHLENBQUNDLEtBQUtDLFFBQVEsQ0FBQ0MsRUFBRSxDQUFDLEdBQUdGLEtBQUtHLEtBQUssQ0FBQ0QsRUFBRTtRQUNyQyxPQUFPSDtJQUNULEdBQUcsQ0FBQztBQUVDLE1BQU1KLDRCQUE0QixDQUN2Q00sVUFDQUc7SUFFQSxJQUFJSCxTQUFTQyxFQUFFLElBQUlELFNBQVNJLElBQUksRUFBRTtRQUNoQyxNQUFNQyxjQUFjRixtQkFBbUIsQ0FBQ0gsU0FBU0MsRUFBRSxDQUFDO1FBQ3BELE1BQU1LLFlBQVlOLFNBQVNJLElBQUksQ0FBQ0csSUFBSSxDQUFDLENBQUNMLFFBQVVBLE1BQU1ELEVBQUUsS0FBS0k7UUFDN0QsSUFBSUMsYUFBYSxPQUFPQSxVQUFVRSxJQUFJLEtBQUssVUFBVTtZQUNuRCxPQUFPRixVQUFVRSxJQUFJO1FBQ3ZCO0lBQ0Y7SUFDQSxPQUFPO0FBQ1QifQ==

}),
34206: (function (__unused_webpack_module, exports) {
"use strict";
// Ecommerce data source definition uses this as the externalKey of the Products
// binding context type, while CommerceAddToCartWrapper uses this in its
// BindingContext Atom constraint.

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ORDER_ITEMS_BINDING_CONTEXT_EXTERNAL_KEY: function() {
        return ORDER_ITEMS_BINDING_CONTEXT_EXTERNAL_KEY;
    },
    PRODUCTS_BINDING_CONTEXT_EXTERNAL_KEY: function() {
        return PRODUCTS_BINDING_CONTEXT_EXTERNAL_KEY;
    }
});
const PRODUCTS_BINDING_CONTEXT_EXTERNAL_KEY = 'commerce-products-type';
const ORDER_ITEMS_BINDING_CONTEXT_EXTERNAL_KEY = 'commerce-order-items-type';

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJpbmRpbmdDb250ZXh0Q29uc3RhbnRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEVjb21tZXJjZSBkYXRhIHNvdXJjZSBkZWZpbml0aW9uIHVzZXMgdGhpcyBhcyB0aGUgZXh0ZXJuYWxLZXkgb2YgdGhlIFByb2R1Y3RzXG4vLyBiaW5kaW5nIGNvbnRleHQgdHlwZSwgd2hpbGUgQ29tbWVyY2VBZGRUb0NhcnRXcmFwcGVyIHVzZXMgdGhpcyBpbiBpdHNcbi8vIEJpbmRpbmdDb250ZXh0IEF0b20gY29uc3RyYWludC5cbmV4cG9ydCBjb25zdCBQUk9EVUNUU19CSU5ESU5HX0NPTlRFWFRfRVhURVJOQUxfS0VZID0gJ2NvbW1lcmNlLXByb2R1Y3RzLXR5cGUnO1xuXG4vLyBFY29tbWVyY2UgZGF0YSBzb3VyY2UgZGVmaW5pdGlvbiB1c2VzIHRoaXMgYXMgdGhlIGV4dGVybmFsS2V5IG9mIHRoZSBPcmRlciBJdGVtc1xuLy8gYmluZGluZyBjb250ZXh0IHR5cGUuXG5leHBvcnQgY29uc3QgT1JERVJfSVRFTVNfQklORElOR19DT05URVhUX0VYVEVSTkFMX0tFWSA9XG4gICdjb21tZXJjZS1vcmRlci1pdGVtcy10eXBlJztcbiJdLCJuYW1lcyI6WyJPUkRFUl9JVEVNU19CSU5ESU5HX0NPTlRFWFRfRVhURVJOQUxfS0VZIiwiUFJPRFVDVFNfQklORElOR19DT05URVhUX0VYVEVSTkFMX0tFWSJdLCJtYXBwaW5ncyI6IkFBQUEsZ0ZBQWdGO0FBQ2hGLHdFQUF3RTtBQUN4RSxrQ0FBa0M7Ozs7Ozs7Ozs7OztJQUtyQkEsd0NBQXdDO2VBQXhDQTs7SUFKQUMscUNBQXFDO2VBQXJDQTs7O0FBQU4sTUFBTUEsd0NBQXdDO0FBSTlDLE1BQU1ELDJDQUNYIn0=

}),
10873: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ACTIVE_STRIPE_SUBSCRIPTION_STATUSES: function() {
        return ACTIVE_STRIPE_SUBSCRIPTION_STATUSES;
    },
    ADVANCED_PRODUCT_TYPE: function() {
        return ADVANCED_PRODUCT_TYPE;
    },
    BILLING_METHOD_TYPES: function() {
        return BILLING_METHOD_TYPES;
    },
    CSV_CURRENCY_TEMPLATE: function() {
        return CSV_CURRENCY_TEMPLATE;
    },
    CSV_INTEGRATION_CURRENCY_TEMPLATE: function() {
        return CSV_INTEGRATION_CURRENCY_TEMPLATE;
    },
    DEFAULT_PRICE_TEMPLATE_VALUE: function() {
        return DEFAULT_PRICE_TEMPLATE_VALUE;
    },
    DEFAULT_PRODUCT_TYPE_ID: function() {
        return DEFAULT_PRODUCT_TYPE_ID;
    },
    DEFAULT_TAX_CATEGORY: function() {
        return DEFAULT_TAX_CATEGORY;
    },
    DIGITAL_PRODUCT_TYPE: function() {
        return DIGITAL_PRODUCT_TYPE;
    },
    DISCOUNTS_CSV_IMPORT_EXPORT_COLUMNS: function() {
        return DISCOUNTS_CSV_IMPORT_EXPORT_COLUMNS;
    },
    DISCOUNT_CODE_MAX_LENGTH: function() {
        return DISCOUNT_CODE_MAX_LENGTH;
    },
    DOWNLOAD_FILES_EDITABLE_FIELDS: function() {
        return DOWNLOAD_FILES_EDITABLE_FIELDS;
    },
    DOWNLOAD_FILES_FAKE_DATA: function() {
        return DOWNLOAD_FILES_FAKE_DATA;
    },
    DOWNLOAD_FILES_KEY_PATH: function() {
        return DOWNLOAD_FILES_KEY_PATH;
    },
    ECOMMERCE_PROVIDER_NAME_ENUM: function() {
        return ECOMMERCE_PROVIDER_NAME_ENUM;
    },
    INFINITE_INVENTORY: function() {
        return INFINITE_INVENTORY;
    },
    INVENTORY_TYPE_FINITE: function() {
        return INVENTORY_TYPE_FINITE;
    },
    INVENTORY_TYPE_INFINITE: function() {
        return INVENTORY_TYPE_INFINITE;
    },
    MAX_MEMBERSHIP_PRODUCTS: function() {
        return MAX_MEMBERSHIP_PRODUCTS;
    },
    MAX_PRODUCT_DIMENSION: function() {
        return MAX_PRODUCT_DIMENSION;
    },
    MAX_SEARCH_LIMIT: function() {
        return MAX_SEARCH_LIMIT;
    },
    MAX_TOTAL_ORDER_PRICE: function() {
        return MAX_TOTAL_ORDER_PRICE;
    },
    MEMBERSHIP_PRODUCT_TYPE: function() {
        return MEMBERSHIP_PRODUCT_TYPE;
    },
    ORDER_ID_RE: function() {
        return ORDER_ID_RE;
    },
    ORDER_ITEMS_BINDING_CONTEXT_EXTERNAL_KEY: function() {
        return _bindingContextConstants.ORDER_ITEMS_BINDING_CONTEXT_EXTERNAL_KEY;
    },
    ORDER_SORT_MODES: function() {
        return ORDER_SORT_MODES;
    },
    PHYSICAL_PRODUCT_TYPE: function() {
        return PHYSICAL_PRODUCT_TYPE;
    },
    PRICE_TEMPLATE_AMOUNT: function() {
        return PRICE_TEMPLATE_AMOUNT;
    },
    PRICE_TEMPLATE_CURRENCY_CODE: function() {
        return PRICE_TEMPLATE_CURRENCY_CODE;
    },
    PRICE_TEMPLATE_CURRENCY_SYMBOL: function() {
        return PRICE_TEMPLATE_CURRENCY_SYMBOL;
    },
    PRICE_TEMPLATE_OPTIONS: function() {
        return PRICE_TEMPLATE_OPTIONS;
    },
    PRODUCTS_BINDING_CONTEXT_EXTERNAL_KEY: function() {
        return _bindingContextConstants.PRODUCTS_BINDING_CONTEXT_EXTERNAL_KEY;
    },
    PRODUCT_TYPE_HELP_TEXT: function() {
        return PRODUCT_TYPE_HELP_TEXT;
    },
    REQUIRED_DISCOUNT_IMPORT_FIELDS: function() {
        return REQUIRED_DISCOUNT_IMPORT_FIELDS;
    },
    SERVICE_PRODUCT_TYPE: function() {
        return SERVICE_PRODUCT_TYPE;
    },
    SHIPPING_METHODS: function() {
        return SHIPPING_METHODS;
    },
    STRIPE_DISCONNECT_SUBSCRIPTIONS_ERROR_MESSAGE: function() {
        return STRIPE_DISCONNECT_SUBSCRIPTIONS_ERROR_MESSAGE;
    },
    STRIPE_SUBSCRIPTION_STATUS_ENUM: function() {
        return STRIPE_SUBSCRIPTION_STATUS_ENUM;
    },
    SUBSCRIPTION_INTERVAL_ENUM: function() {
        return SUBSCRIPTION_INTERVAL_ENUM;
    },
    SUBSCRIPTION_SORT_MODES: function() {
        return SUBSCRIPTION_SORT_MODES;
    },
    SUBSCRIPTION_STATUS_ENUM: function() {
        return SUBSCRIPTION_STATUS_ENUM;
    },
    SUBSCRIPTION_STATUS_PRETTY_ENUM: function() {
        return SUBSCRIPTION_STATUS_PRETTY_ENUM;
    },
    TEMPLATE_PRODUCT_TYPES: function() {
        return TEMPLATE_PRODUCT_TYPES;
    },
    paypalCurrencyList: function() {
        return _paypalCurrencyList.paypalCurrencyList;
    },
    stripeCurrencyList: function() {
        return _stripeCurrencyList.stripeCurrencyList;
    }
});
const _camelCase = /*#__PURE__*/ _interop_require_default(__webpack_require__(56034));
_export_star(__webpack_require__(41158), exports);
const _bindingContextConstants = __webpack_require__(34206);
const _paypalCurrencyList = __webpack_require__(25766);
const _stripeCurrencyList = __webpack_require__(37693);
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const ORDER_ID_RE = /^[0-9a-f]{5,}$/;
const SHIPPING_METHOD_FLAT = 'flat-rate';
const SHIPPING_METHOD_PERCENTAGE = 'percentage';
const SHIPPING_METHOD_PRICE = 'price';
const SHIPPING_METHOD_QUANTITY = 'quantity';
const SHIPPING_METHOD_WEIGHT = 'weight';
const SHIPPING_METHODS = Object.freeze({
    FLAT: SHIPPING_METHOD_FLAT,
    PERCENTAGE: SHIPPING_METHOD_PERCENTAGE,
    PRICE: SHIPPING_METHOD_PRICE,
    QUANTITY: SHIPPING_METHOD_QUANTITY,
    WEIGHT: SHIPPING_METHOD_WEIGHT
});
const DEFAULT_TAX_CATEGORY = 'standard-taxable';
const INVENTORY_TYPE_FINITE = 'finite';
const INVENTORY_TYPE_INFINITE = 'infinite';
const INFINITE_INVENTORY = {
    inventoryType: INVENTORY_TYPE_INFINITE,
    quantity: 0
};
const MAX_TOTAL_ORDER_PRICE = 99999999;
const MAX_PRODUCT_DIMENSION = 9000000000000000;
const MAX_MEMBERSHIP_PRODUCTS = 20;
const MAX_SEARCH_LIMIT = 100;
function _withDerivedValue({ label, type = 'PlainText', path = (0, _camelCase.default)(label), options = {
    readOnly: false,
    isNotAddable: false
} }) {
    return {
        label,
        type,
        ...options,
        value: JSON.stringify({
            path,
            type
        })
    };
}
const PRICE_TEMPLATE_CURRENCY_SYMBOL = _withDerivedValue({
    label: 'Currency symbol',
    path: 'symbol'
});
const PRICE_TEMPLATE_AMOUNT = _withDerivedValue({
    label: 'Amount',
    type: 'CommercePrice',
    options: {
        readOnly: true,
        isNotAddable: true
    }
});
const PRICE_TEMPLATE_CURRENCY_CODE = _withDerivedValue({
    label: 'Currency code'
});
const PRICE_TEMPLATE_OPTIONS = [
    PRICE_TEMPLATE_CURRENCY_SYMBOL,
    PRICE_TEMPLATE_AMOUNT,
    PRICE_TEMPLATE_CURRENCY_CODE
];
const _intoToken = (option)=>`{{wf ${option.value} }}`;
const DEFAULT_PRICE_TEMPLATE_VALUE = [
    _intoToken(PRICE_TEMPLATE_CURRENCY_SYMBOL),
    ' ',
    _intoToken(PRICE_TEMPLATE_AMOUNT),
    ' ',
    _intoToken(PRICE_TEMPLATE_CURRENCY_CODE)
].join('');
const CSV_CURRENCY_TEMPLATE = [
    _intoToken(PRICE_TEMPLATE_CURRENCY_SYMBOL),
    _intoToken(PRICE_TEMPLATE_AMOUNT)
].join('');
const CSV_INTEGRATION_CURRENCY_TEMPLATE = [
    _intoToken(PRICE_TEMPLATE_AMOUNT),
    ' ',
    _intoToken(PRICE_TEMPLATE_CURRENCY_CODE)
].join('');
const DOWNLOAD_FILES_FAKE_DATA = [
    {
        id: '5d8fcb6d94dd1853060fb3b3',
        name: 'The modern web design process - Webflow Ebook.pdf',
        url: 'https://assets-global.website-files.com/5cf6b7202bf8199f50d43e6c/5e9dd8a680b972888929747b_The%20modern%20web%20design%20process%20-%20Webflow%20Ebook.pdf'
    },
    {
        id: '5d8fcb6d94dd1853060fb3b4',
        name: 'The freelance web designers guide - Webflow Ebook.pdf',
        url: 'https://assets-global.website-files.com/5cf6b7202bf8199f50d43e6c/5e9dd8e6abe52b33243a22cf_The%20freelance%20web%20designer%E2%80%99s%20guide%20-%20Webflow%20Ebook.pdf'
    }
];
const DOWNLOAD_FILES_KEY_PATH = 'download-files';
const DOWNLOAD_FILES_EDITABLE_FIELDS = {
    name: true,
    url: true
};
const SUBSCRIPTION_INTERVAL_ENUM = [
    'day',
    'week',
    'month',
    'year'
];
const SUBSCRIPTION_STATUS_ENUM = {
    active: 'active',
    pastdue: 'pastdue',
    unpaid: 'unpaid',
    canceled: 'canceled',
    cancelPending: 'cancelPending',
    incomplete: 'incomplete',
    incompleteExpired: 'incompleteExpired',
    trialing: 'trialing',
    unknown: `unknown`
};
const SUBSCRIPTION_STATUS_PRETTY_ENUM = {
    active: 'active',
    pastdue: 'pastdue',
    unpaid: 'unpaid',
    canceled: 'canceled',
    cancelPending: 'cancelPending',
    incomplete: 'incomplete',
    incompleteExpired: 'incompleteExpired',
    trialing: 'in trial',
    unknown: `unknown`
};
const STRIPE_SUBSCRIPTION_STATUS_ENUM = {
    active: 'active',
    past_due: 'past_due',
    unpaid: 'unpaid',
    canceled: 'canceled',
    incomplete: 'incomplete',
    incomplete_expired: 'incomplete_expired',
    trialing: 'trialing'
};
const ACTIVE_STRIPE_SUBSCRIPTION_STATUSES = [
    STRIPE_SUBSCRIPTION_STATUS_ENUM.active,
    STRIPE_SUBSCRIPTION_STATUS_ENUM.past_due,
    STRIPE_SUBSCRIPTION_STATUS_ENUM.trialing
];
const ECOMMERCE_PROVIDER_NAME_ENUM = {
    stripe: 'stripe'
};
const BILLING_METHOD_TYPES = {
    subscription: 'subscription',
    oneTime: 'one-time'
};
const DEFAULT_PRODUCT_TYPE_PRODUCT_FIELDS = [
    {
        fieldSlug: 'name',
        required: true
    },
    {
        fieldSlug: 'slug',
        required: true
    },
    {
        fieldSlug: 'sku-properties',
        required: false
    },
    {
        fieldSlug: 'category',
        required: false
    },
    {
        fieldSlug: 'description',
        required: false
    },
    {
        fieldSlug: 'tax-category',
        required: false
    },
    {
        fieldSlug: 'default-sku',
        required: false
    },
    {
        fieldSlug: 'ec-product-type',
        required: false
    },
    {
        fieldSlug: 'options',
        required: false
    }
];
const DEFAULT_PRODUCT_TYPE_SKU_FIELDS = [
    {
        fieldSlug: 'sku-values',
        required: false
    },
    {
        fieldSlug: 'product',
        required: false
    },
    {
        fieldSlug: 'main-image',
        required: false
    },
    {
        fieldSlug: 'more-images',
        required: false
    },
    {
        fieldSlug: 'price',
        required: true
    },
    {
        fieldSlug: 'compare-at-price',
        required: false
    },
    {
        fieldSlug: 'ec-sku-subscription-plan',
        required: false
    },
    {
        fieldSlug: 'sku',
        required: false
    },
    {
        fieldSlug: 'ec-sku-billing-method',
        required: false
    },
    {
        fieldSlug: 'track-inventory',
        required: false
    },
    {
        fieldSlug: 'quantity',
        required: false
    }
];
const PHYSICAL_PRODUCT_TYPE = {
    name: 'Physical',
    id: 'ff42fee0113744f693a764e3431a9cc2',
    fields: {
        product: [
            ...DEFAULT_PRODUCT_TYPE_PRODUCT_FIELDS,
            {
                fieldSlug: 'shippable',
                required: false
            }
        ],
        sku: [
            ...DEFAULT_PRODUCT_TYPE_SKU_FIELDS,
            {
                fieldSlug: 'weight',
                required: false
            },
            {
                fieldSlug: 'width',
                required: false
            },
            {
                fieldSlug: 'height',
                required: false
            },
            {
                fieldSlug: 'length',
                required: false
            }
        ]
    }
};
const DIGITAL_PRODUCT_TYPE = {
    name: 'Digital',
    id: 'f22027db68002190aef89a4a2b7ac8a1',
    fields: {
        product: [
            ...DEFAULT_PRODUCT_TYPE_PRODUCT_FIELDS
        ],
        sku: [
            ...DEFAULT_PRODUCT_TYPE_SKU_FIELDS,
            {
                fieldSlug: 'download-files',
                required: true
            }
        ]
    }
};
const SERVICE_PRODUCT_TYPE = {
    name: 'Service',
    id: 'c599e43b1a1c34d5a323aedf75d3adf6',
    fields: {
        product: [
            ...DEFAULT_PRODUCT_TYPE_PRODUCT_FIELDS
        ],
        sku: [
            ...DEFAULT_PRODUCT_TYPE_SKU_FIELDS
        ]
    }
};
const MEMBERSHIP_PRODUCT_TYPE = {
    name: 'Membership',
    id: 'e348fd487d0102946c9179d2a94bb613',
    fields: {
        product: [
            ...DEFAULT_PRODUCT_TYPE_PRODUCT_FIELDS,
            {
                fieldSlug: 'shippable',
                required: false
            }
        ],
        sku: [
            ...DEFAULT_PRODUCT_TYPE_SKU_FIELDS,
            {
                fieldSlug: 'weight',
                required: false
            },
            {
                fieldSlug: 'width',
                required: false
            },
            {
                fieldSlug: 'height',
                required: false
            },
            {
                fieldSlug: 'length',
                required: false
            },
            {
                fieldSlug: 'download-files',
                required: false
            },
            {
                fieldSlug: 'include-downloads',
                required: false
            }
        ]
    }
};
const ADVANCED_PRODUCT_TYPE = {
    name: 'Advanced',
    id: 'b6ccc1830db4b1babeb06a9ac5f6dd76'
};
const TEMPLATE_PRODUCT_TYPES = [
    PHYSICAL_PRODUCT_TYPE,
    DIGITAL_PRODUCT_TYPE,
    SERVICE_PRODUCT_TYPE,
    MEMBERSHIP_PRODUCT_TYPE,
    ADVANCED_PRODUCT_TYPE
];
// only used to get type ProductTypeId
const templateProductTypeIds = TEMPLATE_PRODUCT_TYPES.reduce((ids, t)=>{
    ids[t.id] = '';
    return ids;
}, {});
const PRODUCT_TYPE_HELP_TEXT = {
    [PHYSICAL_PRODUCT_TYPE.id]: 'Physical products are shipped to the customer (e.g., merchandise, apparel).',
    [DIGITAL_PRODUCT_TYPE.id]: 'Digital products are immediately downloadable by the customer after checkout (e.g., audio files, ebooks).',
    [SERVICE_PRODUCT_TYPE.id]: 'Service products do not require a shipping address during checkout (e.g., classes, consultations).',
    [MEMBERSHIP_PRODUCT_TYPE.id]: 'Membership products give users access to gated content through recurring or one-time payment (e.g., subscriptions, one-time membership fee). Membership products require a user login and can only be purchased once.',
    [ADVANCED_PRODUCT_TYPE.id]: 'Advanced products provide all available customizable options.'
};
const DEFAULT_PRODUCT_TYPE_ID = PHYSICAL_PRODUCT_TYPE.id;
const DISCOUNT_CODE_MAX_LENGTH = 255;
const DISCOUNTS_CSV_IMPORT_EXPORT_COLUMNS = [
    'name',
    'code',
    'notes',
    'type',
    'percentOff',
    'amountOff',
    'validOn',
    'expiresOn',
    'enabled',
    'orderMinimum',
    // archived is disabled until we have UI for it
    // 'archived',
    'totalUsage',
    'maxAmountOff',
    // NOTE: for dot-notation fields to be properly expanded
    // during import, you need to add the camel-case flattened property to
    // the 'KEYS_TO_EXPAND' variable in `entrypoints/server/lib/ecommerce/csvImport/discountCsvImport.js`
    // Example: 'usage.limit.total' -> 'usageLimitTotal'
    'usage.limit.total',
    'usage.limit.customer',
    'appliesTo.scope',
    'appliesTo.filter',
    'appliesTo.applyOnce'
];
const REQUIRED_DISCOUNT_IMPORT_FIELDS = [
    'name',
    'code',
    'type',
    [
        'percentOff',
        'amountOff'
    ]
];
const STRIPE_DISCONNECT_SUBSCRIPTIONS_ERROR_MESSAGE = 'Stripe disconnect attempted with non-canceled subscriptions';
const ORDER_SORT_MODES = Object.freeze({
    '-count': '-purchasedItemsCount -_id',
    count: 'purchasedItemsCount _id',
    '-name': '-customerInfo.fullName -_id',
    name: 'customerInfo.fullName _id',
    '-orderid': '-orderId',
    orderid: 'orderId',
    '-paid': '-customerPaid.unit -customerPaid.value -_id',
    paid: 'customerPaid.unit customerPaid.value _id',
    '-status': '-statusCode -_id',
    status: 'statusCode _id',
    '-time': '-acceptedOn -_id',
    time: 'acceptedOn _id'
});
const SUBSCRIPTION_SORT_MODES = Object.freeze({
    '-lastBilled': '-lastInvoiced -_id',
    lastBilled: 'lastInvoiced _id',
    '-nextBilling': '-paidUntil -_id',
    nextBilling: 'paidUntil _id',
    '-orderid': '-orderId',
    orderid: 'orderId',
    '-purchased': '-subCreatedOn -_id',
    purchased: 'subCreatedOn _id',
    '-status': '-status -_id',
    status: 'status _id',
    '-trialing': '-trialing -_id',
    trialing: 'trialing _id'
});

//# sourceMappingURL=data:application/json;base64,

}),
25766: (function (__unused_webpack_module, exports) {
"use strict";
// Note: These currencies are extracted by getting PayPal compatible currencies from:
//
// curl https://developer.paypal.com/docs/api/reference/currency-codes
//
// And then populating in the names from ISO 4217:

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "paypalCurrencyList", ({
    enumerable: true,
    get: function() {
        return paypalCurrencyList;
    }
}));
const paypalCurrencyList = [
    /*
   * ----------------------------------------------------------------------------
   * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
   * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
   * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
   * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
   *
   * This const is duplicated to @packages/systems/core/constants/SharedConfig.js
   * to avoid bundling this entire SharedConfig file in the webflow.js published
   * site bundle. Once we have support for bundling for the Dashboard (this
   * config is injected in to window.SharedConfig for angular), we should
   * be able to delete the const in SharedConfig and use the commerce/consts
   * package whenever `paypalCurrencyList` const is needed.
   *
   * In the meantime, if you make changes to this const, please make sure to
   * update in the other location as well.
   *
   * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
   * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
   * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
   * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
   * ----------------------------------------------------------------------------
   */ {
        code: 'AUD',
        digits: 2,
        minCharge: 1,
        name: 'Australian Dollar'
    },
    {
        code: 'BRL',
        digits: 2,
        minCharge: 1,
        name: 'Brazilian Real'
    },
    {
        code: 'CAD',
        digits: 2,
        minCharge: 1,
        name: 'Canadian Dollar'
    },
    {
        code: 'CNY',
        digits: 2,
        minCharge: 1,
        name: 'Chinese Renmenbi'
    },
    {
        code: 'CZK',
        digits: 2,
        minCharge: 1,
        name: 'Czech Koruna'
    },
    {
        code: 'DKK',
        digits: 2,
        minCharge: 1,
        name: 'Danish Krone'
    },
    {
        code: 'EUR',
        digits: 2,
        minCharge: 1,
        name: 'Euro'
    },
    {
        code: 'HKD',
        digits: 2,
        minCharge: 1,
        name: 'Hong Kong Dollar'
    },
    // HUF is currently disabled, due to issues with PayPal's 0-decimal implementation
    // See: https://github.com/webflow/webflow/issues/32865
    // {code: 'HUF', digits: 0, minCharge: 1, name: 'Hungarian Forint'},
    {
        code: 'INR',
        digits: 2,
        minCharge: 1,
        name: 'Indian Rupee'
    },
    {
        code: 'ILS',
        digits: 2,
        minCharge: 1,
        name: 'Israeli New Sheqel'
    },
    {
        code: 'JPY',
        digits: 0,
        minCharge: 1,
        name: 'Japanese Yen'
    },
    {
        code: 'MYR',
        digits: 2,
        minCharge: 1,
        name: 'Malaysian Ringgit'
    },
    {
        code: 'MXN',
        digits: 2,
        minCharge: 1,
        name: 'Mexican Peso'
    },
    {
        code: 'TWD',
        digits: 0,
        minCharge: 1,
        name: 'New Taiwan Dollar'
    },
    {
        code: 'NZD',
        digits: 2,
        minCharge: 1,
        name: 'New Zealand Dollar'
    },
    {
        code: 'NOK',
        digits: 2,
        minCharge: 1,
        name: 'Norwegian Krone'
    },
    {
        code: 'PHP',
        digits: 2,
        minCharge: 1,
        name: 'Philippine Peso'
    },
    {
        code: 'PLN',
        digits: 2,
        minCharge: 1,
        name: 'Polish Złoty'
    },
    {
        code: 'GBP',
        digits: 2,
        minCharge: 1,
        name: 'British Pound'
    },
    {
        code: 'RUB',
        digits: 2,
        minCharge: 1,
        name: 'Russian Ruble'
    },
    {
        code: 'SGD',
        digits: 2,
        minCharge: 1,
        name: 'Singapore Dollar'
    },
    {
        code: 'SEK',
        digits: 2,
        minCharge: 1,
        name: 'Swedish Krona'
    },
    {
        code: 'CHF',
        digits: 2,
        minCharge: 1,
        name: 'Swiss Franc'
    },
    {
        code: 'THB',
        digits: 2,
        minCharge: 1,
        name: 'Thai Baht'
    },
    {
        code: 'USD',
        digits: 2,
        minCharge: 1,
        name: 'United States Dollar'
    }
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBheXBhbEN1cnJlbmN5TGlzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBOb3RlOiBUaGVzZSBjdXJyZW5jaWVzIGFyZSBleHRyYWN0ZWQgYnkgZ2V0dGluZyBQYXlQYWwgY29tcGF0aWJsZSBjdXJyZW5jaWVzIGZyb206XG4vL1xuLy8gY3VybCBodHRwczovL2RldmVsb3Blci5wYXlwYWwuY29tL2RvY3MvYXBpL3JlZmVyZW5jZS9jdXJyZW5jeS1jb2Rlc1xuLy9cbi8vIEFuZCB0aGVuIHBvcHVsYXRpbmcgaW4gdGhlIG5hbWVzIGZyb20gSVNPIDQyMTc6XG5cbmV4cG9ydCBjb25zdCBwYXlwYWxDdXJyZW5jeUxpc3QgPSBbXG4gIC8qXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEVcbiAgICogTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEVcbiAgICogTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEVcbiAgICogTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEVcbiAgICpcbiAgICogVGhpcyBjb25zdCBpcyBkdXBsaWNhdGVkIHRvIEBwYWNrYWdlcy9zeXN0ZW1zL2NvcmUvY29uc3RhbnRzL1NoYXJlZENvbmZpZy5qc1xuICAgKiB0byBhdm9pZCBidW5kbGluZyB0aGlzIGVudGlyZSBTaGFyZWRDb25maWcgZmlsZSBpbiB0aGUgd2ViZmxvdy5qcyBwdWJsaXNoZWRcbiAgICogc2l0ZSBidW5kbGUuIE9uY2Ugd2UgaGF2ZSBzdXBwb3J0IGZvciBidW5kbGluZyBmb3IgdGhlIERhc2hib2FyZCAodGhpc1xuICAgKiBjb25maWcgaXMgaW5qZWN0ZWQgaW4gdG8gd2luZG93LlNoYXJlZENvbmZpZyBmb3IgYW5ndWxhciksIHdlIHNob3VsZFxuICAgKiBiZSBhYmxlIHRvIGRlbGV0ZSB0aGUgY29uc3QgaW4gU2hhcmVkQ29uZmlnIGFuZCB1c2UgdGhlIGNvbW1lcmNlL2NvbnN0c1xuICAgKiBwYWNrYWdlIHdoZW5ldmVyIGBwYXlwYWxDdXJyZW5jeUxpc3RgIGNvbnN0IGlzIG5lZWRlZC5cbiAgICpcbiAgICogSW4gdGhlIG1lYW50aW1lLCBpZiB5b3UgbWFrZSBjaGFuZ2VzIHRvIHRoaXMgY29uc3QsIHBsZWFzZSBtYWtlIHN1cmUgdG9cbiAgICogdXBkYXRlIGluIHRoZSBvdGhlciBsb2NhdGlvbiBhcyB3ZWxsLlxuICAgKlxuICAgKiBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URVxuICAgKiBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URVxuICAgKiBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URVxuICAgKiBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URSBOT1RFIE5PVEUgTk9URVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuICB7Y29kZTogJ0FVRCcsIGRpZ2l0czogMiwgbWluQ2hhcmdlOiAxLCBuYW1lOiAnQXVzdHJhbGlhbiBEb2xsYXInfSxcbiAge2NvZGU6ICdCUkwnLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ0JyYXppbGlhbiBSZWFsJ30sXG4gIHtjb2RlOiAnQ0FEJywgZGlnaXRzOiAyLCBtaW5DaGFyZ2U6IDEsIG5hbWU6ICdDYW5hZGlhbiBEb2xsYXInfSxcbiAge2NvZGU6ICdDTlknLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ0NoaW5lc2UgUmVubWVuYmknfSxcbiAge2NvZGU6ICdDWksnLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ0N6ZWNoIEtvcnVuYSd9LFxuICB7Y29kZTogJ0RLSycsIGRpZ2l0czogMiwgbWluQ2hhcmdlOiAxLCBuYW1lOiAnRGFuaXNoIEtyb25lJ30sXG4gIHtjb2RlOiAnRVVSJywgZGlnaXRzOiAyLCBtaW5DaGFyZ2U6IDEsIG5hbWU6ICdFdXJvJ30sXG4gIHtjb2RlOiAnSEtEJywgZGlnaXRzOiAyLCBtaW5DaGFyZ2U6IDEsIG5hbWU6ICdIb25nIEtvbmcgRG9sbGFyJ30sXG4gIC8vIEhVRiBpcyBjdXJyZW50bHkgZGlzYWJsZWQsIGR1ZSB0byBpc3N1ZXMgd2l0aCBQYXlQYWwncyAwLWRlY2ltYWwgaW1wbGVtZW50YXRpb25cbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vd2ViZmxvdy93ZWJmbG93L2lzc3Vlcy8zMjg2NVxuICAvLyB7Y29kZTogJ0hVRicsIGRpZ2l0czogMCwgbWluQ2hhcmdlOiAxLCBuYW1lOiAnSHVuZ2FyaWFuIEZvcmludCd9LFxuICB7Y29kZTogJ0lOUicsIGRpZ2l0czogMiwgbWluQ2hhcmdlOiAxLCBuYW1lOiAnSW5kaWFuIFJ1cGVlJ30sXG4gIHtjb2RlOiAnSUxTJywgZGlnaXRzOiAyLCBtaW5DaGFyZ2U6IDEsIG5hbWU6ICdJc3JhZWxpIE5ldyBTaGVxZWwnfSxcbiAge2NvZGU6ICdKUFknLCBkaWdpdHM6IDAsIG1pbkNoYXJnZTogMSwgbmFtZTogJ0phcGFuZXNlIFllbid9LFxuICB7Y29kZTogJ01ZUicsIGRpZ2l0czogMiwgbWluQ2hhcmdlOiAxLCBuYW1lOiAnTWFsYXlzaWFuIFJpbmdnaXQnfSxcbiAge2NvZGU6ICdNWE4nLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ01leGljYW4gUGVzbyd9LFxuICB7Y29kZTogJ1RXRCcsIGRpZ2l0czogMCwgbWluQ2hhcmdlOiAxLCBuYW1lOiAnTmV3IFRhaXdhbiBEb2xsYXInfSxcbiAge2NvZGU6ICdOWkQnLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ05ldyBaZWFsYW5kIERvbGxhcid9LFxuICB7Y29kZTogJ05PSycsIGRpZ2l0czogMiwgbWluQ2hhcmdlOiAxLCBuYW1lOiAnTm9yd2VnaWFuIEtyb25lJ30sXG4gIHtjb2RlOiAnUEhQJywgZGlnaXRzOiAyLCBtaW5DaGFyZ2U6IDEsIG5hbWU6ICdQaGlsaXBwaW5lIFBlc28nfSxcbiAge2NvZGU6ICdQTE4nLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ1BvbGlzaCBaxYJvdHknfSxcbiAge2NvZGU6ICdHQlAnLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ0JyaXRpc2ggUG91bmQnfSxcbiAge2NvZGU6ICdSVUInLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ1J1c3NpYW4gUnVibGUnfSxcbiAge2NvZGU6ICdTR0QnLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ1NpbmdhcG9yZSBEb2xsYXInfSxcbiAge2NvZGU6ICdTRUsnLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ1N3ZWRpc2ggS3JvbmEnfSxcbiAge2NvZGU6ICdDSEYnLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ1N3aXNzIEZyYW5jJ30sXG4gIHtjb2RlOiAnVEhCJywgZGlnaXRzOiAyLCBtaW5DaGFyZ2U6IDEsIG5hbWU6ICdUaGFpIEJhaHQnfSxcbiAge2NvZGU6ICdVU0QnLCBkaWdpdHM6IDIsIG1pbkNoYXJnZTogMSwgbmFtZTogJ1VuaXRlZCBTdGF0ZXMgRG9sbGFyJ30sXG5dIGFzIGNvbnN0O1xuIl0sIm5hbWVzIjpbInBheXBhbEN1cnJlbmN5TGlzdCIsImNvZGUiLCJkaWdpdHMiLCJtaW5DaGFyZ2UiLCJuYW1lIl0sIm1hcHBpbmdzIjoiQUFBQSxxRkFBcUY7QUFDckYsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxFQUFFO0FBQ0Ysa0RBQWtEOzs7OzsrQkFFckNBOzs7ZUFBQUE7OztBQUFOLE1BQU1BLHFCQUFxQjtJQUNoQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXNCQyxHQUNEO1FBQUNDLE1BQU07UUFBT0MsUUFBUTtRQUFHQyxXQUFXO1FBQUdDLE1BQU07SUFBbUI7SUFDaEU7UUFBQ0gsTUFBTTtRQUFPQyxRQUFRO1FBQUdDLFdBQVc7UUFBR0MsTUFBTTtJQUFnQjtJQUM3RDtRQUFDSCxNQUFNO1FBQU9DLFFBQVE7UUFBR0MsV0FBVztRQUFHQyxNQUFNO0lBQWlCO0lBQzlEO1FBQUNILE1BQU07UUFBT0MsUUFBUTtRQUFHQyxXQUFXO1FBQUdDLE1BQU07SUFBa0I7SUFDL0Q7UUFBQ0gsTUFBTTtRQUFPQyxRQUFRO1FBQUdDLFdBQVc7UUFBR0MsTUFBTTtJQUFjO0lBQzNEO1FBQUNILE1BQU07UUFBT0MsUUFBUTtRQUFHQyxXQUFXO1FBQUdDLE1BQU07SUFBYztJQUMzRDtRQUFDSCxNQUFNO1FBQU9DLFFBQVE7UUFBR0MsV0FBVztRQUFHQyxNQUFNO0lBQU07SUFDbkQ7UUFBQ0gsTUFBTTtRQUFPQyxRQUFRO1FBQUdDLFdBQVc7UUFBR0MsTUFBTTtJQUFrQjtJQUMvRCxrRkFBa0Y7SUFDbEYsdURBQXVEO0lBQ3ZELG9FQUFvRTtJQUNwRTtRQUFDSCxNQUFNO1FBQU9DLFFBQVE7UUFBR0MsV0FBVztRQUFHQyxNQUFNO0lBQWM7SUFDM0Q7UUFBQ0gsTUFBTTtRQUFPQyxRQUFRO1FBQUdDLFdBQVc7UUFBR0MsTUFBTTtJQUFvQjtJQUNqRTtRQUFDSCxNQUFNO1FBQU9DLFFBQVE7UUFBR0MsV0FBVztRQUFHQyxNQUFNO0lBQWM7SUFDM0Q7UUFBQ0gsTUFBTTtRQUFPQyxRQUFRO1FBQUdDLFdBQVc7UUFBR0MsTUFBTTtJQUFtQjtJQUNoRTtRQUFDSCxNQUFNO1FBQU9DLFFBQVE7UUFBR0MsV0FBVztRQUFHQyxNQUFNO0lBQWM7SUFDM0Q7UUFBQ0gsTUFBTTtRQUFPQyxRQUFRO1FBQUdDLFdBQVc7UUFBR0MsTUFBTTtJQUFtQjtJQUNoRTtRQUFDSCxNQUFNO1FBQU9DLFFBQVE7UUFBR0MsV0FBVztRQUFHQyxNQUFNO0lBQW9CO0lBQ2pFO1FBQUNILE1BQU07UUFBT0MsUUFBUTtRQUFHQyxXQUFXO1FBQUdDLE1BQU07SUFBaUI7SUFDOUQ7UUFBQ0gsTUFBTTtRQUFPQyxRQUFRO1FBQUdDLFdBQVc7UUFBR0MsTUFBTTtJQUFpQjtJQUM5RDtRQUFDSCxNQUFNO1FBQU9DLFFBQVE7UUFBR0MsV0FBVztRQUFHQyxNQUFNO0lBQWM7SUFDM0Q7UUFBQ0gsTUFBTTtRQUFPQyxRQUFRO1FBQUdDLFdBQVc7UUFBR0MsTUFBTTtJQUFlO0lBQzVEO1FBQUNILE1BQU07UUFBT0MsUUFBUTtRQUFHQyxXQUFXO1FBQUdDLE1BQU07SUFBZTtJQUM1RDtRQUFDSCxNQUFNO1FBQU9DLFFBQVE7UUFBR0MsV0FBVztRQUFHQyxNQUFNO0lBQWtCO0lBQy9EO1FBQUNILE1BQU07UUFBT0MsUUFBUTtRQUFHQyxXQUFXO1FBQUdDLE1BQU07SUFBZTtJQUM1RDtRQUFDSCxNQUFNO1FBQU9DLFFBQVE7UUFBR0MsV0FBVztRQUFHQyxNQUFNO0lBQWE7SUFDMUQ7UUFBQ0gsTUFBTTtRQUFPQyxRQUFRO1FBQUdDLFdBQVc7UUFBR0MsTUFBTTtJQUFXO0lBQ3hEO1FBQUNILE1BQU07UUFBT0MsUUFBUTtRQUFHQyxXQUFXO1FBQUdDLE1BQU07SUFBc0I7Q0FDcEUifQ==

}),
41158: (function (__unused_webpack_module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ADD_TO_CART_ERRORS: function() {
        return ADD_TO_CART_ERRORS;
    },
    ADD_TO_CART_ERROR_MESSAGE: function() {
        return ADD_TO_CART_ERROR_MESSAGE;
    },
    ADD_TO_CART_LOADING: function() {
        return ADD_TO_CART_LOADING;
    },
    ADD_TO_CART_STATES: function() {
        return ADD_TO_CART_STATES;
    },
    ALIGN_DEFAULT: function() {
        return ALIGN_DEFAULT;
    },
    ALIGN_KEY: function() {
        return ALIGN_KEY;
    },
    ANIMATION_DURATION_DEFAULT: function() {
        return ANIMATION_DURATION_DEFAULT;
    },
    ANIMATION_DURATION_KEY: function() {
        return ANIMATION_DURATION_KEY;
    },
    ANIMATION_DURATION_KEYPATH: function() {
        return ANIMATION_DURATION_KEYPATH;
    },
    ANIMATION_EASING_DEFAULT: function() {
        return ANIMATION_EASING_DEFAULT;
    },
    ANIMATION_EASING_KEY: function() {
        return ANIMATION_EASING_KEY;
    },
    ANIMATION_EASING_KEYPATH: function() {
        return ANIMATION_EASING_KEYPATH;
    },
    BILLING_ADDRESS_TOGGLE_DEFAULT: function() {
        return BILLING_ADDRESS_TOGGLE_DEFAULT;
    },
    BILLING_ADDRESS_TOGGLE_KEY: function() {
        return BILLING_ADDRESS_TOGGLE_KEY;
    },
    BILLING_ADDRESS_TOGGLE_KEYPATH: function() {
        return BILLING_ADDRESS_TOGGLE_KEYPATH;
    },
    CART_CHECKOUT_BUTTON_TEXT_DEFAULT: function() {
        return CART_CHECKOUT_BUTTON_TEXT_DEFAULT;
    },
    CART_CHECKOUT_ERROR_MESSAGE: function() {
        return CART_CHECKOUT_ERROR_MESSAGE;
    },
    CART_CHECKOUT_ERROR_MESSAGE_SELECTOR: function() {
        return CART_CHECKOUT_ERROR_MESSAGE_SELECTOR;
    },
    CART_CHECKOUT_LOADING_TEXT_DEFAULT: function() {
        return CART_CHECKOUT_LOADING_TEXT_DEFAULT;
    },
    CART_COUNT_HIDE_RULES: function() {
        return CART_COUNT_HIDE_RULES;
    },
    CART_ERRORS: function() {
        return CART_ERRORS;
    },
    CART_ERROR_MESSAGE: function() {
        return CART_ERROR_MESSAGE;
    },
    CART_ERROR_MESSAGE_SELECTOR: function() {
        return CART_ERROR_MESSAGE_SELECTOR;
    },
    CART_GENERAL_ERROR_MESSAGE: function() {
        return CART_GENERAL_ERROR_MESSAGE;
    },
    CART_OPEN: function() {
        return CART_OPEN;
    },
    CART_PRODUCT_ADDED_DEFAULT: function() {
        return CART_PRODUCT_ADDED_DEFAULT;
    },
    CART_PRODUCT_ADDED_KEY: function() {
        return CART_PRODUCT_ADDED_KEY;
    },
    CART_PRODUCT_ADDED_KEYPATH: function() {
        return CART_PRODUCT_ADDED_KEYPATH;
    },
    CART_QUERY: function() {
        return CART_QUERY;
    },
    CART_STATE: function() {
        return CART_STATE;
    },
    CART_STATES: function() {
        return CART_STATES;
    },
    CART_STATES_AUTOMATION: function() {
        return CART_STATES_AUTOMATION;
    },
    CART_TYPE: function() {
        return CART_TYPE;
    },
    CART_TYPES: function() {
        return CART_TYPES;
    },
    CART_TYPE_DROPDOWN_ON_OPEN: function() {
        return CART_TYPE_DROPDOWN_ON_OPEN;
    },
    CART_TYPE_DROPDOWN_ON_OPEN_KEY: function() {
        return CART_TYPE_DROPDOWN_ON_OPEN_KEY;
    },
    CART_TYPE_KEY: function() {
        return CART_TYPE_KEY;
    },
    CHANGE_CART_EVENT: function() {
        return CHANGE_CART_EVENT;
    },
    CHECKOUT_BINDING_ROOT_QUERY_PATH: function() {
        return CHECKOUT_BINDING_ROOT_QUERY_PATH;
    },
    CHECKOUT_DISABLED_ERROR_MESSAGE: function() {
        return CHECKOUT_DISABLED_ERROR_MESSAGE;
    },
    CHECKOUT_ERRORS: function() {
        return CHECKOUT_ERRORS;
    },
    CHECKOUT_PLACE_ORDER_BUTTON_TEXT_DEFAULT: function() {
        return CHECKOUT_PLACE_ORDER_BUTTON_TEXT_DEFAULT;
    },
    CHECKOUT_PLACE_ORDER_LOADING_TEXT_DEFAULT: function() {
        return CHECKOUT_PLACE_ORDER_LOADING_TEXT_DEFAULT;
    },
    CHECKOUT_QUERY: function() {
        return CHECKOUT_QUERY;
    },
    CHECKOUT_STATE: function() {
        return CHECKOUT_STATE;
    },
    CHECKOUT_STATES: function() {
        return CHECKOUT_STATES;
    },
    COMMERCE_CART_ITEM_ID_ATTR: function() {
        return COMMERCE_CART_ITEM_ID_ATTR;
    },
    COMMERCE_CART_PUBLISHED_SITE_ACTIONS: function() {
        return COMMERCE_CART_PUBLISHED_SITE_ACTIONS;
    },
    COMMERCE_CART_PUBLISHED_SITE_ACTION_ATTR: function() {
        return COMMERCE_CART_PUBLISHED_SITE_ACTION_ATTR;
    },
    COMMERCE_CATEGORY_COLLECTION_SLUG: function() {
        return COMMERCE_CATEGORY_COLLECTION_SLUG;
    },
    COMMERCE_DEFAULT_COPY: function() {
        return COMMERCE_DEFAULT_COPY;
    },
    COMMERCE_ERROR_CATEGORY: function() {
        return COMMERCE_ERROR_CATEGORY;
    },
    COMMERCE_PLUGIN_KEY: function() {
        return COMMERCE_PLUGIN_KEY;
    },
    COMMERCE_PRODUCT_COLLECTION_SLUG: function() {
        return COMMERCE_PRODUCT_COLLECTION_SLUG;
    },
    COMMERCE_PRODUCT_FIELD_SLUG: function() {
        return COMMERCE_PRODUCT_FIELD_SLUG;
    },
    COMMERCE_SKU_COLLECTION_SLUG: function() {
        return COMMERCE_SKU_COLLECTION_SLUG;
    },
    COMMERCE_SKU_FIELD_SLUG: function() {
        return COMMERCE_SKU_FIELD_SLUG;
    },
    DATA_ATTR_ANIMATION_DURATION: function() {
        return DATA_ATTR_ANIMATION_DURATION;
    },
    DATA_ATTR_ANIMATION_EASING: function() {
        return DATA_ATTR_ANIMATION_EASING;
    },
    DATA_ATTR_COMMERCE_OPTION_SET_ID: function() {
        return DATA_ATTR_COMMERCE_OPTION_SET_ID;
    },
    DATA_ATTR_COMMERCE_PRODUCT_CURRENT_SKU_VALUES: function() {
        return DATA_ATTR_COMMERCE_PRODUCT_CURRENT_SKU_VALUES;
    },
    DATA_ATTR_COMMERCE_PRODUCT_ID: function() {
        return DATA_ATTR_COMMERCE_PRODUCT_ID;
    },
    DATA_ATTR_COMMERCE_SKU_ID: function() {
        return DATA_ATTR_COMMERCE_SKU_ID;
    },
    DATA_ATTR_COUNT_HIDE_RULE: function() {
        return DATA_ATTR_COUNT_HIDE_RULE;
    },
    DATA_ATTR_DEFAULT_TEXT: function() {
        return DATA_ATTR_DEFAULT_TEXT;
    },
    DATA_ATTR_LOADING_TEXT: function() {
        return DATA_ATTR_LOADING_TEXT;
    },
    DATA_ATTR_NODE_TYPE: function() {
        return DATA_ATTR_NODE_TYPE;
    },
    DATA_ATTR_OPEN_ON_HOVER: function() {
        return DATA_ATTR_OPEN_ON_HOVER;
    },
    DATA_ATTR_OPEN_PRODUCT: function() {
        return DATA_ATTR_OPEN_PRODUCT;
    },
    DATA_ATTR_PRESELECT_DEFAULT_VARIANT: function() {
        return DATA_ATTR_PRESELECT_DEFAULT_VARIANT;
    },
    DATA_ATTR_PUBLISHABLE_KEY: function() {
        return DATA_ATTR_PUBLISHABLE_KEY;
    },
    DATA_ATTR_SUBSCRIPTION_TEXT: function() {
        return DATA_ATTR_SUBSCRIPTION_TEXT;
    },
    DEFAULT_SKU_SLUG: function() {
        return DEFAULT_SKU_SLUG;
    },
    EASE_DEFAULT: function() {
        return EASE_DEFAULT;
    },
    EASINGS: function() {
        return EASINGS;
    },
    EDITABLE_STYLE_NAMES: function() {
        return EDITABLE_STYLE_NAMES;
    },
    HIDE_CART_COUNT_DEFAULT: function() {
        return HIDE_CART_COUNT_DEFAULT;
    },
    HIDE_CART_COUNT_KEY: function() {
        return HIDE_CART_COUNT_KEY;
    },
    HIDE_CART_WHEN_EMPTY_DEFAULT: function() {
        return HIDE_CART_WHEN_EMPTY_DEFAULT;
    },
    HIDE_CART_WHEN_EMPTY_KEY: function() {
        return HIDE_CART_WHEN_EMPTY_KEY;
    },
    HIDE_CART_WHEN_EMPTY_KEYPATH: function() {
        return HIDE_CART_WHEN_EMPTY_KEYPATH;
    },
    LOADING_TEXT: function() {
        return LOADING_TEXT;
    },
    LOADING_TEXT_DEFAULT: function() {
        return LOADING_TEXT_DEFAULT;
    },
    NEEDS_REFRESH: function() {
        return NEEDS_REFRESH;
    },
    NODE_NAME_COMMERCE_ADD_TO_CART_QUANTITY_INPUT: function() {
        return NODE_NAME_COMMERCE_ADD_TO_CART_QUANTITY_INPUT;
    },
    NODE_TYPE_ADD_TO_CART_ERROR: function() {
        return NODE_TYPE_ADD_TO_CART_ERROR;
    },
    NODE_TYPE_COMMERCE_ADD_TO_CART_BUTTON: function() {
        return NODE_TYPE_COMMERCE_ADD_TO_CART_BUTTON;
    },
    NODE_TYPE_COMMERCE_ADD_TO_CART_ERROR: function() {
        return NODE_TYPE_COMMERCE_ADD_TO_CART_ERROR;
    },
    NODE_TYPE_COMMERCE_ADD_TO_CART_FORM: function() {
        return NODE_TYPE_COMMERCE_ADD_TO_CART_FORM;
    },
    NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_LIST: function() {
        return NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_LIST;
    },
    NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_SELECT: function() {
        return NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_SELECT;
    },
    NODE_TYPE_COMMERCE_ADD_TO_CART_PILL: function() {
        return NODE_TYPE_COMMERCE_ADD_TO_CART_PILL;
    },
    NODE_TYPE_COMMERCE_ADD_TO_CART_PILL_GROUP: function() {
        return NODE_TYPE_COMMERCE_ADD_TO_CART_PILL_GROUP;
    },
    NODE_TYPE_COMMERCE_BUY_NOW_BUTTON: function() {
        return NODE_TYPE_COMMERCE_BUY_NOW_BUTTON;
    },
    NODE_TYPE_COMMERCE_CART_APPLE_PAY_BUTTON: function() {
        return NODE_TYPE_COMMERCE_CART_APPLE_PAY_BUTTON;
    },
    NODE_TYPE_COMMERCE_CART_CHECKOUT_BUTTON: function() {
        return NODE_TYPE_COMMERCE_CART_CHECKOUT_BUTTON;
    },
    NODE_TYPE_COMMERCE_CART_CLOSE_LINK: function() {
        return NODE_TYPE_COMMERCE_CART_CLOSE_LINK;
    },
    NODE_TYPE_COMMERCE_CART_CONTAINER: function() {
        return NODE_TYPE_COMMERCE_CART_CONTAINER;
    },
    NODE_TYPE_COMMERCE_CART_CONTAINER_WRAPPER: function() {
        return NODE_TYPE_COMMERCE_CART_CONTAINER_WRAPPER;
    },
    NODE_TYPE_COMMERCE_CART_ERROR: function() {
        return NODE_TYPE_COMMERCE_CART_ERROR;
    },
    NODE_TYPE_COMMERCE_CART_FORM: function() {
        return NODE_TYPE_COMMERCE_CART_FORM;
    },
    NODE_TYPE_COMMERCE_CART_OPEN_LINK: function() {
        return NODE_TYPE_COMMERCE_CART_OPEN_LINK;
    },
    NODE_TYPE_COMMERCE_CART_QUICK_CHECKOUT_ACTIONS: function() {
        return NODE_TYPE_COMMERCE_CART_QUICK_CHECKOUT_ACTIONS;
    },
    NODE_TYPE_COMMERCE_CART_QUICK_CHECKOUT_BUTTON: function() {
        return NODE_TYPE_COMMERCE_CART_QUICK_CHECKOUT_BUTTON;
    },
    NODE_TYPE_COMMERCE_CART_WRAPPER: function() {
        return NODE_TYPE_COMMERCE_CART_WRAPPER;
    },
    NODE_TYPE_COMMERCE_CHECKOUT_ADDITIONAL_INFO: function() {
        return NODE_TYPE_COMMERCE_CHECKOUT_ADDITIONAL_INFO;
    },
    NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_TOGGLE_CHECKBOX: function() {
        return NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_TOGGLE_CHECKBOX;
    },
    NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_WRAPPER: function() {
        return NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_WRAPPER;
    },
    NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_ZIP_FIELD: function() {
        return NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_ZIP_FIELD;
    },
    NODE_TYPE_COMMERCE_CHECKOUT_CUSTOMER_INFO_WRAPPER: function() {
        return NODE_TYPE_COMMERCE_CHECKOUT_CUSTOMER_INFO_WRAPPER;
    },
    NODE_TYPE_COMMERCE_CHECKOUT_DISCOUNT_FORM: function() {
        return NODE_TYPE_COMMERCE_CHECKOUT_DISCOUNT_FORM;
    },
    NODE_TYPE_COMMERCE_CHECKOUT_DISCOUNT_INPUT: function() {
        return NODE_TYPE_COMMERCE_CHECKOUT_DISCOUNT_INPUT;
    },
    NODE_TYPE_COMMERCE_CHECKOUT_ERROR_STATE: function() {
        return NODE_TYPE_COMMERCE_CHECKOUT_ERROR_STATE;
    },
    NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER: function() {
        return NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER;
    },
    NODE_TYPE_COMMERCE_CHECKOUT_PLACE_ORDER_BUTTON: function() {
        return NODE_TYPE_COMMERCE_CHECKOUT_PLACE_ORDER_BUTTON;
    },
    NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_WRAPPER: function() {
        return NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_WRAPPER;
    },
    NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_ZIP_FIELD: function() {
        return NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_ZIP_FIELD;
    },
    NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_EMPTY_STATE: function() {
        return NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_EMPTY_STATE;
    },
    NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_LIST: function() {
        return NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_LIST;
    },
    NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_WRAPPER: function() {
        return NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_WRAPPER;
    },
    NODE_TYPE_COMMERCE_DOWNLOADS_BUTTON: function() {
        return NODE_TYPE_COMMERCE_DOWNLOADS_BUTTON;
    },
    NODE_TYPE_COMMERCE_ORDER_CONFIRMATION_WRAPPER: function() {
        return NODE_TYPE_COMMERCE_ORDER_CONFIRMATION_WRAPPER;
    },
    NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_ERROR_STATE: function() {
        return NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_ERROR_STATE;
    },
    NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_FORM_CONTAINER: function() {
        return NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_FORM_CONTAINER;
    },
    OPEN_STATE_DEFAULT: function() {
        return OPEN_STATE_DEFAULT;
    },
    OPEN_STATE_KEY: function() {
        return OPEN_STATE_KEY;
    },
    OPEN_STATE_KEYPATH: function() {
        return OPEN_STATE_KEYPATH;
    },
    ORDER_QUERY: function() {
        return ORDER_QUERY;
    },
    ORDER_TYPE: function() {
        return ORDER_TYPE;
    },
    PAYPAL_BUTTON_ELEMENT_INSTANCE: function() {
        return PAYPAL_BUTTON_ELEMENT_INSTANCE;
    },
    PAYPAL_ELEMENT_INSTANCE: function() {
        return PAYPAL_ELEMENT_INSTANCE;
    },
    PREVIEW_ITEMS_DEFAULT: function() {
        return PREVIEW_ITEMS_DEFAULT;
    },
    PREVIEW_ITEMS_KEY: function() {
        return PREVIEW_ITEMS_KEY;
    },
    PREVIEW_ITEMS_KEYPATH: function() {
        return PREVIEW_ITEMS_KEYPATH;
    },
    QUANTITY_ENABLED: function() {
        return QUANTITY_ENABLED;
    },
    QUICK_CHECKOUT_AUTOMATION: function() {
        return QUICK_CHECKOUT_AUTOMATION;
    },
    QUICK_CHECKOUT_STATE: function() {
        return QUICK_CHECKOUT_STATE;
    },
    QUICK_CHECKOUT_STATES: function() {
        return QUICK_CHECKOUT_STATES;
    },
    QUICK_CHECKOUT_STATE_KEYPATH: function() {
        return QUICK_CHECKOUT_STATE_KEYPATH;
    },
    RENDER_TREE_EVENT: function() {
        return RENDER_TREE_EVENT;
    },
    REQUIRES_ACTION: function() {
        return REQUIRES_ACTION;
    },
    REQUIRES_SHIPPING: function() {
        return REQUIRES_SHIPPING;
    },
    SECTION_NAMES: function() {
        return SECTION_NAMES;
    },
    SHIPPING_METHODS_STATE: function() {
        return SHIPPING_METHODS_STATE;
    },
    SHIPPING_METHODS_STATES: function() {
        return SHIPPING_METHODS_STATES;
    },
    STATE: function() {
        return STATE;
    },
    STRIPE_ECOMMERCE_ACCOUNT_ID: function() {
        return STRIPE_ECOMMERCE_ACCOUNT_ID;
    },
    STRIPE_ECOMMERCE_KEY: function() {
        return STRIPE_ECOMMERCE_KEY;
    },
    STRIPE_ELEMENT_INSTANCE: function() {
        return STRIPE_ELEMENT_INSTANCE;
    },
    STRIPE_ELEMENT_STYLE: function() {
        return STRIPE_ELEMENT_STYLE;
    },
    STRIPE_ELEMENT_TYPE: function() {
        return STRIPE_ELEMENT_TYPE;
    },
    WF_BINDING_DATA_KEY: function() {
        return WF_BINDING_DATA_KEY;
    },
    WF_COLLECTION_DATA_KEY: function() {
        return WF_COLLECTION_DATA_KEY;
    },
    WF_CONDITION_DATA_KEY: function() {
        return WF_CONDITION_DATA_KEY;
    },
    WF_SKU_BINDING_DATA_KEY: function() {
        return WF_SKU_BINDING_DATA_KEY;
    },
    WF_SKU_CONDITION_DATA_KEY: function() {
        return WF_SKU_CONDITION_DATA_KEY;
    },
    WF_TEMPLATE_ID_DATA_KEY: function() {
        return WF_TEMPLATE_ID_DATA_KEY;
    },
    WF_TEMPLATE_TYPE: function() {
        return WF_TEMPLATE_TYPE;
    },
    getATCErrorMessageForType: function() {
        return getATCErrorMessageForType;
    },
    getCartErrorMessageForType: function() {
        return getCartErrorMessageForType;
    },
    getCheckoutErrorMessageForType: function() {
        return getCheckoutErrorMessageForType;
    },
    symbolMap: function() {
        return symbolMap;
    }
});
const DATA_ATTR_COMMERCE_SKU_ID = 'data-commerce-sku-id';
const DATA_ATTR_COMMERCE_PRODUCT_CURRENT_SKU_VALUES = 'data-commerce-product-sku-values';
const DATA_ATTR_COMMERCE_OPTION_SET_ID = 'data-commerce-option-set-id';
const DATA_ATTR_COMMERCE_PRODUCT_ID = 'data-commerce-product-id';
const DATA_ATTR_NODE_TYPE = 'data-node-type';
const DATA_ATTR_LOADING_TEXT = 'data-loading-text';
const DATA_ATTR_OPEN_PRODUCT = 'data-open-product';
const DATA_ATTR_OPEN_ON_HOVER = 'data-open-on-hover';
const DATA_ATTR_COUNT_HIDE_RULE = 'data-count-hide-rule';
const DATA_ATTR_PRESELECT_DEFAULT_VARIANT = 'data-preselect-default-variant';
const DATA_ATTR_DEFAULT_TEXT = 'data-default-text';
const DATA_ATTR_SUBSCRIPTION_TEXT = 'data-subscription-text';
const NODE_TYPE_COMMERCE_ADD_TO_CART_FORM = 'commerce-add-to-cart-form';
const NODE_TYPE_COMMERCE_ADD_TO_CART_ERROR = 'commerce-add-to-cart-error';
const NODE_TYPE_COMMERCE_CART_ERROR = 'commerce-cart-error';
const NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_SELECT = 'commerce-add-to-cart-option-select';
const NODE_TYPE_COMMERCE_ADD_TO_CART_OPTION_LIST = 'commerce-add-to-cart-option-list';
const NODE_TYPE_COMMERCE_ADD_TO_CART_PILL_GROUP = 'commerce-add-to-cart-pill-group';
const NODE_TYPE_COMMERCE_ADD_TO_CART_PILL = 'commerce-add-to-cart-pill';
const NODE_TYPE_COMMERCE_CART_WRAPPER = 'commerce-cart-wrapper';
const NODE_TYPE_COMMERCE_CART_OPEN_LINK = 'commerce-cart-open-link';
const NODE_TYPE_COMMERCE_CART_CLOSE_LINK = 'commerce-cart-close-link';
const NODE_TYPE_COMMERCE_CART_CONTAINER_WRAPPER = 'commerce-cart-container-wrapper';
const NODE_TYPE_COMMERCE_CART_CONTAINER = 'commerce-cart-container';
const NODE_TYPE_COMMERCE_CART_CHECKOUT_BUTTON = 'cart-checkout-button';
const NODE_TYPE_COMMERCE_CART_FORM = 'commerce-cart-form';
const NODE_NAME_COMMERCE_ADD_TO_CART_QUANTITY_INPUT = 'commerce-add-to-cart-quantity-input';
const NODE_TYPE_COMMERCE_CHECKOUT_FORM_CONTAINER = 'commerce-checkout-form-container';
const NODE_TYPE_COMMERCE_CHECKOUT_CUSTOMER_INFO_WRAPPER = 'commerce-checkout-customer-info-wrapper';
const NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_WRAPPER = 'commerce-checkout-shipping-address-wrapper';
const NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_ADDRESS_ZIP_FIELD = 'commerce-checkout-shipping-zip-field';
const NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_ZIP_FIELD = 'commerce-checkout-billing-zip-field';
const NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_WRAPPER = 'commerce-checkout-billing-address-wrapper';
const NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_WRAPPER = 'commerce-checkout-shipping-methods-wrapper';
const NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_LIST = 'commerce-checkout-shipping-methods-list';
const NODE_TYPE_COMMERCE_CHECKOUT_SHIPPING_METHODS_EMPTY_STATE = 'commerce-checkout-shipping-methods-empty-state';
const NODE_TYPE_COMMERCE_CHECKOUT_BILLING_ADDRESS_TOGGLE_CHECKBOX = 'commerce-checkout-billing-address-toggle-checkbox';
const NODE_TYPE_COMMERCE_CHECKOUT_PLACE_ORDER_BUTTON = 'commerce-checkout-place-order-button';
const NODE_TYPE_COMMERCE_CHECKOUT_ERROR_STATE = 'commerce-checkout-error-state';
const NODE_TYPE_COMMERCE_ORDER_CONFIRMATION_WRAPPER = 'commerce-order-confirmation-wrapper';
const NODE_TYPE_COMMERCE_CART_QUICK_CHECKOUT_ACTIONS = 'commerce-cart-quick-checkout-actions';
const NODE_TYPE_COMMERCE_CART_QUICK_CHECKOUT_BUTTON = 'commerce-cart-quick-checkout-button';
const NODE_TYPE_COMMERCE_CART_APPLE_PAY_BUTTON = 'commerce-cart-apple-pay-button';
const NODE_TYPE_COMMERCE_CHECKOUT_ADDITIONAL_INFO = 'commerce-checkout-additional-info';
const NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_FORM_CONTAINER = 'commerce-paypal-checkout-form-container';
const NODE_TYPE_COMMERCE_PAYPAL_CHECKOUT_ERROR_STATE = 'commerce-checkout-error-state';
const NODE_TYPE_COMMERCE_CHECKOUT_DISCOUNT_FORM = 'commerce-checkout-discount-form';
const NODE_TYPE_COMMERCE_CHECKOUT_DISCOUNT_INPUT = 'commerce-checkout-discount-input';
const NODE_TYPE_COMMERCE_BUY_NOW_BUTTON = 'commerce-buy-now-button';
const NODE_TYPE_COMMERCE_DOWNLOADS_BUTTON = 'commerce-downloads-button';
const NODE_TYPE_COMMERCE_ADD_TO_CART_BUTTON = 'commerce-add-to-cart-button';
const NODE_TYPE_ADD_TO_CART_ERROR = 'commerce-add-to-cart-error';
const ADD_TO_CART_STATES = {
    DEFAULT: 'DEFAULT',
    OUT_OF_STOCK: 'OUT_OF_STOCK',
    ERROR: 'ERROR'
};
const CART_STATES = {
    DEFAULT: 'DEFAULT',
    EMPTY: 'EMPTY',
    ERROR: 'ERROR'
};
const CART_STATES_AUTOMATION = {
    DEFAULT: 'cart-default-button',
    EMPTY: 'cart-empty-button',
    ERROR: 'cart-error-button'
};
const CHECKOUT_STATES = {
    DEFAULT: 'DEFAULT',
    ERROR: 'ERROR'
};
const SHIPPING_METHODS_STATES = {
    DEFAULT: 'DEFAULT',
    EMPTY: 'EMPTY'
};
const CART_TYPE_DROPDOWN_ON_OPEN = {
    CLICK: 'CLICK',
    HOVER: 'HOVER'
};
const CART_TYPES = {
    MODAL: 'modal',
    LEFT_SIDEBAR: 'leftSidebar',
    RIGHT_SIDEBAR: 'rightSidebar',
    LEFT_DROPDOWN: 'leftDropdown',
    RIGHT_DROPDOWN: 'rightDropdown',
    DROPDOWN: 'dropdown'
};
const CART_COUNT_HIDE_RULES = {
    ALWAYS: 'always',
    EMPTY: 'empty'
};
const QUICK_CHECKOUT_STATES = {
    NONE: 'NONE',
    PAY_NOW: 'PAY_NOW',
    APPLE_PAY: 'APPLE_PAY'
};
const QUICK_CHECKOUT_AUTOMATION = {
    PAY_NOW: 'quick-checkout-default-button',
    APPLE_PAY: 'quick-checkout-apple-pay-button'
};
const PREVIEW_ITEMS_DEFAULT = 3;
const PREVIEW_ITEMS_KEY = 'previewItems';
const PREVIEW_ITEMS_KEYPATH = [
    'data',
    'temp',
    PREVIEW_ITEMS_KEY
];
const QUANTITY_ENABLED = 'quantityEnabled';
const STATE = 'state';
const CART_STATE = 'state';
const QUICK_CHECKOUT_STATE = 'state';
const QUICK_CHECKOUT_STATE_KEYPATH = [
    'data',
    'temp',
    QUICK_CHECKOUT_STATE
];
const CHECKOUT_STATE = 'state';
const SHIPPING_METHODS_STATE = 'shippingMethodsState';
const OPEN_STATE_KEY = 'isOpen';
const OPEN_STATE_KEYPATH = [
    'data',
    'temp',
    OPEN_STATE_KEY
];
const OPEN_STATE_DEFAULT = false;
const BILLING_ADDRESS_TOGGLE_KEY = 'isBillingAddressOpen';
const BILLING_ADDRESS_TOGGLE_KEYPATH = [
    'data',
    'temp',
    BILLING_ADDRESS_TOGGLE_KEY
];
const BILLING_ADDRESS_TOGGLE_DEFAULT = true;
const HIDE_CART_WHEN_EMPTY_KEY = 'hideCartWhenEmpty';
const HIDE_CART_WHEN_EMPTY_KEYPATH = [
    'data',
    'commerce',
    HIDE_CART_WHEN_EMPTY_KEY
];
const HIDE_CART_WHEN_EMPTY_DEFAULT = false;
const HIDE_CART_COUNT_KEY = 'hideCartCount';
const HIDE_CART_COUNT_DEFAULT = false;
const LOADING_TEXT = 'loadingText';
const LOADING_TEXT_DEFAULT = 'Adding to cart...';
const CART_CHECKOUT_BUTTON_TEXT_DEFAULT = 'Continue to Checkout';
const CART_CHECKOUT_LOADING_TEXT_DEFAULT = 'Hang Tight...';
const CHECKOUT_PLACE_ORDER_BUTTON_TEXT_DEFAULT = 'Place Order';
const CHECKOUT_PLACE_ORDER_LOADING_TEXT_DEFAULT = 'Placing Order...';
const CART_TYPE_KEY = 'cartType';
const ALIGN_KEY = 'align';
const ALIGN_DEFAULT = 'rightDropdown';
const CART_TYPE_DROPDOWN_ON_OPEN_KEY = 'openOn';
const CART_PRODUCT_ADDED_KEY = 'openWhenProductAdded';
const CART_PRODUCT_ADDED_KEYPATH = [
    'data',
    'commerce',
    CART_PRODUCT_ADDED_KEY
];
const CART_PRODUCT_ADDED_DEFAULT = true;
const COMMERCE_CART_PUBLISHED_SITE_ACTION_ATTR = 'data-wf-cart-action';
const COMMERCE_CART_PUBLISHED_SITE_ACTIONS = {
    UPDATE_ITEM_QUANTITY: 'update-item-quantity',
    REMOVE_ITEM: 'remove-item'
};
const COMMERCE_CART_ITEM_ID_ATTR = 'data-wf-item-id';
const COMMERCE_SKU_COLLECTION_SLUG = 'sku';
const COMMERCE_SKU_FIELD_SLUG = 'sku';
const COMMERCE_PRODUCT_COLLECTION_SLUG = 'product';
const COMMERCE_PRODUCT_FIELD_SLUG = 'product';
const COMMERCE_CATEGORY_COLLECTION_SLUG = 'category';
const COMMERCE_PLUGIN_KEY = 'ecommerce';
const DEFAULT_SKU_SLUG = 'default-sku';
const WF_BINDING_DATA_KEY = 'data-wf-bindings';
const WF_CONDITION_DATA_KEY = 'data-wf-conditions';
const WF_COLLECTION_DATA_KEY = 'data-wf-collection';
const WF_TEMPLATE_ID_DATA_KEY = 'data-wf-template-id';
const WF_SKU_BINDING_DATA_KEY = 'data-wf-sku-bindings';
const WF_SKU_CONDITION_DATA_KEY = 'data-wf-sku-conditions';
const WF_TEMPLATE_TYPE = 'text/x-wf-template';
const INFO_ERR = 'INFO_ERROR';
const SHIPPING_ERR = 'SHIPPING_ERROR';
const BILLING_ERR = 'BILLING_ERROR';
const PAYMENT_ERR = 'PAYMENT_ERROR';
const PRICING_ERR = 'PRICING_ERROR';
const ORDER_MIN_ERR = 'ORDER_MINIMUM_ERROR';
const ORDER_EXTRAS_ERR = 'ORDER_EXTRAS_ERROR';
const PRODUCT_ERR = 'PRODUCT_ERROR';
const INVALID_DISCOUNT_ERR = 'INVALID_DISCOUNT_ERROR';
const EXPIRED_DISCOUNT_ERR = 'EXPIRED_DISCOUNT_ERROR';
const USAGE_REACHED_DISCOUNT_ERR = 'USAGE_REACHED_DISCOUNT_ERROR';
const REQUIREMENTS_NOT_MET_DISCOUNT_ERR = 'REQUIREMENTS_NOT_MET_DISCOUNT_ERROR';
const COMMERCE_ERROR_CATEGORY = {
    GENERAL: {
        id: 'GENERAL',
        label: 'General Errors'
    },
    PRODUCT: {
        id: 'PRODUCT',
        label: 'Product Errors'
    },
    BILLING: {
        id: 'BILLING',
        label: 'Billing Errors'
    },
    DISCOUNT: {
        id: 'DISCOUNT',
        label: 'Discount Errors'
    },
    SUBSCRIPTION: {
        id: 'SUBSCRIPTION',
        label: 'Subscription Errors'
    }
};
const CHECKOUT_ERRORS = {
    INFO: {
        id: INFO_ERR,
        name: 'General customer info error',
        category: COMMERCE_ERROR_CATEGORY.GENERAL,
        copy: 'There was an error processing your customer info. Please try again, or contact us if you continue to have problems.',
        path: [
            'data',
            'commerce',
            INFO_ERR
        ]
    },
    SHIPPING: {
        id: SHIPPING_ERR,
        category: COMMERCE_ERROR_CATEGORY.GENERAL,
        name: 'Shipping not available',
        copy: 'Sorry. We can’t ship your order to the address provided.',
        path: [
            'data',
            'commerce',
            SHIPPING_ERR
        ]
    },
    EXTRAS: {
        id: ORDER_EXTRAS_ERR,
        category: COMMERCE_ERROR_CATEGORY.GENERAL,
        name: 'Merchant setting changed',
        copy: 'A merchant setting has changed that impacts your cart. Please refresh and try again.',
        path: [
            'data',
            'commerce',
            ORDER_EXTRAS_ERR
        ],
        requiresRefresh: true
    },
    PRICING: {
        id: PRICING_ERR,
        category: COMMERCE_ERROR_CATEGORY.PRODUCT,
        name: 'Product price changed',
        copy: 'The prices of one or more items in your cart have changed. Please refresh this page and try again.',
        path: [
            'data',
            'commerce',
            PRICING_ERR
        ],
        requiresRefresh: true
    },
    PRODUCT: {
        id: PRODUCT_ERR,
        category: COMMERCE_ERROR_CATEGORY.PRODUCT,
        name: 'Product removed',
        copy: 'One or more of the products in your cart have been removed. Please refresh the page and try again.',
        path: [
            'data',
            'commerce',
            PRODUCT_ERR
        ],
        requiresRefresh: true
    },
    PAYMENT: {
        id: PAYMENT_ERR,
        category: COMMERCE_ERROR_CATEGORY.BILLING,
        name: 'General payment error',
        copy: 'There was an error processing your payment. Please try again, or contact us if you continue to have problems.',
        path: [
            'data',
            'commerce',
            PAYMENT_ERR
        ]
    },
    BILLING: {
        id: BILLING_ERR,
        category: COMMERCE_ERROR_CATEGORY.BILLING,
        name: 'Card declined',
        copy: 'Your payment could not be completed with the payment information provided. Please make sure that your card and billing address information is correct, or try a different payment card, to complete this order. Contact us if you continue to have problems.',
        path: [
            'data',
            'commerce',
            BILLING_ERR
        ]
    },
    MINIMUM: {
        id: ORDER_MIN_ERR,
        category: COMMERCE_ERROR_CATEGORY.BILLING,
        name: 'Order minimum not met',
        copy: 'The order minimum was not met. Add more items to your cart to continue.',
        path: [
            'data',
            'commerce',
            ORDER_MIN_ERR
        ],
        note: {
            copy: "You can customize this message with the exact minimum based on your Stripe account's settlement currency.",
            cta: {
                copy: 'Go to Stripe docs',
                link: 'https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts'
            }
        }
    },
    INVALID_DISCOUNT: {
        id: INVALID_DISCOUNT_ERR,
        category: COMMERCE_ERROR_CATEGORY.DISCOUNT,
        name: 'Invalid discount error',
        copy: 'This discount is invalid.',
        path: [
            'data',
            'commerce',
            INVALID_DISCOUNT_ERR
        ]
    },
    EXPIRED_DISCOUNT: {
        id: EXPIRED_DISCOUNT_ERR,
        category: COMMERCE_ERROR_CATEGORY.DISCOUNT,
        name: 'Discount expired',
        copy: 'This discount is no longer available.',
        path: [
            'data',
            'commerce',
            EXPIRED_DISCOUNT_ERR
        ]
    },
    USAGE_REACHED_DISCOUNT: {
        id: USAGE_REACHED_DISCOUNT_ERR,
        category: COMMERCE_ERROR_CATEGORY.DISCOUNT,
        name: 'Discount usage limit reached',
        copy: 'This discount is no longer available.',
        path: [
            'data',
            'commerce',
            USAGE_REACHED_DISCOUNT_ERR
        ]
    },
    REQUIREMENTS_NOT_MET_DISCOUNT: {
        id: REQUIREMENTS_NOT_MET_DISCOUNT_ERR,
        category: COMMERCE_ERROR_CATEGORY.DISCOUNT,
        name: 'Discount requirements not met',
        copy: 'Your order does not meet the requirements for this discount.',
        path: [
            'data',
            'commerce',
            REQUIREMENTS_NOT_MET_DISCOUNT_ERR
        ]
    }
};
const QUANTITY_ERR = 'QUANTITY_ERROR';
const CHECKOUT_ERR = 'CHECKOUT_ERROR';
const GENERAL_ERR = 'GENERAL_ERROR';
const CART_ORDER_MIN_ERR = 'CART_ORDER_MIN_ERROR';
const SUBSCRIPTION_ERR = 'SUBSCRIPTION_ERR';
const CART_ERRORS = {
    QUANTITY: {
        id: QUANTITY_ERR,
        name: 'Quantity not available',
        category: COMMERCE_ERROR_CATEGORY.GENERAL,
        copy: 'Product is not available in this quantity.',
        path: [
            'data',
            'commerce',
            QUANTITY_ERR
        ]
    },
    GENERAL: {
        id: GENERAL_ERR,
        category: COMMERCE_ERROR_CATEGORY.GENERAL,
        name: 'General error',
        copy: 'Something went wrong when adding this item to the cart.',
        path: [
            'data',
            'commerce',
            GENERAL_ERR
        ]
    },
    CHECKOUT: {
        id: CHECKOUT_ERR,
        category: COMMERCE_ERROR_CATEGORY.GENERAL,
        name: 'Checkout disabled',
        copy: 'Checkout is disabled on this site.',
        path: [
            'data',
            'commerce',
            CHECKOUT_ERR
        ]
    },
    CART_ORDER_MIN: {
        id: CART_ORDER_MIN_ERR,
        category: COMMERCE_ERROR_CATEGORY.BILLING,
        name: 'Order minimum not met',
        copy: 'The order minimum was not met. Add more items to your cart to continue.',
        path: [
            'data',
            'commerce',
            CART_ORDER_MIN_ERR
        ]
    },
    SUBSCRIPTION_ERROR: {
        id: SUBSCRIPTION_ERR,
        category: COMMERCE_ERROR_CATEGORY.SUBSCRIPTION,
        name: 'Subscription not verified',
        copy: 'Before you purchase, please use your email invite to verify your address so we can send order updates.',
        path: [
            'data',
            'commerce',
            SUBSCRIPTION_ERR
        ]
    }
};
const ADD_TO_CART_QUANTITY_ERR = 'ADD_TO_CART_QUANTITY_ERROR';
const ADD_TO_CART_GENERAL_ERR = 'ADD_TO_CART_GENERAL_ERROR';
const ADD_TO_CART_MIXED_ERR = 'ADD_TO_CART_MIXED_ERROR';
const ADD_TO_CART_ERRORS = {
    QUANTITY: {
        id: ADD_TO_CART_QUANTITY_ERR,
        category: COMMERCE_ERROR_CATEGORY.GENERAL,
        name: 'Quantity not available',
        copy: 'Product is not available in this quantity.',
        path: [
            'data',
            'commerce',
            ADD_TO_CART_QUANTITY_ERR
        ]
    },
    GENERAL: {
        id: ADD_TO_CART_GENERAL_ERR,
        category: COMMERCE_ERROR_CATEGORY.GENERAL,
        name: 'Add to Cart error',
        copy: 'Something went wrong when adding this item to the cart.',
        path: [
            'data',
            'commerce',
            ADD_TO_CART_GENERAL_ERR
        ]
    },
    MIXED_CART: {
        id: ADD_TO_CART_MIXED_ERR,
        category: COMMERCE_ERROR_CATEGORY.GENERAL,
        name: 'Add to mixed Cart error',
        copy: 'You can’t purchase another product with a subscription.'
    },
    BUY_NOW: {
        id: 'BUY_NOW_ERROR',
        category: COMMERCE_ERROR_CATEGORY.GENERAL,
        name: 'Buy now error',
        copy: 'Something went wrong when trying to purchase this item.'
    },
    CHECKOUT_DISABLED: {
        id: 'CHECKOUT_DISABLED_ERROR',
        category: COMMERCE_ERROR_CATEGORY.GENERAL,
        name: 'Checkout disabled',
        copy: 'Checkout is disabled on this site.'
    },
    SELECT_ALL_OPTIONS: {
        id: 'SELECT_ALL_OPTIONS',
        category: COMMERCE_ERROR_CATEGORY.GENERAL,
        name: 'Option selection required',
        copy: 'Please select an option in each set.',
        path: [
            'data',
            'commerce',
            'SELECT_ALL_OPTIONS'
        ]
    }
};
const DATA_ATTR_ANIMATION_EASING = 'data-wf-cart-easing';
const ANIMATION_EASING_DEFAULT = 'ease-out-quad';
const ANIMATION_EASING_KEY = 'easingType';
const ANIMATION_EASING_KEYPATH = [
    'data',
    'commerce',
    ANIMATION_EASING_KEY
];
const DATA_ATTR_ANIMATION_DURATION = 'data-wf-cart-duration';
const ANIMATION_DURATION_DEFAULT = 300;
const ANIMATION_DURATION_KEY = 'duration';
const ANIMATION_DURATION_KEYPATH = [
    'data',
    'commerce',
    ANIMATION_DURATION_KEY
];
const DATA_ATTR_PUBLISHABLE_KEY = 'data-publishable-key';
const EDITABLE_STYLE_NAMES = [
    'backgroundColor',
    'backgroundSize',
    'backgroundPosition',
    'backgroundImage',
    'backgroundRepeat',
    'border',
    'borderRadius',
    'boxShadow',
    'clear',
    'color',
    'cursor',
    'direction',
    'display',
    'filter',
    'float',
    'fontFamily',
    'fontSize',
    'fontStyle',
    'fontWeight',
    'height',
    'lineHeight',
    'letterSpacing',
    'listStyleType',
    'marginBottom',
    'marginLeft',
    'marginRight',
    'marginTop',
    'maxHeight',
    'minHeight',
    'maxWidth',
    'minWidth',
    'mixBlendMode',
    'opacity',
    'overflow',
    'outlineColor',
    'outlineOffset',
    'outlineStyle',
    'outlineWidth',
    'paddingBottom',
    'paddingLeft',
    'paddingRight',
    'paddingTop',
    'position',
    'textAlign',
    'textColumns',
    'textDecoration',
    'textIndent',
    'textTransform',
    'textShadow',
    'transform',
    'transition',
    'whiteSpace',
    'width'
];
const symbolMap = {
    aed: 'د.إ',
    afn: '؋',
    all: 'L',
    amd: '֏',
    ang: 'ƒ',
    aoa: 'Kz',
    ars: '$',
    aud: '$',
    awg: 'ƒ',
    azn: '₼',
    bam: 'KM',
    bbd: '$',
    bdt: '৳',
    bgn: 'лв',
    bhd: '.د.ب',
    bif: 'FBu',
    bmd: '$',
    bnd: '$',
    bob: '$b',
    brl: 'R$',
    bsd: '$',
    btc: '฿',
    btn: 'Nu.',
    bwp: 'P',
    byr: 'Br',
    byn: 'Br',
    bzd: 'BZ$',
    cad: '$',
    cdf: 'FC',
    chf: 'CHF',
    clp: '$',
    cny: '¥',
    cop: '$',
    crc: '₡',
    cuc: '$',
    cup: '₱',
    cve: '$',
    czk: 'Kč',
    djf: 'Fdj',
    dkk: 'kr',
    dop: 'RD$',
    dzd: 'دج',
    eek: 'kr',
    egp: '£',
    ern: 'Nfk',
    etb: 'Br',
    eth: 'Ξ',
    eur: '€',
    fjd: '$',
    fkp: '£',
    gbp: '£',
    gel: '₾',
    ggp: '£',
    ghc: '₵',
    ghs: 'GH₵',
    gip: '£',
    gmd: 'D',
    gnf: 'FG',
    gtq: 'Q',
    gyd: '$',
    hkd: '$',
    hnl: 'L',
    hrk: 'kn',
    htg: 'G',
    huf: 'Ft',
    idr: 'Rp',
    ils: '₪',
    imp: '£',
    inr: '₹',
    iqd: 'ع.د',
    irr: '﷼',
    isk: 'kr',
    jep: '£',
    jmd: 'J$',
    jod: 'JD',
    jpy: '¥',
    kes: 'KSh',
    kgs: 'лв',
    khr: '៛',
    kmf: 'CF',
    kpw: '₩',
    krw: '₩',
    kwd: 'KD',
    kyd: '$',
    kzt: 'лв',
    lak: '₭',
    lbp: '£',
    lkr: '₨',
    lrd: '$',
    lsl: 'M',
    ltc: 'Ł',
    ltl: 'Lt',
    lvl: 'Ls',
    lyd: 'LD',
    mad: 'MAD',
    mdl: 'lei',
    mga: 'Ar',
    mkd: 'ден',
    mmk: 'K',
    mnt: '₮',
    mop: 'MOP$',
    mro: 'UM',
    mru: 'UM',
    mur: '₨',
    mvr: 'Rf',
    mwk: 'MK',
    mxn: '$',
    myr: 'RM',
    mzn: 'MT',
    nad: '$',
    ngn: '₦',
    nio: 'C$',
    nok: 'kr',
    npr: '₨',
    nzd: '$',
    omr: '﷼',
    pab: 'B/.',
    pen: 'S/.',
    pgk: 'K',
    php: '₱',
    pkr: '₨',
    pln: 'zł',
    pyg: 'Gs',
    qar: '﷼',
    rmb: '￥',
    ron: 'lei',
    rsd: 'Дин.',
    rub: '₽',
    rwf: 'R₣',
    sar: '﷼',
    sbd: '$',
    scr: '₨',
    sdg: 'ج.س.',
    sek: 'kr',
    sgd: '$',
    shp: '£',
    sll: 'Le',
    sos: 'S',
    srd: '$',
    ssp: '£',
    std: 'Db',
    stn: 'Db',
    svc: '$',
    syp: '£',
    szl: 'E',
    thb: '฿',
    tjs: 'SM',
    tmt: 'T',
    tnd: 'د.ت',
    top: 'T$',
    trl: '₤',
    try: '₺',
    ttd: 'TT$',
    tvd: '$',
    twd: 'NT$',
    tzs: 'TSh',
    uah: '₴',
    ugx: 'USh',
    usd: '$',
    uyu: '$U',
    uzs: 'лв',
    vef: 'Bs',
    vnd: '₫',
    vuv: 'VT',
    wst: 'WS$',
    xaf: 'FCFA',
    xbt: 'Ƀ',
    xcd: '$',
    xof: 'CFA',
    xpf: '₣',
    yer: '﷼',
    zar: 'R',
    zwd: 'Z$'
};
const CHECKOUT_BINDING_ROOT_QUERY_PATH = [
    'database',
    'commerceOrder'
];
const ORDER_TYPE = {
    REQUIRE_SHIPPING: 'shipping',
    NO_SHIPPING: 'noShipping'
};
const RENDER_TREE_EVENT = 'wf-render-tree';
const NEEDS_REFRESH = 'data-wf-needs-refresh';
const REQUIRES_SHIPPING = 'data-wf-order-requires-shipping';
const STRIPE_ELEMENT_INSTANCE = 'data-wf-stripe-element-instance';
const STRIPE_ELEMENT_TYPE = 'data-wf-stripe-element-type';
const STRIPE_ELEMENT_STYLE = 'data-wf-stripe-style';
const ADD_TO_CART_LOADING = 'data-wf-atc-loading';
const CHANGE_CART_EVENT = 'wf-change-cart-state';
const ADD_TO_CART_ERROR_MESSAGE = '.w-add-to-cart-error-msg';
const getATCErrorMessageForType = (errorType)=>`data-w-add-to-cart-${errorType}-error`;
const CHECKOUT_DISABLED_ERROR_MESSAGE = 'data-w-add-to-cart-checkout-disabled-error';
const CHECKOUT_QUERY = 'data-wf-checkout-query';
const getCheckoutErrorMessageForType = (errorType)=>`data-w-${errorType}-error`;
const REQUIRES_ACTION = 'requires_action';
const CART_GENERAL_ERROR_MESSAGE = 'data-w-cart-general-error';
const CART_CHECKOUT_ERROR_MESSAGE = 'data-w-cart-checkout-error';
const CART_CHECKOUT_ERROR_MESSAGE_SELECTOR = '.w-checkout-error-msg';
const CART_ERROR_MESSAGE = 'cart-error-msg';
const CART_ERROR_MESSAGE_SELECTOR = `.w-${CART_ERROR_MESSAGE}`;
const CART_OPEN = 'data-cart-open';
const CART_TYPE = 'data-wf-cart-type';
const CART_QUERY = 'data-wf-cart-query';
const PAYPAL_ELEMENT_INSTANCE = 'data-wf-paypal-element';
const PAYPAL_BUTTON_ELEMENT_INSTANCE = 'data-wf-paypal-button';
const getCartErrorMessageForType = (errorType)=>`data-w-cart-${errorType}-error`;
const ORDER_QUERY = 'data-wf-order-query';
const STRIPE_ECOMMERCE_KEY = 'data-wf-ecomm-key';
const STRIPE_ECOMMERCE_ACCOUNT_ID = 'data-wf-ecomm-acct-id';
const EASINGS = {
    ease: 'Ease',
    'ease-in': 'Ease In',
    'ease-out': 'Ease Out',
    'ease-in-out': 'Ease In Out',
    linear: 'Linear',
    'ease-in-quad': 'Ease In Quad',
    'ease-in-cubic': 'Ease In Cubic',
    'ease-in-quart': 'Ease In Quart',
    'ease-in-quint': 'Ease In Quint',
    'ease-in-sine': 'Ease In Sine',
    'ease-in-expo': 'Ease In Expo',
    'ease-in-circ': 'Ease In Circ',
    'ease-in-back': 'Ease In Back',
    'ease-out-quad': 'Ease Out Quad',
    'ease-out-cubic': 'Ease Out Cubic',
    'ease-out-quart': 'Ease Out Quart',
    'ease-out-quint': 'Ease Out Quint',
    'ease-out-sine': 'Ease Out Sine',
    'ease-out-expo': 'Ease Out Expo',
    'ease-out-circ': 'Ease Out Circ',
    'ease-out-back': 'Ease Out Back',
    'ease-in-out-quad': 'Ease In Out Quad',
    'ease-in-out-cubic': 'Ease In Out Cubic',
    'ease-in-out-quart': 'Ease In Out Quart',
    'ease-in-out-quint': 'Ease In Out Quint',
    'ease-in-out-sine': 'Ease In Out Sine',
    'ease-in-out-expo': 'Ease In Out Expo',
    'ease-in-out-circ': 'Ease In Out Circ',
    'ease-in-out-back': 'Ease In Out Back'
};
const EASE_DEFAULT = 'ease-out-quad';
const SECTION_NAMES = {
    ECOMMERCE: 'Ecommerce',
    CHECKOUT_PAGE: 'Checkout Page',
    ORDER_CONFIRMATION_PAGE: 'Order Confirmation Page',
    PAYPAL_CHECKOUT_PAGE: 'Checkout (PayPal) Page'
};
const COMMERCE_DEFAULT_COPY = {
    INFO_ERROR: CHECKOUT_ERRORS.INFO.copy,
    SHIPPING_ERROR: CHECKOUT_ERRORS.SHIPPING.copy,
    ORDER_EXTRAS_ERROR: CHECKOUT_ERRORS.EXTRAS.copy,
    PRICING_ERROR: CHECKOUT_ERRORS.PRICING.copy,
    PRODUCT_ERROR: CHECKOUT_ERRORS.PRODUCT.copy,
    PAYMENT_ERROR: CHECKOUT_ERRORS.PAYMENT.copy,
    BILLING_ERROR: CHECKOUT_ERRORS.BILLING.copy,
    ORDER_MINIMUM_ERROR: CHECKOUT_ERRORS.MINIMUM.copy,
    INVALID_DISCOUNT_ERROR: CHECKOUT_ERRORS.INVALID_DISCOUNT.copy,
    EXPIRED_DISCOUNT_ERROR: CHECKOUT_ERRORS.EXPIRED_DISCOUNT.copy,
    USAGE_REACHED_DISCOUNT_ERROR: CHECKOUT_ERRORS.USAGE_REACHED_DISCOUNT.copy,
    REQUIREMENTS_NOT_MET_DISCOUNT_ERROR: CHECKOUT_ERRORS.REQUIREMENTS_NOT_MET_DISCOUNT.copy,
    COMMERCE_ADD_TO_CART_BUTTON_DEFAULT: 'Add to Cart',
    COMMERCE_ADD_TO_CART_BUTTON_WAITING: 'Adding to cart...',
    COMMERCE_BUY_NOW_BUTTON_DEFAULT: 'Buy now',
    SUBSCRIPTION_BUTTON_DEFAULT: 'Subscribe now',
    QUANTITY_ERROR: 'Product is not available in this quantity.',
    GENERAL_ERROR: 'Something went wrong when adding this item to the cart.',
    CHECKOUT_ERROR: 'Checkout is disabled on this site.',
    CART_ORDER_MIN_ERROR: 'The order minimum was not met. Add more items to your cart to continue.',
    SUBSCRIPTION_ERR: 'Before you purchase, please use your email invite to verify your address so we can send order updates.',
    ADD_TO_CART_QUANTITY_ERROR: 'Product is not available in this quantity.',
    ADD_TO_CART_GENERAL_ERROR: 'Something went wrong when adding this item to the cart.',
    ADD_TO_CART_MIXED_ERROR: 'You can’t purchase another product with a subscription.',
    BUY_NOW_ERROR: 'Something went wrong when trying to purchase this item.',
    CHECKOUT_DISABLED_ERROR: 'Checkout is disabled on this site.',
    SELECT_ALL_OPTIONS: 'Please select an option in each set.'
};

//# sourceMappingURL=data:application/json;base64,

}),
37693: (function (__unused_webpack_module, exports) {
"use strict";
// Note: These currencies are extracted by getting Stripe compatible currencies with:
//
// curl https://api.stripe.com/v1/country_specs\?limit\=100 -u $STRIPE_TEST_KEY: -G \
//   | jq '.data|.[]|.supported_payment_currencies|.[]' \
//   | sort \
//   | uniq
//
// And then populating in the names from ISO 4217:
//
// Digit counts are also added. Stripe is treated as the source-of-truth for that number, even though their
// numbers are often at odds with ISO 4217. Notes:
//
//  - CVE had a subunit (centavo), that has been discontinued. The ISO reflects this, but stripe sticks
//    with 2 digits, since the currency is still commonly formatted as "1$00". ¯\_(ツ)_/¯
//  - ISK had a subunit (eyrir) that was obsoleted in 2003, but Stripe sticks with 2 digits instead of
//    the ISO's 0.
//  - MGA is strange, since its smallest denomination is a 1/5th piece (the Iraimbilanja), but is
//    represented as a decimal, so the currency goes "1.3, 1.4, 2.0, ...". Stripe dodges this strangeness
//    by ignoring that minimum unit, and so do we, since it has so little value.
//  - UGX had a subunit (cent) that was discontinued in 2013. Stripe still counts it, tho, even though
//    that cent is work 1/350000th of a penny.

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "stripeCurrencyList", ({
    enumerable: true,
    get: function() {
        return stripeCurrencyList;
    }
}));
const stripeCurrencyList = [
    /*
   * ----------------------------------------------------------------------------
   * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
   * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
   * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
   * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
   *
   * This const is duplicated to @packages/systems/core/constants/SharedConfig.js
   * to avoid bundling this entire SharedConfig file in the webflow.js published
   * site bundle. Once we have support for bundling for the Dashboard (this
   * config is injected in to window.SharedConfig for angular), we should
   * be able to delete the const in SharedConfig and use the commerce/consts
   * package whenever `stripeCurrencyList` const is needed.
   *
   * In the meantime, if you make changes to this const, please make sure to
   * update in the other location as well.
   *
   * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
   * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
   * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
   * NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
   * ----------------------------------------------------------------------------
   */ {
        code: 'AED',
        digits: 2,
        minCharge: 0,
        name: 'United Arab Emirates Dirham'
    },
    {
        code: 'AFN',
        digits: 2,
        minCharge: 0,
        name: 'Afghanistan Afghani'
    },
    {
        code: 'ALL',
        digits: 2,
        minCharge: 0,
        name: 'Albanian Lek'
    },
    {
        code: 'AMD',
        digits: 2,
        minCharge: 0,
        name: 'Armenia Dram'
    },
    {
        code: 'ANG',
        digits: 2,
        minCharge: 0,
        name: 'Netherlands Antillean Gulden'
    },
    {
        code: 'AOA',
        digits: 2,
        minCharge: 0,
        name: 'Angola Kwanza'
    },
    {
        code: 'ARS',
        digits: 2,
        minCharge: 0,
        name: 'Argentine Peso'
    },
    {
        code: 'AUD',
        digits: 2,
        minCharge: 50,
        name: 'Australian Dollar'
    },
    {
        code: 'AWG',
        digits: 2,
        minCharge: 0,
        name: 'Aruban Florin'
    },
    {
        code: 'AZN',
        digits: 2,
        minCharge: 0,
        name: 'Azerbaijan Manat'
    },
    {
        code: 'BAM',
        digits: 2,
        minCharge: 0,
        name: 'Bosnia and Herzegovina Convertible Marka'
    },
    {
        code: 'BBD',
        digits: 2,
        minCharge: 0,
        name: 'Barbadian Dollar'
    },
    {
        code: 'BDT',
        digits: 2,
        minCharge: 0,
        name: 'Bangladeshi Taka'
    },
    {
        code: 'BGN',
        digits: 2,
        minCharge: 0,
        name: 'Bulgaria Lev'
    },
    {
        code: 'BIF',
        digits: 0,
        minCharge: 0,
        name: 'Burundian Franc'
    },
    {
        code: 'BMD',
        digits: 2,
        minCharge: 0,
        name: 'Bermudian Dollar'
    },
    {
        code: 'BND',
        digits: 2,
        minCharge: 0,
        name: 'Brunei Dollar'
    },
    {
        code: 'BOB',
        digits: 2,
        minCharge: 0,
        name: 'Bolivian Boliviano'
    },
    {
        code: 'BRL',
        digits: 2,
        minCharge: 50,
        name: 'Brazilian Real'
    },
    {
        code: 'BSD',
        digits: 2,
        minCharge: 0,
        name: 'Bahamian Dollar'
    },
    {
        code: 'BWP',
        digits: 2,
        minCharge: 0,
        name: 'Botswana Pula'
    },
    {
        code: 'BZD',
        digits: 2,
        minCharge: 0,
        name: 'Belize Dollar'
    },
    {
        code: 'CAD',
        digits: 2,
        minCharge: 50,
        name: 'Canadian Dollar'
    },
    {
        code: 'CDF',
        digits: 2,
        minCharge: 0,
        name: 'Congo/Kinshasa Franc'
    },
    {
        code: 'CHF',
        digits: 2,
        minCharge: 50,
        name: 'Swiss Franc'
    },
    {
        code: 'CLP',
        digits: 0,
        minCharge: 0,
        name: 'Chilean Peso'
    },
    {
        code: 'CNY',
        digits: 2,
        minCharge: 0,
        name: 'Chinese Renminbi Yuan'
    },
    {
        code: 'COP',
        digits: 2,
        minCharge: 0,
        name: 'Colombian Peso'
    },
    {
        code: 'CRC',
        digits: 2,
        minCharge: 0,
        name: 'Costa Rican Colón'
    },
    {
        code: 'CVE',
        digits: 2,
        minCharge: 0,
        name: 'Cape Verdean Escudo'
    },
    {
        code: 'CZK',
        digits: 2,
        minCharge: 0,
        name: 'Czech Koruna'
    },
    {
        code: 'DJF',
        digits: 0,
        minCharge: 0,
        name: 'Djiboutian Franc'
    },
    {
        code: 'DKK',
        digits: 2,
        minCharge: 250,
        name: 'Danish Krone'
    },
    {
        code: 'DOP',
        digits: 2,
        minCharge: 0,
        name: 'Dominican Peso'
    },
    {
        code: 'DZD',
        digits: 2,
        minCharge: 0,
        name: 'Algerian Dinar'
    },
    {
        code: 'EGP',
        digits: 2,
        minCharge: 0,
        name: 'Egyptian Pound'
    },
    {
        code: 'ETB',
        digits: 2,
        minCharge: 0,
        name: 'Ethiopian Birr'
    },
    {
        code: 'EUR',
        digits: 2,
        minCharge: 50,
        name: 'Euro'
    },
    {
        code: 'FJD',
        digits: 2,
        minCharge: 0,
        name: 'Fijian Dollar'
    },
    {
        code: 'FKP',
        digits: 2,
        minCharge: 0,
        name: 'Falkland Islands Pound'
    },
    {
        code: 'GBP',
        digits: 2,
        minCharge: 30,
        name: 'British Pound'
    },
    {
        code: 'GEL',
        digits: 2,
        minCharge: 0,
        name: 'Georgia Lari'
    },
    {
        code: 'GIP',
        digits: 2,
        minCharge: 0,
        name: 'Gibraltar Pound'
    },
    {
        code: 'GMD',
        digits: 2,
        minCharge: 0,
        name: 'Gambian Dalasi'
    },
    {
        code: 'GNF',
        digits: 0,
        minCharge: 0,
        name: 'Guinean Franc'
    },
    {
        code: 'GTQ',
        digits: 2,
        minCharge: 0,
        name: 'Guatemalan Quetzal'
    },
    {
        code: 'GYD',
        digits: 2,
        minCharge: 0,
        name: 'Guyanese Dollar'
    },
    {
        code: 'HKD',
        digits: 2,
        minCharge: 400,
        name: 'Hong Kong Dollar'
    },
    {
        code: 'HNL',
        digits: 2,
        minCharge: 0,
        name: 'Honduran Lempira'
    },
    {
        code: 'HRK',
        digits: 2,
        minCharge: 0,
        name: 'Croatian Kuna'
    },
    {
        code: 'HTG',
        digits: 2,
        minCharge: 0,
        name: 'Haitian Gourde'
    },
    {
        code: 'HUF',
        digits: 2,
        minCharge: 0,
        name: 'Hungarian Forint'
    },
    {
        code: 'IDR',
        digits: 2,
        minCharge: 0,
        name: 'Indonesian Rupiah'
    },
    {
        code: 'ILS',
        digits: 2,
        minCharge: 0,
        name: 'Israeli New Sheqel'
    },
    {
        code: 'INR',
        digits: 2,
        minCharge: 50,
        name: 'Indian Rupee'
    },
    {
        code: 'ISK',
        digits: 2,
        minCharge: 0,
        name: 'Icelandic Króna'
    },
    {
        code: 'JMD',
        digits: 2,
        minCharge: 0,
        name: 'Jamaican Dollar'
    },
    {
        code: 'JPY',
        digits: 0,
        minCharge: 50,
        name: 'Japanese Yen'
    },
    {
        code: 'KES',
        digits: 2,
        minCharge: 0,
        name: 'Kenyan Shilling'
    },
    {
        code: 'KGS',
        digits: 2,
        minCharge: 0,
        name: 'Kyrgyzstan Som'
    },
    {
        code: 'KHR',
        digits: 2,
        minCharge: 0,
        name: 'Cambodian Riel'
    },
    {
        code: 'KMF',
        digits: 0,
        minCharge: 0,
        name: 'Comorian Franc'
    },
    {
        code: 'KRW',
        digits: 0,
        minCharge: 0,
        name: 'South Korean Won'
    },
    {
        code: 'KYD',
        digits: 2,
        minCharge: 0,
        name: 'Cayman Islands Dollar'
    },
    {
        code: 'KZT',
        digits: 2,
        minCharge: 0,
        name: 'Kazakhstani Tenge'
    },
    {
        code: 'LAK',
        digits: 2,
        minCharge: 0,
        name: 'Lao Kip'
    },
    {
        code: 'LBP',
        digits: 2,
        minCharge: 0,
        name: 'Lebanese Pound'
    },
    {
        code: 'LKR',
        digits: 2,
        minCharge: 0,
        name: 'Sri Lankan Rupee'
    },
    {
        code: 'LRD',
        digits: 2,
        minCharge: 0,
        name: 'Liberian Dollar'
    },
    {
        code: 'LSL',
        digits: 2,
        minCharge: 0,
        name: 'Lesotho Loti'
    },
    {
        code: 'MAD',
        digits: 2,
        minCharge: 0,
        name: 'Moroccan Dirham'
    },
    {
        code: 'MDL',
        digits: 2,
        minCharge: 0,
        name: 'Moldovan Leu'
    },
    {
        code: 'MGA',
        digits: 0,
        minCharge: 0,
        name: 'Madagascar Ariary'
    },
    {
        code: 'MKD',
        digits: 2,
        minCharge: 0,
        name: 'Macedonia Denar'
    },
    {
        code: 'MMK',
        digits: 2,
        minCharge: 0,
        name: 'Myanmar (Burma) Kyat'
    },
    {
        code: 'MNT',
        digits: 2,
        minCharge: 0,
        name: 'Mongolian Tögrög'
    },
    {
        code: 'MOP',
        digits: 2,
        minCharge: 0,
        name: 'Macanese Pataca'
    },
    {
        code: 'MRO',
        digits: 2,
        minCharge: 0,
        name: 'Mauritanian Ouguiya'
    },
    {
        code: 'MUR',
        digits: 2,
        minCharge: 0,
        name: 'Mauritian Rupee'
    },
    {
        code: 'MVR',
        digits: 2,
        minCharge: 0,
        name: 'Maldivian Rufiyaa'
    },
    {
        code: 'MWK',
        digits: 2,
        minCharge: 0,
        name: 'Malawian Kwacha'
    },
    {
        code: 'MXN',
        digits: 2,
        minCharge: 1000,
        name: 'Mexican Peso'
    },
    {
        code: 'MYR',
        digits: 2,
        minCharge: 200,
        name: 'Malaysian Ringgit'
    },
    {
        code: 'MZN',
        digits: 2,
        minCharge: 0,
        name: 'Mozambique Metical'
    },
    {
        code: 'NAD',
        digits: 2,
        minCharge: 0,
        name: 'Namibian Dollar'
    },
    {
        code: 'NGN',
        digits: 2,
        minCharge: 0,
        name: 'Nigerian Naira'
    },
    {
        code: 'NIO',
        digits: 2,
        minCharge: 0,
        name: 'Nicaraguan Córdoba'
    },
    {
        code: 'NOK',
        digits: 2,
        minCharge: 300,
        name: 'Norwegian Krone'
    },
    {
        code: 'NPR',
        digits: 2,
        minCharge: 0,
        name: 'Nepalese Rupee'
    },
    {
        code: 'NZD',
        digits: 2,
        minCharge: 50,
        name: 'New Zealand Dollar'
    },
    {
        code: 'PAB',
        digits: 2,
        minCharge: 0,
        name: 'Panamanian Balboa'
    },
    {
        code: 'PEN',
        digits: 2,
        minCharge: 0,
        name: 'Peruvian Nuevo Sol'
    },
    {
        code: 'PGK',
        digits: 2,
        minCharge: 0,
        name: 'Papua New Guinean Kina'
    },
    {
        code: 'PHP',
        digits: 2,
        minCharge: 0,
        name: 'Philippine Peso'
    },
    {
        code: 'PKR',
        digits: 2,
        minCharge: 0,
        name: 'Pakistani Rupee'
    },
    {
        code: 'PLN',
        digits: 2,
        minCharge: 200,
        name: 'Polish Złoty'
    },
    {
        code: 'PYG',
        digits: 0,
        minCharge: 0,
        name: 'Paraguayan Guaraní'
    },
    {
        code: 'QAR',
        digits: 2,
        minCharge: 0,
        name: 'Qatari Riyal'
    },
    {
        code: 'RON',
        digits: 2,
        minCharge: 0,
        name: 'Romania Leu'
    },
    {
        code: 'RSD',
        digits: 2,
        minCharge: 0,
        name: 'Serbia Dinar'
    },
    {
        code: 'RUB',
        digits: 2,
        minCharge: 0,
        name: 'Russian Ruble'
    },
    {
        code: 'RWF',
        digits: 0,
        minCharge: 0,
        name: 'Rwanda Franc'
    },
    {
        code: 'SAR',
        digits: 2,
        minCharge: 0,
        name: 'Saudi Riyal'
    },
    {
        code: 'SBD',
        digits: 2,
        minCharge: 0,
        name: 'Solomon Islands Dollar'
    },
    {
        code: 'SCR',
        digits: 2,
        minCharge: 0,
        name: 'Seychellois Rupee'
    },
    {
        code: 'SEK',
        digits: 2,
        minCharge: 300,
        name: 'Swedish Krona'
    },
    {
        code: 'SGD',
        digits: 2,
        minCharge: 50,
        name: 'Singapore Dollar'
    },
    {
        code: 'SHP',
        digits: 2,
        minCharge: 0,
        name: 'Saint Helenian Pound'
    },
    {
        code: 'SLL',
        digits: 2,
        minCharge: 0,
        name: 'Sierra Leonean Leone'
    },
    {
        code: 'SOS',
        digits: 2,
        minCharge: 0,
        name: 'Somali Shilling'
    },
    {
        code: 'SRD',
        digits: 2,
        minCharge: 0,
        name: 'Suriname Dollar'
    },
    {
        code: 'STD',
        digits: 2,
        minCharge: 0,
        name: 'São Tomé and Príncipe Dobra'
    },
    {
        code: 'SZL',
        digits: 2,
        minCharge: 0,
        name: 'Swazi Lilangeni'
    },
    {
        code: 'THB',
        digits: 2,
        minCharge: 0,
        name: 'Thai Baht'
    },
    {
        code: 'TJS',
        digits: 2,
        minCharge: 0,
        name: 'Tajikistan Somoni'
    },
    {
        code: 'TOP',
        digits: 2,
        minCharge: 0,
        name: 'Tongan Paʻanga'
    },
    {
        code: 'TRY',
        digits: 2,
        minCharge: 0,
        name: 'Turkey Lira'
    },
    {
        code: 'TTD',
        digits: 2,
        minCharge: 0,
        name: 'Trinidad and Tobago Dollar'
    },
    {
        code: 'TWD',
        digits: 2,
        minCharge: 0,
        name: 'New Taiwan Dollar'
    },
    {
        code: 'TZS',
        digits: 2,
        minCharge: 0,
        name: 'Tanzanian Shilling'
    },
    {
        code: 'UAH',
        digits: 2,
        minCharge: 0,
        name: 'Ukrainian Hryvnia'
    },
    {
        code: 'UGX',
        digits: 0,
        minCharge: 0,
        name: 'Ugandan Shilling'
    },
    {
        code: 'USD',
        digits: 2,
        minCharge: 50,
        name: 'United States Dollar'
    },
    {
        code: 'UYU',
        digits: 2,
        minCharge: 0,
        name: 'Uruguayan Peso'
    },
    {
        code: 'UZS',
        digits: 2,
        minCharge: 0,
        name: 'Uzbekistani Som'
    },
    {
        code: 'VND',
        digits: 0,
        minCharge: 0,
        name: 'Vietnamese Đồng'
    },
    {
        code: 'VUV',
        digits: 0,
        minCharge: 0,
        name: 'Vanuatu Vatu'
    },
    {
        code: 'WST',
        digits: 2,
        minCharge: 0,
        name: 'Samoan Tala'
    },
    {
        code: 'XAF',
        digits: 0,
        minCharge: 0,
        name: 'Central African Cfa Franc'
    },
    {
        code: 'XCD',
        digits: 2,
        minCharge: 0,
        name: 'East Caribbean Dollar'
    },
    {
        code: 'XOF',
        digits: 0,
        minCharge: 0,
        name: 'West African Cfa Franc'
    },
    {
        code: 'XPF',
        digits: 0,
        minCharge: 0,
        name: 'Cfp Franc'
    },
    {
        code: 'YER',
        digits: 2,
        minCharge: 0,
        name: 'Yemeni Rial'
    },
    {
        code: 'ZAR',
        digits: 2,
        minCharge: 0,
        name: 'South African Rand'
    },
    {
        code: 'ZMW',
        digits: 2,
        minCharge: 0,
        name: 'Zambia Kwacha'
    }
];

//# sourceMappingURL=data:application/json;base64,

}),
82988: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    _invalid: function() {
        return _invalid;
    },
    convertPaypalAmountToWFPrice: function() {
        return convertPaypalAmountToWFPrice;
    },
    convertWFPriceToPaypalAmount: function() {
        return convertWFPriceToPaypalAmount;
    },
    convertWFPriceToPaypalAmountWithBreakdown: function() {
        return convertWFPriceToPaypalAmountWithBreakdown;
    },
    currencyInfoByCode: function() {
        return currencyInfoByCode;
    },
    currencyInfoByCodePaypal: function() {
        return currencyInfoByCodePaypal;
    },
    equalPrice: function() {
        return equalPrice;
    },
    formatPrice: function() {
        return formatPrice;
    },
    getCurrencyInfo: function() {
        return getCurrencyInfo;
    },
    getCurrencyInfoPaypal: function() {
        return getCurrencyInfoPaypal;
    },
    getCurrencySymbol: function() {
        return getCurrencySymbol;
    },
    intToUnsafeFloat: function() {
        return intToUnsafeFloat;
    },
    parsePrice: function() {
        return parsePrice;
    },
    renderPrice: function() {
        return renderPrice;
    },
    scalePrice: function() {
        return scalePrice;
    },
    subtractPrice: function() {
        return subtractPrice;
    },
    sumPrice: function() {
        return sumPrice;
    },
    unsafeFloatToInt: function() {
        return unsafeFloatToInt;
    },
    validatePrice: function() {
        return validatePrice;
    },
    zeroUnitPaypal: function() {
        return zeroUnitPaypal;
    },
    zeroUnitWF: function() {
        return zeroUnitWF;
    }
});
const _keyBy = /*#__PURE__*/ _interop_require_default(__webpack_require__(3350));
const _memoize = /*#__PURE__*/ _interop_require_default(__webpack_require__(84984));
const _isString = /*#__PURE__*/ _interop_require_default(__webpack_require__(81098));
const _isNumber = /*#__PURE__*/ _interop_require_default(__webpack_require__(91464));
const _constants = __webpack_require__(10873);
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const currencyInfoByCode = (0, _keyBy.default)(_constants.stripeCurrencyList, 'code');
const currencyInfoByCodePaypal = (0, _keyBy.default)(_constants.paypalCurrencyList, 'code');
function getCurrencyInfo(code, platform = 'stripe') {
    if (isValidCurrency(code)) {
        return platform === 'stripe' ? // @ts-expect-error
        currencyInfoByCode[code.toUpperCase()] : // @ts-expect-error
        currencyInfoByCodePaypal[code.toUpperCase()];
    }
    return {
        code: '???',
        digits: 2,
        minCharge: 0,
        name: `Unknown currency`
    };
}
function getCurrencyInfoPaypal(code) {
    return getCurrencyInfo(code, 'paypal');
}
const isValidCurrency = (currencyCode)=>typeof currencyCode === 'string' && currencyInfoByCode.hasOwnProperty(currencyCode.toUpperCase());
class NullNumberFormat {
    format(_value) {
        return 'NaN';
    }
}
// @ts-expect-error - TS2322 - Type '((unit?: string | null | undefined, currencyDisplay?: CurrencyDisplayType) => NullNumberFormat) & MemoizedFunction' is not assignable to type '(unit?: string | null | undefined, arg2?: CurrencyDisplayType | null | undefined) => NullNumberFormat | NumberFormat'.
const getNumberFormat = (0, _memoize.default)((unit, currencyDisplay = 'symbol')=>// HACK: for some reason, GraphQL is returning a currency of '???' for null
    // prices; we're temporarily glossing over this fact, and will address the
    // backend at a later time..
    unit != null && isValidCurrency(unit) ? new Intl.NumberFormat('en-US', {
        currency: unit,
        style: 'currency',
        currencyDisplay
    }) : new NullNumberFormat(), /* cache key function **/ (unit, currencyDisplay = 'symbol')=>{
    return [
        String(unit),
        currencyDisplay
    ].join('::');
});
const getCurrencySymbol = (unit)=>{
    // As Intl.Numberformat.prototype.formatToParts is still experimental
    const symbol = String(getNumberFormat(unit).format(0)).match(/^([^0-9\s]*)/);
    return symbol ? symbol[0] : unit;
};
const unsafeFloatToInt = (floatValue, currency, round = Math.round)=>{
    const currencyInfo = typeof currency === 'object' ? currency : getCurrencyInfo(currency);
    return round(floatValue * Math.pow(10, currencyInfo.digits));
};
const intToUnsafeFloat = (intValue, currency)=>{
    const currencyInfo = typeof currency === 'object' ? currency : getCurrencyInfo(currency);
    return intValue / Math.pow(10, currencyInfo.digits);
};
function renderPrice(price, opts = {}) {
    const { isoFormat = false, noCurrency = false } = opts;
    price = validatePrice(price) ? price : _invalid();
    const normal_value = Number(price.value);
    const currencyInfo = getCurrencyInfo(price.unit);
    const float_value = intToUnsafeFloat(normal_value, currencyInfo);
    if (Number.isNaN(float_value)) {
        return 'NaN';
    }
    if (noCurrency) {
        return String(float_value);
    }
    const fmt = getNumberFormat(price.unit, isoFormat ? 'code' : 'symbol');
    return fmt.format(float_value);
}
function formatPrice(price) {
    price = validatePrice(price) ? price : _invalid();
    const string = renderPrice(price);
    return {
        unit: price.unit,
        value: price.value,
        string
    };
}
function validatePrice(a) {
    if (!a || typeof a !== 'object') {
        return false;
    }
    // @ts-expect-error - TS2339 - Property 'value' does not exist on type 'object'.
    if (!(0, _isNumber.default)(a.value)) {
        return false;
    }
    // @ts-expect-error - TS2339 - Property 'unit' does not exist on type 'object'.
    if (!(0, _isString.default)(a.unit)) {
        return false;
    }
    // @ts-expect-error - TS2339 - Property 'unit' does not exist on type 'object'.
    if (!isValidCurrency(a.unit)) {
        return false;
    }
    return true;
}
function sumPrice(a, b) {
    if (!validatePrice(a) || !validatePrice(b)) {
        return _invalid();
    }
    // No defined behavior, if the Prices don't have a common currency...
    if (a.unit !== b.unit) {
        return _invalid();
    }
    return {
        value: a.value + b.value,
        unit: a.unit
    };
}
function subtractPrice(a, b) {
    if (!validatePrice(a) || !validatePrice(b)) {
        return _invalid();
    }
    // No defined behavior, if the Prices don't have a common currency...
    if (a.unit !== b.unit) {
        return _invalid();
    }
    return {
        value: a.value - b.value,
        unit: a.unit
    };
}
function scalePrice(a, scalar) {
    if (!validatePrice(a) || !(0, _isNumber.default)(scalar)) {
        return _invalid();
    }
    const value = Math.round(a.value * scalar);
    const unit = a.unit;
    return {
        value,
        unit
    };
}
function equalPrice(a, b) {
    return Boolean(a && b && a.value === b.value && a.unit === b.unit);
}
function parsePrice(priceString, unit, fallback) {
    if (typeof priceString !== 'string') {
        throw new Error('parsePrice must be called with a string');
    }
    if (!isValidCurrency(unit)) {
        throw new Error(`parsePrice called with invalid currency ${unit}`);
    }
    if (!priceString) {
        return fallback;
    }
    // TODO: Fails on
    // 1,000.00 -> NaN
    // 0,99 -> NaN
    // Also it passes numbers we shouldn't allow:
    // 0x11 -> 17
    // 0b11 -> 3
    const rawNumber = Number(priceString);
    if (Number.isNaN(rawNumber)) {
        return fallback;
    }
    return {
        value: unsafeFloatToInt(rawNumber, unit),
        unit
    };
}
function _invalid() {
    return {
        value: NaN,
        unit: '???'
    };
}
function zeroUnitWF(unit) {
    return {
        unit,
        value: 0
    };
}
function zeroUnitPaypal(unit) {
    return convertWFPriceToPaypalAmount(zeroUnitWF(unit));
}
function convertWFPriceToPaypalAmountWithBreakdown(orderPrices) {
    const { total, subtotal, shipping, tax, discount, discountShipping } = orderPrices;
    const convertOrZero = (price, scalar)=>price ? convertWFPriceToPaypalAmount(price, scalar) : zeroUnitPaypal(total.unit);
    return {
        ...convertWFPriceToPaypalAmount(total),
        breakdown: {
            item_total: convertOrZero(subtotal),
            shipping: convertOrZero(shipping),
            tax_total: convertOrZero(tax),
            discount: convertOrZero(discount, -1),
            shipping_discount: convertOrZero(discountShipping, -1)
        }
    };
}
function convertWFPriceToPaypalAmount(a, scalar) {
    // TODO:
    // - May have to account for in-country PayPal accounts only support for some currencies
    const unitInfo = getCurrencyInfoPaypal(a.unit);
    const wfValue = scalar ? scalePrice(a, scalar).value : a.value;
    const value = intToUnsafeFloat(wfValue, unitInfo).toFixed(unitInfo.digits);
    return {
        currency_code: a.unit,
        value
    };
}
function convertPaypalAmountToWFPrice(a) {
    // TODO:
    // - May have to account for in-country PayPal accounts only support for some currencies
    const unitInfo = getCurrencyInfoPaypal(a.currency_code);
    const value = unsafeFloatToInt(parseFloat(a.value), unitInfo);
    return {
        unit: a.currency_code,
        value
    };
}

//# sourceMappingURL=data:application/json;base64,

}),
60937: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
_export_star(__webpack_require__(82988), exports);
_export_star(__webpack_require__(9807), exports);
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vQ3VycmVuY3lVdGlscyc7XG5leHBvcnQgKiBmcm9tICcuL3JlbmRlclByaWNlJztcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O3FCQUFjO3FCQUNBIn0=

}),
9807: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    formatPriceFromSettings: function() {
        return formatPriceFromSettings;
    },
    getCurrencySettingsFromCommerceSettings: function() {
        return getCurrencySettingsFromCommerceSettings;
    },
    renderAmountFromSettings: function() {
        return renderAmountFromSettings;
    },
    renderPriceFromSettings: function() {
        return renderPriceFromSettings;
    }
});
const _get = /*#__PURE__*/ _interop_require_default(__webpack_require__(24738));
const _isInteger = /*#__PURE__*/ _interop_require_default(__webpack_require__(80023));
const _accounting = __webpack_require__(41471);
const _simpleReplaceTokens = __webpack_require__(30805);
const _CurrencyUtils = __webpack_require__(82988);
const _memo = __webpack_require__(23056);
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function formatPriceFromSettings(price, currencySettings) {
    price = (0, _CurrencyUtils.validatePrice)(price) ? price : (0, _CurrencyUtils._invalid)();
    const string = renderPriceFromSettings(price, currencySettings);
    return {
        unit: price.unit,
        value: price.value,
        string
    };
}
const getCurrencySettingsFromCommerceSettings = (0, _memo.weakMemo)((commerceSettings)=>{
    const getTheStuff = typeof commerceSettings.getIn === 'function' ? (keyPath, defaultValue)=>// @ts-expect-error - TS2722 - Cannot invoke an object which is possibly 'undefined'.
        commerceSettings.getIn(keyPath, defaultValue) : (keyPath, defaultValue)=>(0, _get.default)(commerceSettings, keyPath, defaultValue);
    return {
        hideDecimalForWholeNumbers: getTheStuff([
            'defaultCurrencyFormat',
            'hideDecimalForWholeNumbers'
        ], false),
        fractionDigits: getTheStuff([
            'defaultCurrencyFormat',
            'fractionDigits'
        ], 2),
        template: getTheStuff([
            'defaultCurrencyFormat',
            'template'
        ], ''),
        decimal: getTheStuff([
            'defaultCurrencyFormat',
            'decimal'
        ], '.'),
        group: getTheStuff([
            'defaultCurrencyFormat',
            'group'
        ], ','),
        symbol: getTheStuff([
            'defaultCurrencyFormat',
            'symbol'
        ], '$'),
        currencyCode: getTheStuff([
            'defaultCurrency'
        ], 'USD')
    };
});
const _nonBreakingSpace = String.fromCharCode(160);
const _replaceAllSpaceWithNBSP = (str)=>str.replace(/\s/g, _nonBreakingSpace);
function renderAmountFromSettings(amount, // @ts-expect-error - TS2739 - Type '{}' is missing the following properties from type '{ fractionDigits: number; hideDecimalForWholeNumbers: boolean; decimal: string; group: string; }': fractionDigits, hideDecimalForWholeNumbers, decimal, group
amountSettings = {}) {
    if (typeof amount === 'undefined') {
        return '';
    }
    if (typeof amount === 'string') {
        if (amount === '∞') {
            return amount;
        }
        // This should most likely never happen, but it's a flow guard for the rest of the function
        throw new Error(`amount has type string: got ${amount}, expected ∞`);
    }
    // Price.value is always whole number. For example, USD is represented in cents
    // this is because fractionDigits = 2. To convert to a jsNumber we need to move
    // the decimal to the left fractionDigits number of times. (we can do this
    // with division)
    const jsValue = amount / parseFloat(`1${'0'.repeat(amountSettings.fractionDigits || 0)}`);
    const precision = (0, _isInteger.default)(jsValue) && amountSettings.hideDecimalForWholeNumbers ? 0 : amountSettings.fractionDigits;
    return (0, _accounting.formatMoney)(jsValue, {
        symbol: '',
        decimal: amountSettings.decimal,
        precision,
        thousand: amountSettings.group
    });
}
function renderPriceFromSettings(price, // @ts-expect-error - TS2740 - Type '{}' is missing the following properties from type 'CurrencySettings': hideDecimalForWholeNumbers, fractionDigits, template, decimal, and 3 more.
currencySettings = {}, renderOpts = {}) {
    const { template, currencyCode } = currencySettings;
    // fall back to old renderPrice if some currency settings don't exist
    // snapshots > ecommerce > ecommerceIsOn for Cypress tests currently doesn't have currency settings
    // we also want to fallback to the old renderPrice in the event that a price's unit
    // does not match the currencyCode for the currency settings
    if (!template || price.unit !== currencyCode) {
        return (0, _CurrencyUtils.renderPrice)(price);
    }
    return (price.value < 0 ? '−' : '') + // negative sign to appear before currency symbol e.g., -$ 5.00 USD
    (0, _simpleReplaceTokens.simpleReplaceTokens)((renderOpts.breakingWhitespace ? currencySettings.template : _replaceAllSpaceWithNBSP(currencySettings.template)) || '', {
        amount: renderAmountFromSettings(Math.abs(price.value), currencySettings),
        symbol: currencySettings.symbol,
        currencyCode: currencySettings.currencyCode
    });
}

//# sourceMappingURL=data:application/json;base64,

}),
71847: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    extractToken: function() {
        return extractToken;
    },
    getAmountTokenPattern: function() {
        return getAmountTokenPattern;
    },
    getCatchAllTokenPattern: function() {
        return getCatchAllTokenPattern;
    },
    getExternalTokenPattern: function() {
        return getExternalTokenPattern;
    },
    getWfTokenPattern: function() {
        return getWfTokenPattern;
    },
    parseTokenJson: function() {
        return parseTokenJson;
    },
    parseTokenJsonFromMatch: function() {
        return parseTokenJsonFromMatch;
    },
    stripLegacyShorthandSuffix: function() {
        return stripLegacyShorthandSuffix;
    }
});
const _unescape = /*#__PURE__*/ _interop_require_default(__webpack_require__(94891));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const getWfTokenPattern = function() {
    return /{{\s*wf\s*({.*?})\s*}}/g;
};
const getCatchAllTokenPattern = function() {
    return /{{\s*(.*?)\s*}}/g;
};
const getExternalTokenPattern = function() {
    return /{\\{(\s*.*?\s*)}}/g;
};
const getAmountTokenPattern = ()=>{
    return /{{\s*wf\s*({&quot;path&quot;:&quot;amount&quot;,&quot;type&quot;:&quot;CommercePrice&quot;\\})\s*}}/;
};
function parseTokenJsonFromMatch(match) {
    let token;
    let isEscaped = false;
    try {
        const replacedTrailing = match.replace(/\\}/g, '}');
        const unescaped = (0, _unescape.default)(replacedTrailing);
        // If the trailing backslash is not present in the original match, or if unescaping the match causes it to be
        // different, then the original match is not escaped
        if (match !== replacedTrailing && unescaped !== replacedTrailing) {
            isEscaped = true;
        }
        token = JSON.parse(unescaped);
    } catch (err) {
        return;
    }
    if (!token?.path || !token.type) {
        return; // If path doesn't exist, this JSON string is not a token
    }
    token.isEscaped = isEscaped;
    return token;
}
function parseTokenJson(string) {
    if (string.match(getWfTokenPattern())) {
        let token;
        try {
            token = JSON.parse((0, _unescape.default)(extractToken(string).replace(/\\}/g, '}')));
        } catch (err) {
            return null;
        }
        if (!token || !token.path || !token.type) {
            // If path doesn't exist, this JSON string is not a token
            return null;
        } else {
            return token;
        }
    } else {
        return null;
    }
}
function extractToken(string, { shortHand } = {}) {
    return shortHand ? string.replace(getCatchAllTokenPattern(), (match, subMatch)=>{
        return stripLegacyShorthandSuffix(subMatch);
    }) : string.replace(getWfTokenPattern(), '$1');
}
function stripLegacyShorthandSuffix(tokenPath) {
    return tokenPath.split(':').map((part)=>part.split('.')[0]).join(':');
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1bmVzY2FwZSBmcm9tICdsb2Rhc2gvdW5lc2NhcGUnO1xuXG5leHBvcnQgdHlwZSBUb2tlblRyYW5zZm9ybWVycyA9IHtcbiAgbmFtZTogc3RyaW5nO1xuICBhcmd1bWVudHM/OiBzdHJpbmdbXTtcbn07XG5cbmV4cG9ydCB0eXBlIFRva2VuID0ge1xuICBwYXRoOiBzdHJpbmc7XG4gIHR5cGU/OiBzdHJpbmc7XG4gIHRyYW5zZm9ybWVycz86IFRva2VuVHJhbnNmb3JtZXJzW107XG4gIGlzRXNjYXBlZD86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0V2ZUb2tlblBhdHRlcm4gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAve3tcXHMqd2ZcXHMqKHsuKj99KVxccyp9fS9nO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENhdGNoQWxsVG9rZW5QYXR0ZXJuID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gL3t7XFxzKiguKj8pXFxzKn19L2c7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0RXh0ZXJuYWxUb2tlblBhdHRlcm4gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAve1xcXFx7KFxccyouKj9cXHMqKX19L2c7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0QW1vdW50VG9rZW5QYXR0ZXJuID0gKCkgPT4ge1xuICByZXR1cm4gL3t7XFxzKndmXFxzKih7JnF1b3Q7cGF0aCZxdW90OzomcXVvdDthbW91bnQmcXVvdDssJnF1b3Q7dHlwZSZxdW90OzomcXVvdDtDb21tZXJjZVByaWNlJnF1b3Q7XFxcXH0pXFxzKn19Lztcbn07XG5cbi8qKlxuICogU2ltaWxhciB0byBgcGFyc2VUb2tlbkpzb25gLCBidXQgdGhpcyBmdW5jdGlvbiBhc3N1bWVzIHRoZSBpbnB1dCBpcyB0aGUgaW5uZXIgbWF0Y2ggZnJvbSBgZ2V0V2ZUb2tlblBhdHRlcm5gLlxuICogRS5nLiBgey4uLn1gIGluIGB7eyB3ZiB7Li4ufSB9fWBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVG9rZW5Kc29uRnJvbU1hdGNoKG1hdGNoOiBzdHJpbmcpOiBUb2tlbiB8IHVuZGVmaW5lZCB7XG4gIGxldCB0b2tlbjogVG9rZW47XG4gIGxldCBpc0VzY2FwZWQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXBsYWNlZFRyYWlsaW5nID0gbWF0Y2gucmVwbGFjZSgvXFxcXH0vZywgJ30nKTtcbiAgICBjb25zdCB1bmVzY2FwZWQgPSB1bmVzY2FwZShyZXBsYWNlZFRyYWlsaW5nKTtcblxuICAgIC8vIElmIHRoZSB0cmFpbGluZyBiYWNrc2xhc2ggaXMgbm90IHByZXNlbnQgaW4gdGhlIG9yaWdpbmFsIG1hdGNoLCBvciBpZiB1bmVzY2FwaW5nIHRoZSBtYXRjaCBjYXVzZXMgaXQgdG8gYmVcbiAgICAvLyBkaWZmZXJlbnQsIHRoZW4gdGhlIG9yaWdpbmFsIG1hdGNoIGlzIG5vdCBlc2NhcGVkXG4gICAgaWYgKG1hdGNoICE9PSByZXBsYWNlZFRyYWlsaW5nICYmIHVuZXNjYXBlZCAhPT0gcmVwbGFjZWRUcmFpbGluZykge1xuICAgICAgaXNFc2NhcGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgdG9rZW4gPSBKU09OLnBhcnNlKHVuZXNjYXBlZCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXRva2VuPy5wYXRoIHx8ICF0b2tlbi50eXBlKSB7XG4gICAgcmV0dXJuOyAvLyBJZiBwYXRoIGRvZXNuJ3QgZXhpc3QsIHRoaXMgSlNPTiBzdHJpbmcgaXMgbm90IGEgdG9rZW5cbiAgfVxuICB0b2tlbi5pc0VzY2FwZWQgPSBpc0VzY2FwZWQ7XG4gIHJldHVybiB0b2tlbjtcbn1cblxuLyoqXG4gKiBUYWtlcyBhIHRva2VuIHN0cmluZyBhbmQgcGFyc2VzIGl0IHRvIGEgdG9rZW4gb2JqZWN0XG4gKiBAcGFyYW0gIHtTdHJpbmd9IHN0cmluZyBBIHRva2VuIHN0cmluZywgZS5nLiAne3sgd2YgeyZxdW90O3BhdGgmcXVvdDs6JnF1b3Q7bmFtZSZxdW90O1xcfSB9fSdcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgIEEgcGFyc2VkIHRva2VuIG9iamVjdCBvciBudWxsIGlmIHN0cmluZyBpcyBub3QgYSB2YWxpZCB0b2tlbiBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVG9rZW5Kc29uKHN0cmluZzogc3RyaW5nKTogVG9rZW4gfCBudWxsIHtcbiAgaWYgKHN0cmluZy5tYXRjaChnZXRXZlRva2VuUGF0dGVybigpKSkge1xuICAgIGxldCB0b2tlbjtcbiAgICB0cnkge1xuICAgICAgdG9rZW4gPSBKU09OLnBhcnNlKHVuZXNjYXBlKGV4dHJhY3RUb2tlbihzdHJpbmcpLnJlcGxhY2UoL1xcXFx9L2csICd9JykpKTtcbiAgICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCF0b2tlbiB8fCAhdG9rZW4ucGF0aCB8fCAhdG9rZW4udHlwZSkge1xuICAgICAgLy8gSWYgcGF0aCBkb2Vzbid0IGV4aXN0LCB0aGlzIEpTT04gc3RyaW5nIGlzIG5vdCBhIHRva2VuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFRva2VuKFxuICBzdHJpbmc6IHN0cmluZyxcbiAge1xuICAgIHNob3J0SGFuZCxcbiAgfToge1xuICAgIHNob3J0SGFuZD86IGJvb2xlYW47XG4gIH0gPSB7fVxuKSB7XG4gIHJldHVybiBzaG9ydEhhbmRcbiAgICA/IHN0cmluZy5yZXBsYWNlKGdldENhdGNoQWxsVG9rZW5QYXR0ZXJuKCksIChtYXRjaCwgc3ViTWF0Y2gpID0+IHtcbiAgICAgICAgcmV0dXJuIHN0cmlwTGVnYWN5U2hvcnRoYW5kU3VmZml4KHN1Yk1hdGNoKTtcbiAgICAgIH0pXG4gICAgOiBzdHJpbmcucmVwbGFjZShnZXRXZlRva2VuUGF0dGVybigpLCAnJDEnKTtcbn1cblxuLyoqXG4gKiBUYWtlcyBhIGxlZ2FjeSBzaG9ydGhhbmQgdG9rZW4gcGF0aCBhbmQgc3RyaXBzXG4gKiBzdWZmaWNlcyB0aGF0IHdlIHVzZWQgdG8gaGF2ZSBpbiBJbWFnZVJlZiBhbmQgT3B0aW9uIHRva2Vuc1xuICpcbiAqIFRoaXMgaXMgbmVlZGVkIGZvciB0aGUgbGVnYWN5IGJpbmRpbmdzOlxuICogT3B0aW9uOiB7eyBvcHRpb246bmFtZSB9fSBhbmQge3sgYXV0aG9yOm9wdGlvbi5uYW1lIH19XG4gKiBJbWFnZVJlZjoge3sgaW1hZ2UudXJsIH19IGFuZCB7eyBhdXRob3I6aW1hZ2UudXJsIH19XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcExlZ2FjeVNob3J0aGFuZFN1ZmZpeCh0b2tlblBhdGg6IHN0cmluZykge1xuICByZXR1cm4gdG9rZW5QYXRoXG4gICAgLnNwbGl0KCc6JylcbiAgICAubWFwKChwYXJ0KSA9PiBwYXJ0LnNwbGl0KCcuJylbMF0pXG4gICAgLmpvaW4oJzonKTtcbn1cbiJdLCJuYW1lcyI6WyJleHRyYWN0VG9rZW4iLCJnZXRBbW91bnRUb2tlblBhdHRlcm4iLCJnZXRDYXRjaEFsbFRva2VuUGF0dGVybiIsImdldEV4dGVybmFsVG9rZW5QYXR0ZXJuIiwiZ2V0V2ZUb2tlblBhdHRlcm4iLCJwYXJzZVRva2VuSnNvbiIsInBhcnNlVG9rZW5Kc29uRnJvbU1hdGNoIiwic3RyaXBMZWdhY3lTaG9ydGhhbmRTdWZmaXgiLCJtYXRjaCIsInRva2VuIiwiaXNFc2NhcGVkIiwicmVwbGFjZWRUcmFpbGluZyIsInJlcGxhY2UiLCJ1bmVzY2FwZWQiLCJ1bmVzY2FwZSIsIkpTT04iLCJwYXJzZSIsImVyciIsInBhdGgiLCJ0eXBlIiwic3RyaW5nIiwic2hvcnRIYW5kIiwic3ViTWF0Y2giLCJ0b2tlblBhdGgiLCJzcGxpdCIsIm1hcCIsInBhcnQiLCJqb2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQWtGZ0JBLFlBQVk7ZUFBWkE7O0lBeERIQyxxQkFBcUI7ZUFBckJBOztJQVJBQyx1QkFBdUI7ZUFBdkJBOztJQUlBQyx1QkFBdUI7ZUFBdkJBOztJQVJBQyxpQkFBaUI7ZUFBakJBOztJQWdER0MsY0FBYztlQUFkQTs7SUE1QkFDLHVCQUF1QjtlQUF2QkE7O0lBdUVBQywwQkFBMEI7ZUFBMUJBOzs7aUVBekdLOzs7Ozs7QUFjZCxNQUFNSCxvQkFBb0I7SUFDL0IsT0FBTztBQUNUO0FBRU8sTUFBTUYsMEJBQTBCO0lBQ3JDLE9BQU87QUFDVDtBQUVPLE1BQU1DLDBCQUEwQjtJQUNyQyxPQUFPO0FBQ1Q7QUFFTyxNQUFNRix3QkFBd0I7SUFDbkMsT0FBTztBQUNUO0FBTU8sU0FBU0ssd0JBQXdCRSxLQUFhO0lBQ25ELElBQUlDO0lBQ0osSUFBSUMsWUFBWTtJQUNoQixJQUFJO1FBQ0YsTUFBTUMsbUJBQW1CSCxNQUFNSSxPQUFPLENBQUMsUUFBUTtRQUMvQyxNQUFNQyxZQUFZQyxJQUFBQSxpQkFBUSxFQUFDSDtRQUUzQiw2R0FBNkc7UUFDN0csb0RBQW9EO1FBQ3BELElBQUlILFVBQVVHLG9CQUFvQkUsY0FBY0Ysa0JBQWtCO1lBQ2hFRCxZQUFZO1FBQ2Q7UUFDQUQsUUFBUU0sS0FBS0MsS0FBSyxDQUFDSDtJQUNyQixFQUFFLE9BQU9JLEtBQUs7UUFDWjtJQUNGO0lBQ0EsSUFBSSxDQUFDUixPQUFPUyxRQUFRLENBQUNULE1BQU1VLElBQUksRUFBRTtRQUMvQixRQUFRLHlEQUF5RDtJQUNuRTtJQUNBVixNQUFNQyxTQUFTLEdBQUdBO0lBQ2xCLE9BQU9EO0FBQ1Q7QUFPTyxTQUFTSixlQUFlZSxNQUFjO0lBQzNDLElBQUlBLE9BQU9aLEtBQUssQ0FBQ0osc0JBQXNCO1FBQ3JDLElBQUlLO1FBQ0osSUFBSTtZQUNGQSxRQUFRTSxLQUFLQyxLQUFLLENBQUNGLElBQUFBLGlCQUFRLEVBQUNkLGFBQWFvQixRQUFRUixPQUFPLENBQUMsUUFBUTtRQUNuRSxFQUFFLE9BQU9LLEtBQVU7WUFDakIsT0FBTztRQUNUO1FBRUEsSUFBSSxDQUFDUixTQUFTLENBQUNBLE1BQU1TLElBQUksSUFBSSxDQUFDVCxNQUFNVSxJQUFJLEVBQUU7WUFDeEMseURBQXlEO1lBQ3pELE9BQU87UUFDVCxPQUFPO1lBQ0wsT0FBT1Y7UUFDVDtJQUNGLE9BQU87UUFDTCxPQUFPO0lBQ1Q7QUFDRjtBQUVPLFNBQVNULGFBQ2RvQixNQUFjLEVBQ2QsRUFDRUMsU0FBUyxFQUdWLEdBQUcsQ0FBQyxDQUFDO0lBRU4sT0FBT0EsWUFDSEQsT0FBT1IsT0FBTyxDQUFDViwyQkFBMkIsQ0FBQ00sT0FBT2M7UUFDaEQsT0FBT2YsMkJBQTJCZTtJQUNwQyxLQUNBRixPQUFPUixPQUFPLENBQUNSLHFCQUFxQjtBQUMxQztBQVVPLFNBQVNHLDJCQUEyQmdCLFNBQWlCO0lBQzFELE9BQU9BLFVBQ0pDLEtBQUssQ0FBQyxLQUNOQyxHQUFHLENBQUMsQ0FBQ0MsT0FBU0EsS0FBS0YsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQ2hDRyxJQUFJLENBQUM7QUFDViJ9

}),
30805: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "simpleReplaceTokens", ({
    enumerable: true,
    get: function() {
        return simpleReplaceTokens;
    }
}));
const _isFunction = /*#__PURE__*/ _interop_require_default(__webpack_require__(56644));
const _get = /*#__PURE__*/ _interop_require_default(__webpack_require__(24738));
const _shared = __webpack_require__(71847);
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function simpleReplaceTokens(replaceable, item) {
    return replaceable.replace((0, _shared.getWfTokenPattern)(), function(match) {
        const token = (0, _shared.parseTokenJson)(match) || {};
        // @ts-expect-error - TS2339 - Property 'path' does not exist on type '{}'.
        const path = token.path.split('.');
        return (0, _isFunction.default)(item.getIn) ? item.getIn(path, '') : (0, _get.default)(item, path, '');
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJ2xvZGFzaC9pc0Z1bmN0aW9uJztcbmltcG9ydCBnZXQgZnJvbSAnbG9kYXNoL2dldCc7XG5pbXBvcnQge1xuICBnZXRXZlRva2VuUGF0dGVybixcbiAgcGFyc2VUb2tlbkpzb24sXG59IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL2NvcmUvdXRpbHMvRW1iZWRVdGlscy9zaGFyZWQnO1xuXG4vLyBzaW1wbGVSZXBsYWNlVG9rZW5zIGlzIGluIGl0J3Mgb3duIGZpbGUgdG8gZml4IGEgY2lyY3VsYXIgZGVwZW5kZW5jeVxuXG4vKipcbiAqIFJlcGxhY2VzIHRva2VucyBpbiB0ZXh0IHdpdGggcmVsYXRpbmcgZmllbGQgdmFsdWVzLiBUaGlzIGlzIGEgc2ltcGxlIHZlcnNpb25cbiAqIG9mIHJlcGxhY2VUb2tlbnMuIEl0IGlzIGEgY2xlYW4gZmluZC9yZXBsYWNlIGFuZCBkb2Vzbid0IGluY2x1ZGUgYW55IG90aGVyXG4gKiBsb2dpYy5cbiAqIEBwYXJhbSAge1N0cmluZ30gcmVwbGFjZWFibGUgICBUaGUgc3RyaW5nIHdpdGggV0YgdG9rZW5zXG4gKiBAcGFyYW0gIHtPYmplY3R9IGl0ZW0gICAgICAgICAgVGhlIGl0ZW0gdG8gYmUgdXNlZCB0byByZXBsYWNlIHRoZSB0b2tlbnMgd2l0aFxuICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgICAgICAgIFRoZSBzdHJpbmcgd2l0aCB0aGUgV0YgdG9rZW5zIHJlcGxhY2VkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaW1wbGVSZXBsYWNlVG9rZW5zKFxuICByZXBsYWNlYWJsZTogc3RyaW5nLFxuICBpdGVtOiBSZWNvcmQ8YW55LCBhbnk+XG4pOiBzdHJpbmcge1xuICByZXR1cm4gcmVwbGFjZWFibGUucmVwbGFjZShnZXRXZlRva2VuUGF0dGVybigpLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICBjb25zdCB0b2tlbiA9IHBhcnNlVG9rZW5Kc29uKG1hdGNoKSB8fCB7fTtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMyMzM5IC0gUHJvcGVydHkgJ3BhdGgnIGRvZXMgbm90IGV4aXN0IG9uIHR5cGUgJ3t9Jy5cbiAgICBjb25zdCBwYXRoID0gdG9rZW4ucGF0aC5zcGxpdCgnLicpO1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGl0ZW0uZ2V0SW4pID8gaXRlbS5nZXRJbihwYXRoLCAnJykgOiBnZXQoaXRlbSwgcGF0aCwgJycpO1xuICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJzaW1wbGVSZXBsYWNlVG9rZW5zIiwicmVwbGFjZWFibGUiLCJpdGVtIiwicmVwbGFjZSIsImdldFdmVG9rZW5QYXR0ZXJuIiwibWF0Y2giLCJ0b2tlbiIsInBhcnNlVG9rZW5Kc29uIiwicGF0aCIsInNwbGl0IiwiaXNGdW5jdGlvbiIsImdldEluIiwiZ2V0Il0sIm1hcHBpbmdzIjoiOzs7OytCQWlCZ0JBOzs7ZUFBQUE7OzttRUFqQk87NERBQ1A7d0JBSVQ7Ozs7OztBQVlBLFNBQVNBLG9CQUNkQyxXQUFtQixFQUNuQkMsSUFBc0I7SUFFdEIsT0FBT0QsWUFBWUUsT0FBTyxDQUFDQyxJQUFBQSx5QkFBaUIsS0FBSSxTQUFVQyxLQUFLO1FBQzdELE1BQU1DLFFBQVFDLElBQUFBLHNCQUFjLEVBQUNGLFVBQVUsQ0FBQztRQUN4QywyRUFBMkU7UUFDM0UsTUFBTUcsT0FBT0YsTUFBTUUsSUFBSSxDQUFDQyxLQUFLLENBQUM7UUFDOUIsT0FBT0MsSUFBQUEsbUJBQVUsRUFBQ1IsS0FBS1MsS0FBSyxJQUFJVCxLQUFLUyxLQUFLLENBQUNILE1BQU0sTUFBTUksSUFBQUEsWUFBRyxFQUFDVixNQUFNTSxNQUFNO0lBQ3pFO0FBQ0YifQ==

}),
29197: (function (__unused_webpack_module, exports) {
"use strict";
// Internal useful constants.

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CLASS_NAME_W_DYN_BIND_EMPTY: function() {
        return CLASS_NAME_W_DYN_BIND_EMPTY;
    },
    COLLECTION_LIST_QUERY_MODES: function() {
        return COLLECTION_LIST_QUERY_MODES;
    },
    COLLECTION_TYPES: function() {
        return COLLECTION_TYPES;
    },
    CONDITION_INVISIBLE_CLASS: function() {
        return CONDITION_INVISIBLE_CLASS;
    },
    DATETIME_FORMAT_OPTIONS: function() {
        return DATETIME_FORMAT_OPTIONS;
    },
    DATE_FORMAT_OPTIONS: function() {
        return DATE_FORMAT_OPTIONS;
    },
    DEFAULT_NESTED_COLLECTION_LIST_LIMIT: function() {
        return DEFAULT_NESTED_COLLECTION_LIST_LIMIT;
    },
    FUTURE: function() {
        return FUTURE;
    },
    MIN_COLLECTION_LIST_OFFSET: function() {
        return MIN_COLLECTION_LIST_OFFSET;
    },
    NON_EXISTING_ITEM_ID: function() {
        return NON_EXISTING_ITEM_ID;
    },
    PAST: function() {
        return PAST;
    },
    QUERY_FILTER_FOR_STATES: function() {
        return QUERY_FILTER_FOR_STATES;
    },
    SCHEDULED_PUBLISH_GRACE_PERIOD_IN_MS: function() {
        return SCHEDULED_PUBLISH_GRACE_PERIOD_IN_MS;
    },
    SCHEDULED_PUBLISH_GRANULARITY_IN_MIN: function() {
        return SCHEDULED_PUBLISH_GRANULARITY_IN_MIN;
    },
    SCHEDULED_PUBLISH_LIMIT_IN_MS: function() {
        return SCHEDULED_PUBLISH_LIMIT_IN_MS;
    },
    SET_FIELD_MAX_ITEMS: function() {
        return SET_FIELD_MAX_ITEMS;
    },
    SHARED_ALLOWED_FIELD_TYPES: function() {
        return SHARED_ALLOWED_FIELD_TYPES;
    },
    TENSES_ENUM: function() {
        return TENSES_ENUM;
    },
    TENSES_TO_HUMAN_PHRASES_MAP: function() {
        return TENSES_TO_HUMAN_PHRASES_MAP;
    },
    TIME_INTERVALS_ENUM: function() {
        return TIME_INTERVALS_ENUM;
    }
});
const SECOND = 1000;
const MINUTE = 60 * SECOND;
const HOUR = 60 * MINUTE;
const DAY = 24 * HOUR;
const YEAR = 365 * DAY;
const TIME_INTERVALS_ENUM = {
    days: 'days',
    weeks: 'weeks',
    months: 'months',
    years: 'years'
};
const FUTURE = 'FUTURE';
const PAST = 'PAST';
const TENSES_ENUM = {
    FUTURE,
    PAST
};
const TENSES_TO_HUMAN_PHRASES_MAP = {
    FUTURE: 'in the future',
    PAST: 'in the past'
};
const CLASS_NAME_W_DYN_BIND_EMPTY = 'w-dyn-bind-empty';
const CONDITION_INVISIBLE_CLASS = 'w-condition-invisible';
const NON_EXISTING_ITEM_ID = '000000000000000000000000';
const QUERY_FILTER_FOR_STATES = {
    ALL: 'ALL',
    ANY: 'ANY'
};
const SET_FIELD_MAX_ITEMS = 25;
const DEFAULT_NESTED_COLLECTION_LIST_LIMIT = 5;
const COLLECTION_LIST_QUERY_MODES = {
    CURATED: 'curated',
    DYNAMIC: 'dynamic'
};
const SCHEDULED_PUBLISH_GRANULARITY_IN_MIN = 5;
const SCHEDULED_PUBLISH_LIMIT_IN_MS = 5 * YEAR;
const SCHEDULED_PUBLISH_GRACE_PERIOD_IN_MS = 30 * MINUTE;
const COLLECTION_TYPES = {
    CATEGORIES: 'CATEGORIES',
    CMS_COLLECTIONS: 'CMS_COLLECTIONS',
    PRODUCTS: 'PRODUCTS',
    SKUS: 'SKUS'
};
const MIN_COLLECTION_LIST_OFFSET = 0;
const SHARED_ALLOWED_FIELD_TYPES = {
    innerHTML: {
        PlainText: 'innerText',
        HighlightedText: 'innerText',
        RichText: 'innerHTML',
        Number: 'innerText',
        Video: 'innerHTML',
        Option: 'innerText',
        Date: 'innerText',
        Phone: 'innerText',
        Email: 'innerText',
        CommercePrice: 'innerHTML',
        Link: 'innerText',
        ImageRef: false,
        FileRef: false,
        ItemRef: false,
        CommercePropValues: 'innerText'
    },
    'style.color': {
        Color: true
    },
    'style.background-color': {
        Color: true
    },
    'style.border-color': {
        Color: true
    },
    'style.background-image': {
        ImageRef: true
    },
    src: [
        'ImageRef'
    ],
    alt: [
        'PlainText',
        'Option',
        'Number',
        'Date',
        'Phone',
        'Email',
        'Video',
        'Link'
    ],
    href: [
        'Phone',
        'Email',
        'Video',
        'Link',
        'FileRef'
    ],
    id: [
        'PlainText'
    ],
    for: [
        'PlainText'
    ],
    value: [
        'Number',
        'PlainText'
    ],
    checked: [
        'Bool'
    ],
    dataWHref: [
        'PlainText',
        'FullSlug'
    ]
};
const DATETIME_FORMAT_OPTIONS = [
    'MMMM D, YYYY',
    'MMMM D, YYYY h:mm A',
    'MMMM D, YYYY H:mm',
    'MMM D, YYYY',
    'MMM D, YYYY h:mm A',
    'MMM D, YYYY H:mm',
    'dddd, MMMM D, YYYY',
    'DD MMMM YYYY',
    'DD MMM YYYY',
    'DD MMM YY',
    'D MMMM YYYY',
    'MMM Do, YYYY',
    'MMMM Do, YYYY',
    'DD.MM.YYYY',
    'M/D/YYYY',
    'M.D.YYYY',
    'D/M/YYYY',
    'D.M.YYYY',
    'M/D/YYYY h:mm A',
    'M/D/YYYY H:mm',
    'M.D.YYYY h:mm A',
    'M.D.YYYY H:mm',
    'D/M/YYYY h:mm A',
    'D/M/YYYY H:mm',
    'D.M.YYYY h:mm A',
    'D.M.YYYY H:mm',
    'M/D/YY',
    'M.D.YY',
    'D/M/YY',
    'D.M.YY',
    'M/D/YY h:mm a',
    'M/D/YY H:mm',
    'M.D.YY h:mm a',
    'M.D.YY H:mm',
    'D/M/YY h:mm a',
    'D/M/YY H:mm',
    'D.M.YY h:mm a',
    'D.M.YY H:mm',
    'YYYY-MM-DD',
    'YYYY-MM-DD h:mm a',
    'YYYY-MM-DD H:mm',
    'MMM D',
    'D MMM',
    'MMMM YYYY',
    'MMM YYYY',
    'MM/YYYY',
    'h:mm a',
    'H:mm',
    'D',
    'DD',
    'ddd',
    'dddd',
    'M',
    'MM',
    'MMM',
    'MMMM',
    'YY',
    'YYYY'
];
const DATE_FORMAT_OPTIONS = DATETIME_FORMAT_OPTIONS.filter((format)=>!/[hHmaA]/.test(format));

//# sourceMappingURL=data:application/json;base64,

}),
99369: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
// Avoid adding unnecessary code or imports to this file,
// because it will directly affect the webflow.js bundle size.

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "testCondition", ({
    enumerable: true,
    get: function() {
        return testCondition;
    }
}));
const _DynamoConditionUtils = __webpack_require__(95253);
const _momenttimezone = /*#__PURE__*/ _interop_require_default(__webpack_require__(47636));
const _SlugUtils = __webpack_require__(82985);
const _memo = __webpack_require__(23056);
const _ParamFieldPathUtils = __webpack_require__(68490);
const _constants = __webpack_require__(29197);
const _FilterUtils = __webpack_require__(20574);
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// inlined from `@packages/systems/core/utils/RecordUtils` to keep bundle size minimal
const getId = (record)=>{
    return record._id || record.id || (record.get ? record.get('_id', record.get('id')) : null);
};
const isDateStringWithoutTime = (dateString)=>/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.test(dateString);
const toGraphQLSlug = (originalSlug)=>{
    const slug = handleId(originalSlug);
    return slug === 'id' || (0, _SlugUtils.isDynamoGraphQLFieldSlug)(slug) || // Don't want to namespace field slug when retrieving product inventory data
    slug === 'ecSkuInventoryQuantity' ? slug : (0, _SlugUtils.fieldSlug)(slug);
};
const handleId = (slug)=>slug === '_id' ? 'id' : slug;
const isObj = (x)=>x !== null && typeof x === 'object' && !Array.isArray(x);
// A simple, non-comprehensive way of detecting Maps and Lists
const isMap = (x)=>x && Boolean(x['@@__IMMUTABLE_MAP__@@']);
const isList = (x)=>x && Boolean(x['@@__IMMUTABLE_LIST__@@']);
const isRecord = (x)=>x && Boolean(x['@@__IMMUTABLE_RECORD__@@']);
const memoizedToJS = (0, _memo.weakMemo)((imm)=>imm.toJS());
// This is purposefully an `any`. It avoids about 9 Flow errors below
// that derive from 1) the impossibility of inferring that many different
// data types and 2) the challenge of enumerating all the possible ones.
// `mixed` is not very well suited for this, because it still requires enumeration
// for types before operating on those values.
const convertImmutableDataStructure = (value)=>{
    if (isMap(value) || isList(value) || isRecord(value)) {
        return memoizedToJS(value);
    }
    return value;
};
const getFieldsFromConditions = (conditions)=>isMap(conditions) ? conditions.get('fields') : conditions.fields;
const testCondition = ({ item, contextItem, timezone, condition, graphQLSlugs })=>{
    const cleanSlug = graphQLSlugs ? toGraphQLSlug : handleId;
    const plainCondition = convertImmutableDataStructure(condition);
    const plainItem = withCleanedSlugs(convertImmutableDataStructure(item), cleanSlug);
    const conditionData = reifyConditions(plainCondition, contextItem, cleanSlug);
    const conditionFields = (0, _FilterUtils.normalizeConditionFields)(conditionData.fields);
    const itemData = conditionFields.reduce((acc, field)=>{
        const { fieldPath, type } = field;
        const itemFieldValue = (0, _DynamoConditionUtils.getItemFieldValue)(plainItem, fieldPath);
        if (itemFieldValue == null) {
            return acc;
        }
        acc[fieldPath] = castFieldValue(itemFieldValue, type, timezone);
        return acc;
    }, {});
    return (0, _DynamoConditionUtils.test)(itemData, conditionData, timezone);
};
const fieldConditionsUpdater = (contextItem, cleanSlug)=>(fields)=>{
        const plainFields = convertImmutableDataStructure(fields);
        // Handles the new data shape of `data.dyn.query.filter.fields`
        if (Array.isArray(fields)) {
            return plainFields.map(reifyQueryField(contextItem, cleanSlug));
        }
        return Object.entries(plainFields).reduce((acc, plainField)=>{
            const [path, item] = reifyCondition(contextItem, cleanSlug)(plainField);
            // @ts-expect-error - TS2538 - Type 'Record<string, any>' cannot be used as an index type.
            acc[path] = item;
            return acc;
        }, {});
    };
const withCleanedSlugs = (obj, cleanSlug)=>{
    return Object.keys(obj).reduce((objWithCleanSlugs, slug)=>{
        objWithCleanSlugs[cleanSlug(slug)] = obj[slug];
        return objWithCleanSlugs;
    }, {});
};
const reifyConditions = (conditions, contextItem, cleanSlug)=>({
        ...conditions,
        fields: fieldConditionsUpdater(contextItem, cleanSlug)(getFieldsFromConditions(conditions))
    });
const createNewFieldPath = (fieldPath, cleanSlug)=>{
    const itemRefFieldSlug = (0, _ParamFieldPathUtils.getItemRefSlug)(fieldPath);
    const valueFieldSlug = (0, _ParamFieldPathUtils.getValueFieldSlug)(fieldPath);
    return itemRefFieldSlug ? (0, _ParamFieldPathUtils.createFieldPath)(cleanSlug(itemRefFieldSlug), cleanSlug(valueFieldSlug)) : (0, _ParamFieldPathUtils.createFieldPath)(cleanSlug(valueFieldSlug));
};
const reifyCondition = (contextItem, cleanSlug)=>(fieldEntry)=>{
        const [fieldPath, operation] = fieldEntry;
        const newFieldPath = createNewFieldPath(fieldPath, cleanSlug);
        const pageItemDataReducer = replacePageItemData(contextItem, cleanSlug);
        return [
            newFieldPath,
            Object.entries(operation).reduce((acc, entry)=>{
                const [key, value] = entry;
                return pageItemDataReducer(acc, value, key);
            }, {})
        ];
    };
const reifyQueryField = (contextItem, cleanSlug)=>(field)=>{
        const { fieldPath, value } = field;
        const newFieldPath = createNewFieldPath(fieldPath, cleanSlug);
        return {
            ...field,
            fieldPath: newFieldPath,
            value: replaceValueBasedOnPageItemData(contextItem, cleanSlug, value)
        };
    };
const replacePageItemData = (contextItem, cleanSlug)=>(acc, value, key)=>{
        acc[key] = replaceValueBasedOnPageItemData(contextItem, cleanSlug, value);
        return acc;
    };
const replaceValueBasedOnPageItemData = (contextItem, cleanSlug, value)=>{
    const plainPageItem = convertImmutableDataStructure(contextItem);
    const pageItemId = plainPageItem ? getId(plainPageItem) : null;
    if (typeof value === 'string') {
        if (value === 'DYN_CONTEXT') {
            if (pageItemId) {
                return pageItemId;
            }
        }
        if (/^DYN_CONTEXT/.test(value)) {
            const dynContextFieldSlug = value.replace(/^DYN_CONTEXT\./, '');
            const dynContextFieldValue = plainPageItem && plainPageItem[cleanSlug(dynContextFieldSlug)];
            const conditionValue = Array.isArray(dynContextFieldValue) ? dynContextFieldValue.map(dynContextFieldValueId) : dynContextFieldValueId(dynContextFieldValue);
            if (plainPageItem) {
                return conditionValue || _constants.NON_EXISTING_ITEM_ID;
            }
        }
    }
    return value;
};
const dynContextFieldValueId = (dynContextFieldValue)=>{
    return isObj(dynContextFieldValue) ? getId(dynContextFieldValue) : dynContextFieldValue;
};
const castFieldValue = (fieldValue, fieldType, timezone)=>{
    switch(fieldType){
        case 'Date':
            {
                // GraphQL api returns date-times as ISO strings and simple dates as YYYY-MM-DD format
                // We know that fieldValue is a string if the itemType is date
                const dateString = fieldValue;
                const dateStringWithoutTime = isDateStringWithoutTime(dateString);
                return dateStringWithoutTime ? _momenttimezone.default.tz(fieldValue, timezone).toDate() : _momenttimezone.default.utc(dateString).toDate();
            }
        case 'Option':
        case 'ItemRef':
            {
                return isObj(fieldValue) ? getId(fieldValue) : fieldValue;
            }
        case 'ItemRefSet':
            {
                return Array.isArray(fieldValue) && fieldValue.length ? Object.values(fieldValue).map((ref)=>{
                    if (typeof ref === 'string') {
                        return {
                            _id: ref
                        };
                    }
                    // @ts-expect-error Unknown type
                    const { id: _, ...restOfRef } = ref;
                    return {
                        ...restOfRef,
                        _id: getId(ref)
                    };
                }) : null;
            }
        default:
            {
                return fieldValue;
            }
    }
};

//# sourceMappingURL=data:application/json;base64,

}),
44557: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
_export_star(__webpack_require__(99369), exports);
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vQ29uZGl0aW9uVXRpbHMnO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWMifQ==

}),
95253: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    EXAMPLE_IMG_URL: function() {
        return EXAMPLE_IMG_URL;
    },
    castConditionValue: function() {
        return castConditionValue;
    },
    castItemValue: function() {
        return castItemValue;
    },
    getItemFieldValue: function() {
        return getItemFieldValue;
    },
    parseDate: function() {
        return parseDate;
    },
    test: function() {
        return test;
    }
});
const _momenttimezone = /*#__PURE__*/ _interop_require_default(__webpack_require__(47636));
const _ParamFieldPathUtils = __webpack_require__(68490);
const _FilterUtils = __webpack_require__(20574);
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const EXAMPLE_IMG_URL = 'https://d3e54v103j8qbb.cloudfront.net/img/image-placeholder.svg';
const OPERATOR_FNS = {
    eq: function(a, b) {
        return a == b; // eslint-disable-line eqeqeq
    },
    ne: function(a, b) {
        return a != b; // eslint-disable-line eqeqeq
    },
    gt: function(a, b) {
        return a > b;
    },
    lt: function(a, b) {
        return a < b;
    },
    gte: function(a, b) {
        return a >= b;
    },
    lte: function(a, b) {
        return a <= b;
    },
    exists: function(a, b) {
        function getATruthiness() {
            if (a != null) {
                if (Array.isArray(a)) {
                    return a.length > 0;
                } else if (typeof a === 'object') {
                    return !('url' in a) || a.url !== EXAMPLE_IMG_URL;
                } else if (typeof a === 'number') {
                    return !Number.isNaN(a);
                } else {
                    return true;
                }
            } else {
                return false;
            }
        }
        function getBTruthiness() {
            return b === 'yes';
        }
        const aIsTruthy = getATruthiness();
        const bIsTruthy = getBTruthiness();
        return aIsTruthy === bIsTruthy;
    },
    idin: function(a, b) {
        return containsResolver(a, b);
    },
    idnin: function(a, b) {
        return !containsResolver(a, b);
    },
    type: false
};
const containsResolver = (a, b)=>{
    if (Array.isArray(a) && typeof b === 'string') {
        // A contains B
        return a.includes(b);
    }
    if (Array.isArray(a) && Array.isArray(b)) {
        // A contains any of B
        return b.some((id)=>a.includes(id));
    }
    if (typeof a === 'string' && Array.isArray(b)) {
        // A equals any of B
        return b.includes(a);
    }
    return false;
};
function test(itemData, conditionData, timezone) {
    const conditionFields = (0, _FilterUtils.normalizeConditionFields)(conditionData.fields);
    // We use for..of to exit as early as possible
    for (const conditionField of conditionFields){
        const result = testSingleCondition({
            conditionField,
            itemData,
            timezone
        });
        // if a condition does not pass, we return false as quickly as possible
        if (!result) {
            return false;
        }
    }
    return true;
}
function testSingleCondition({ conditionField, itemData, timezone }) {
    const { fieldPath, operatorName, value, type } = conditionField;
    const opFn = OPERATOR_FNS[operatorName];
    if (!opFn) {
        console.warn(`Ignoring unsupported condition operator: ${operatorName}`);
        // The condition "passes" because there is no operation to test
        return true;
    }
    /*
    The renderer send out item data in different forms.
    Here, we first try to retrive the item field value in the current format,
    if that fails, we fall back to the legacy format.

    The main difference is in how item references are treated in itemData
    Current: { 'author:name': 'Author Name' }
    Legacy: { author: { name: 'Author Name } }
  */ const itemFieldValue = itemData.hasOwnProperty(fieldPath) ? itemData[fieldPath] : getItemFieldValue(itemData, fieldPath);
    // if field type is available in the condition, we use it to determine the item field type
    // otherwise we use the field value to determine item field type
    const itemFieldType = type ? convertFieldTypeToLegacyItemType(type) : _getLegacyItemType(fieldPath, itemFieldValue);
    const resolvedFieldValue = castItemFieldValue(itemFieldValue, itemFieldType);
    const resolvedConditionValue = castConditionValue(value, operatorName, itemFieldType, timezone);
    return opFn(resolvedFieldValue, resolvedConditionValue);
}
function castItemValue({ operator, value, type, timezone }) {
    if (value !== undefined) {
        switch(type){
            case 'Bool':
                return function() {
                    if (typeof value === 'boolean') {
                        return value;
                    } else if (typeof value === 'string') {
                        // Yes. Some sites have "True"
                        return value.toLowerCase() === 'true';
                    } else {
                        return Boolean(value);
                    }
                }();
            case 'Number':
                return parseFloat(value);
            case 'Date':
                return parseDate({
                    operator,
                    value,
                    timezone
                });
            default:
                return value;
        }
    } else {
        return value;
    }
}
function castConditionValue(value, op, type, timezone) {
    if (op === 'exists') {
        return value;
    } else {
        return castItemValue({
            operator: op,
            timezone,
            type,
            value
        });
    }
}
// TODO: swap with imported constant once OperatorTypes is lifted to dynamo package
// tech debt tracked in: https://github.com/webflow/webflow/issues/29496
const OPERATOR_LTE_NAME = 'lte';
// RegEx Patterns required for `parseDate`
///////////////////////////////////////////////
const NOW_REGEX = /^now$/i;
// The END_OF_TODAY_REGEX pattern collects up to two groups of matches
// Group 1: if the string begins with "end of "
// Group 2: if the string contains "today"
const END_OF_TODAY_REGEX = /^(end of )?(today)$/i;
// The DEPRECATED_END_OF_TOMORROW_YESTERDAY_REGEX pattern is to handle parsing older date filters
// that depended up on an "excluding today" boolean. It collects two groups
// Group 1: if the string begins with "end of "
// Group 2: if the string contains "tomorrow" or "yesterday"
const DEPRECATED_END_OF_TOMORROW_YESTERDAY_REGEX = /^(end of )?(tomorrow|yesterday)$/i;
// The DEPRECATED_RELATIVE_TIME_COMPLEX_REGEX pattern is designed to handle parsing older complex date filters
// It captures 4 groups
// Group 1: A string combining time lengths and time intervals
//   Example: 2 days 17 hours 4 minutes
// Group 2: A string containing either "ago" or "from now"
// Group 3: A string containing "starting" with either "now" or "end of"
// Group 4: A string of either "today", "yesterday" or "tomorrow"
const DEPRECATED_RELATIVE_TIME_COMPLEX_REGEX = /^((?:\d+ (?:year|quarter|month|week|day|hour|minute|second)s? )+)(ago|from now)(?: (?:starting (?:now|(?:(end of )?(today|yesterday|tomorrow)))))?$/i;
// The RELATIVE_TIME_COMPLEX_REGEX pattern collects two groups of matches
// Group 1: A string combining time lengths and time intervals.
//   Example: 2 days 17 hours 4 minutes
// Group 2: a string of either 'future' or 'past'
const RELATIVE_TIME_COMPLEX_REGEX = /^((?:\d+ (?:year|quarter|month|week|day|hour|minute|second)s? )+)in the (future|past)$/i;
// The FULL_TIME_LENGTH_INTERVAL_STRING_REGEX pattern collects all the matches found in
// Group 1 of RELATIVE_TIME_COMPLEX_REGEX and returns them as an array
//   Example: '2 days 17 hours 4 minutes' returns a matches array
//   of ['2 days', '17 hours', '4 minutes']
const FULL_TIME_LENGTH_INTERVAL_STRING_REGEX = /\d+ (?:year|quarter|month|week|day|hour|minute|second)s?/gi;
const isDeprecatedDatePattern = (str)=>DEPRECATED_END_OF_TOMORROW_YESTERDAY_REGEX.test(str) || DEPRECATED_RELATIVE_TIME_COMPLEX_REGEX.test(str);
function handleDeprecatedParseDate({ value, timezone, momentNowUtc }) {
    function getToday() {
        return momentNowUtc.tz(timezone).startOf('day');
    }
    function getEndOfToday() {
        return momentNowUtc.tz(timezone).endOf('day');
    }
    function getNow() {
        return momentNowUtc.tz(timezone);
    }
    const simpleResults = value.match(DEPRECATED_END_OF_TOMORROW_YESTERDAY_REGEX);
    if (simpleResults) {
        // handle deprecated end of tomorrow/yesterday scenarios
        const [, endOf, relativeDate] = simpleResults;
        const getStart = endOf ? getEndOfToday : getToday;
        if (relativeDate === 'tomorrow') {
            return getStart().add(1, 'day').toDate();
        }
        if (relativeDate === 'yesterday') {
            return getStart().subtract(1, 'day').toDate();
        }
    }
    const complexResults = value.match(DEPRECATED_RELATIVE_TIME_COMPLEX_REGEX);
    if (complexResults) {
        // handle deprecated complex results
        const [, values, mode, endOf, relativeDate] = complexResults;
        const getStart = endOf ? getEndOfToday : getToday;
        let time;
        switch(relativeDate){
            case 'today':
                time = getStart();
                break;
            case 'tomorrow':
                time = getStart().add(1, 'day');
                break;
            case 'yesterday':
                time = getStart().subtract(1, 'day');
                break;
            default:
                time = getNow();
                break;
        }
        // @ts-expect-error - TS18048 - 'values' is possibly 'undefined'.
        const timeLengthIntervalItems = values.match(FULL_TIME_LENGTH_INTERVAL_STRING_REGEX);
        if (!timeLengthIntervalItems) {
            return null;
        }
        const method = mode === 'from now' ? 'add' : 'subtract';
        // Loop through each length-interval item, ex '14 days', and mutate `time` with each one
        timeLengthIntervalItems.forEach((item)=>{
            const [length, interval] = item.split(' ');
            // @ts-expect-error - TS2345 - Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
            time[method](parseInt(length, 10), interval);
        });
        return time.toDate();
    }
}
function parseDate({ operator, value, timezone = 'UTC', nowUtcString }) {
    const momentNowUtc = nowUtcString ? _momenttimezone.default.utc(nowUtcString) : _momenttimezone.default.utc();
    function getToday() {
        return momentNowUtc.tz(timezone).startOf('day');
    }
    function getEndOfToday() {
        return momentNowUtc.tz(timezone).endOf('day');
    }
    function getNow() {
        return momentNowUtc.tz(timezone);
    }
    const stringValue = String(value).toLowerCase();
    if (NOW_REGEX.test(stringValue)) {
        return getNow().toDate();
    }
    // Capture and handle deprecated date patterns, this code will/should eventually be removed
    if (isDeprecatedDatePattern(stringValue)) {
        return handleDeprecatedParseDate({
            value: stringValue,
            timezone,
            momentNowUtc
        });
    }
    const simpleResults = stringValue.match(END_OF_TODAY_REGEX);
    if (simpleResults) {
        const [, endOf] = simpleResults;
        return endOf ? getEndOfToday().toDate() : getToday().toDate();
    }
    const complexResults = stringValue.match(RELATIVE_TIME_COMPLEX_REGEX);
    if (complexResults) {
        const [, fullTimeLengthIntervalString, tense] = complexResults;
        // @ts-expect-error - TS18048 - 'fullTimeLengthIntervalString' is possibly 'undefined'.
        const timeLengthIntervalItems = fullTimeLengthIntervalString.match(FULL_TIME_LENGTH_INTERVAL_STRING_REGEX);
        if (!timeLengthIntervalItems) {
            return null;
        }
        // We want LTE operators to include everything up to the end of the day
        const getStart = operator && operator === OPERATOR_LTE_NAME ? getEndOfToday : getToday;
        const TENSE_METHODS_MAP = {
            future: 'add',
            past: 'subtract'
        };
        const tenseMethod = TENSE_METHODS_MAP[tense];
        // This loops through each item and accumulatively adds or subtracts
        // the length and intervals from today's date
        const reducedDateTime = timeLengthIntervalItems.reduce((accumulatedMoment, item)=>{
            // `item` is a string in the shape of "2 days" or "14 years"
            const [length, interval] = item.split(' ');
            return accumulatedMoment[tenseMethod](// @ts-expect-error - TS2345 - Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
            parseInt(length, 10), interval);
        }, getStart());
        return reducedDateTime.toDate();
    }
    // Else, fall back on standard ISO 8601 parsing:
    const isoMoment = _momenttimezone.default.utc(value, _momenttimezone.default.ISO_8601).tz(timezone);
    if (!isoMoment || !isoMoment.isValid()) {
        return null;
    }
    // Ok!
    return isoMoment.toDate();
}
function castItemFieldValue(fieldValue, fieldType) {
    switch(fieldType){
        case 'CommercePrice':
            {
                // typeof null equals 'object' so we need to guard against that
                return fieldValue !== null && typeof fieldValue === 'object' && typeof fieldValue.value === 'number' ? fieldValue.value / 100 : NaN;
            }
        case 'ItemRef':
            {
                return fieldValue !== null && typeof fieldValue === 'object' ? fieldValue._id : fieldValue;
            }
        case 'ItemRefSet':
            {
                return Array.isArray(fieldValue) ? fieldValue.map(function(itemRef) {
                    return itemRef._id;
                }) : [];
            }
        case 'Option':
            {
                return fieldValue !== null && typeof fieldValue === 'object' ? fieldValue.id : fieldValue;
            }
        case 'Number':
            {
                return fieldValue === null ? NaN : fieldValue;
            }
        default:
            {
                return fieldValue;
            }
    }
}
function getItemFieldValue(itemData, fieldPath) {
    const itemRefSlug = (0, _ParamFieldPathUtils.getItemRefSlug)(fieldPath);
    const valueFieldSlug = (0, _ParamFieldPathUtils.getValueFieldSlug)(fieldPath);
    return itemRefSlug ? itemData[itemRefSlug] && itemData[itemRefSlug][valueFieldSlug] : itemData[valueFieldSlug];
}
/*
 * Converts CMS Field Type into legacy item types used in this file
 *
 * This function maps Field types to the appropriate legacy field type.
 *
 * The legacy field types are `Bool`, `CommercePrice`, `Date`, `Id`,
 * `ImageRef`, `ItemRef`, `ItemRefSet`, `Number`, `Option` and `String`.
 *
 * Of these, only `Bool`, `CommercePrice`, `Date`, `ItemRef`,
 * `ItemRefSet`, `Number` and `Option` are consequential,
 * because condition and item field values are cast based on them
 * in `castConditionValue` and `castItemValue`.
 */ function convertFieldTypeToLegacyItemType(fieldType) {
    switch(fieldType){
        case 'Bool':
        case 'CommercePrice':
        case 'Date':
        case 'ImageRef':
        case 'ItemRef':
        case 'ItemRefSet':
        case 'Number':
        case 'Option':
        case 'Set':
            {
                return fieldType;
            }
        case 'FileRef':
        case 'Video':
            {
                return 'ImageRef';
            }
        case 'Email':
        case 'Phone':
        case 'PlainText':
        case 'RichText':
        case 'Link':
            {
                return 'String';
            }
        default:
            {
                return 'String';
            }
    }
}
/*
 * LEGACY function that derives the field type from field name and value.
 *
 * This way of deriving field type is only used with the Legacy Renderer,
 * where the field type is not added to the associated condition data.
 */ function _getLegacyItemType(name, value) {
    if (name === '_id') {
        return 'Id';
    } else {
        switch(typeof value){
            case 'number':
                return 'Number';
            case 'boolean':
                return 'Bool';
            case 'object':
                return function() {
                    if (value) {
                        if (value instanceof Date) {
                            return 'Date';
                        } else if ('_id' in value && '_cid' in value) {
                            return 'ItemRef';
                        } else if (Array.isArray(value)) {
                            // Do not need to worry about `Set` fields here,
                            // because this function is used only for legacy conditions.
                            return 'ItemRefSet';
                        } else if ('url' in value) {
                            // technically this could be a video as well; we use 'ImageRef' as a stand-in for 'Asset'-type
                            return 'ImageRef';
                        } else if ('value' in value && 'unit' in value) {
                            return 'CommercePrice';
                        } else {
                            return 'Option';
                        }
                    } else {
                        return 'Option';
                    }
                }();
            default:
                return 'String';
        }
    }
}

//# sourceMappingURL=data:application/json;base64,

}),
82688: (function (__unused_webpack_module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    formatEmail: function() {
        return formatEmail;
    },
    formatNumber: function() {
        return formatNumber;
    },
    formatPhone: function() {
        return formatPhone;
    }
});
function formatNumber(n, formatType) {
    if (typeof n === 'number') {
        const precision = formatType === '' || formatType === 'none' ? NaN : Number(formatType);
        if (!isNaN(precision)) {
            return n.toFixed(precision);
        } else {
            return String(n);
        }
    } else {
        return '';
    }
}
function formatEmail(email, subject, property) {
    const prefix = property === 'href' ? 'mailto:' : '';
    if (email && subject) {
        return prefix + email + '?subject=' + subject;
    } else if (email) {
        return prefix + email;
    } else {
        return null;
    }
}
function formatPhone(phone, property) {
    if (property === 'href') {
        let tel = phone ? phone.replace(/\s/g, '') : '';
        if (/\d/.test(tel)) {
            // Create a map to replace phonewords with the proper numbers
            const keypadMap = [
                [
                    /a|b|c/gi,
                    2
                ],
                [
                    /d|e|f/gi,
                    3
                ],
                [
                    /g|h|i/gi,
                    4
                ],
                [
                    /j|k|l/gi,
                    5
                ],
                [
                    /m|n|o/gi,
                    6
                ],
                [
                    /p|q|r|s/gi,
                    7
                ],
                [
                    /t|u|v/gi,
                    8
                ],
                [
                    /w|x|y|z/gi,
                    9
                ]
            ];
            keypadMap.forEach(([key, value])=>{
                tel = tel.replace(key, value.toString());
            });
        } else {
            phone = '#';
        }
        phone = /\d/.test(tel) ? 'tel:' + tel : '#';
    }
    return phone;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBmb3JtYXROdW1iZXIobjogbnVtYmVyLCBmb3JtYXRUeXBlOiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgaWYgKHR5cGVvZiBuID09PSAnbnVtYmVyJykge1xuICAgIGNvbnN0IHByZWNpc2lvbiA9XG4gICAgICBmb3JtYXRUeXBlID09PSAnJyB8fCBmb3JtYXRUeXBlID09PSAnbm9uZScgPyBOYU4gOiBOdW1iZXIoZm9ybWF0VHlwZSk7XG5cbiAgICBpZiAoIWlzTmFOKHByZWNpc2lvbikpIHtcbiAgICAgIHJldHVybiBuLnRvRml4ZWQocHJlY2lzaW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFN0cmluZyhuKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG5cbi8vIEZvcm1hdCBlbWFpbCBkZXBlbmRpbmcgb24gdGhlIGJpbmRpbmcgcHJvcGVydHkgYmVpbmcgYW4gaHJlZiBhbmQgaGF2aW5nIGEgc3ViamVjdFxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEVtYWlsKGVtYWlsOiBzdHJpbmcsIHN1YmplY3Q6IHN0cmluZywgcHJvcGVydHk6IHN0cmluZykge1xuICBjb25zdCBwcmVmaXggPSBwcm9wZXJ0eSA9PT0gJ2hyZWYnID8gJ21haWx0bzonIDogJyc7XG4gIGlmIChlbWFpbCAmJiBzdWJqZWN0KSB7XG4gICAgcmV0dXJuIHByZWZpeCArIGVtYWlsICsgJz9zdWJqZWN0PScgKyBzdWJqZWN0O1xuICB9IGVsc2UgaWYgKGVtYWlsKSB7XG4gICAgcmV0dXJuIHByZWZpeCArIGVtYWlsO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8vIEZvcm1hdCBwaG9uZSBkZXBlbmRpbmcgb24gdGhlIGJpbmRpbmcgcHJvcGVydHkgYmVpbmcgYW4gaHJlZiBhbmQgaGF2aW5nIGEgc3ViamVjdFxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFBob25lKHBob25lOiBzdHJpbmcsIHByb3BlcnR5OiBzdHJpbmcpIHtcbiAgaWYgKHByb3BlcnR5ID09PSAnaHJlZicpIHtcbiAgICBsZXQgdGVsID0gcGhvbmUgPyBwaG9uZS5yZXBsYWNlKC9cXHMvZywgJycpIDogJyc7XG4gICAgaWYgKC9cXGQvLnRlc3QodGVsKSkge1xuICAgICAgLy8gQ3JlYXRlIGEgbWFwIHRvIHJlcGxhY2UgcGhvbmV3b3JkcyB3aXRoIHRoZSBwcm9wZXIgbnVtYmVyc1xuICAgICAgY29uc3Qga2V5cGFkTWFwOiBBcnJheTxbUmVnRXhwLCBudW1iZXJdPiA9IFtcbiAgICAgICAgWy9hfGJ8Yy9naSwgMl0sXG4gICAgICAgIFsvZHxlfGYvZ2ksIDNdLFxuICAgICAgICBbL2d8aHxpL2dpLCA0XSxcbiAgICAgICAgWy9qfGt8bC9naSwgNV0sXG4gICAgICAgIFsvbXxufG8vZ2ksIDZdLFxuICAgICAgICBbL3B8cXxyfHMvZ2ksIDddLFxuICAgICAgICBbL3R8dXx2L2dpLCA4XSxcbiAgICAgICAgWy93fHh8eXx6L2dpLCA5XSxcbiAgICAgIF07XG4gICAgICBrZXlwYWRNYXAuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIHRlbCA9IHRlbC5yZXBsYWNlKGtleSwgdmFsdWUudG9TdHJpbmcoKSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGhvbmUgPSAnIyc7XG4gICAgfVxuXG4gICAgcGhvbmUgPSAvXFxkLy50ZXN0KHRlbCkgPyAndGVsOicgKyB0ZWwgOiAnIyc7XG4gIH1cbiAgcmV0dXJuIHBob25lO1xufVxuIl0sIm5hbWVzIjpbImZvcm1hdEVtYWlsIiwiZm9ybWF0TnVtYmVyIiwiZm9ybWF0UGhvbmUiLCJuIiwiZm9ybWF0VHlwZSIsInByZWNpc2lvbiIsIk5hTiIsIk51bWJlciIsImlzTmFOIiwidG9GaXhlZCIsIlN0cmluZyIsImVtYWlsIiwic3ViamVjdCIsInByb3BlcnR5IiwicHJlZml4IiwicGhvbmUiLCJ0ZWwiLCJyZXBsYWNlIiwidGVzdCIsImtleXBhZE1hcCIsImZvckVhY2giLCJrZXkiLCJ2YWx1ZSIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQWdCZ0JBLFdBQVc7ZUFBWEE7O0lBaEJBQyxZQUFZO2VBQVpBOztJQTRCQUMsV0FBVztlQUFYQTs7O0FBNUJULFNBQVNELGFBQWFFLENBQVMsRUFBRUMsVUFBMkI7SUFDakUsSUFBSSxPQUFPRCxNQUFNLFVBQVU7UUFDekIsTUFBTUUsWUFDSkQsZUFBZSxNQUFNQSxlQUFlLFNBQVNFLE1BQU1DLE9BQU9IO1FBRTVELElBQUksQ0FBQ0ksTUFBTUgsWUFBWTtZQUNyQixPQUFPRixFQUFFTSxPQUFPLENBQUNKO1FBQ25CLE9BQU87WUFDTCxPQUFPSyxPQUFPUDtRQUNoQjtJQUNGLE9BQU87UUFDTCxPQUFPO0lBQ1Q7QUFDRjtBQUdPLFNBQVNILFlBQVlXLEtBQWEsRUFBRUMsT0FBZSxFQUFFQyxRQUFnQjtJQUMxRSxNQUFNQyxTQUFTRCxhQUFhLFNBQVMsWUFBWTtJQUNqRCxJQUFJRixTQUFTQyxTQUFTO1FBQ3BCLE9BQU9FLFNBQVNILFFBQVEsY0FBY0M7SUFDeEMsT0FBTyxJQUFJRCxPQUFPO1FBQ2hCLE9BQU9HLFNBQVNIO0lBQ2xCLE9BQU87UUFDTCxPQUFPO0lBQ1Q7QUFDRjtBQUdPLFNBQVNULFlBQVlhLEtBQWEsRUFBRUYsUUFBZ0I7SUFDekQsSUFBSUEsYUFBYSxRQUFRO1FBQ3ZCLElBQUlHLE1BQU1ELFFBQVFBLE1BQU1FLE9BQU8sQ0FBQyxPQUFPLE1BQU07UUFDN0MsSUFBSSxLQUFLQyxJQUFJLENBQUNGLE1BQU07WUFDbEIsNkRBQTZEO1lBQzdELE1BQU1HLFlBQXFDO2dCQUN6QztvQkFBQztvQkFBVztpQkFBRTtnQkFDZDtvQkFBQztvQkFBVztpQkFBRTtnQkFDZDtvQkFBQztvQkFBVztpQkFBRTtnQkFDZDtvQkFBQztvQkFBVztpQkFBRTtnQkFDZDtvQkFBQztvQkFBVztpQkFBRTtnQkFDZDtvQkFBQztvQkFBYTtpQkFBRTtnQkFDaEI7b0JBQUM7b0JBQVc7aUJBQUU7Z0JBQ2Q7b0JBQUM7b0JBQWE7aUJBQUU7YUFDakI7WUFDREEsVUFBVUMsT0FBTyxDQUFDLENBQUMsQ0FBQ0MsS0FBS0MsTUFBTTtnQkFDN0JOLE1BQU1BLElBQUlDLE9BQU8sQ0FBQ0ksS0FBS0MsTUFBTUMsUUFBUTtZQUN2QztRQUNGLE9BQU87WUFDTFIsUUFBUTtRQUNWO1FBRUFBLFFBQVEsS0FBS0csSUFBSSxDQUFDRixPQUFPLFNBQVNBLE1BQU07SUFDMUM7SUFDQSxPQUFPRDtBQUNUIn0=

}),
4880: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    convertConditionFieldsFromObjectToArray: function() {
        return convertConditionFieldsFromObjectToArray;
    },
    normalizeConditionFields: function() {
        return normalizeConditionFields;
    }
});
const _utils = __webpack_require__(1242);
const convertConditionFieldsFromObjectToArray = (fields)=>{
    const mapper = (fieldPath)=>{
        // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
        const type = fields[fieldPath].type;
        // @ts-expect-error - TS2769 - No overload matches this call.
        return Object.entries(fields[fieldPath]).reduce((conditionFields, [operatorName, value])=>{
            if (operatorName === 'type') {
                return conditionFields;
            }
            conditionFields.push({
                fieldPath,
                operatorName,
                value,
                type
            });
            return conditionFields;
        }, []);
    };
    return (0, _utils.flatMap)(mapper)(Object.keys(fields));
};
const normalizeConditionFields = (fields = [])=>{
    if (Array.isArray(fields)) {
        return fields;
    }
    return convertConditionFieldsFromObjectToArray(fields);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZpbHRlclV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtcbiAgQ29uZGl0aW9uc1dpdGhUeXBlVCxcbiAgRGVwcmVjYXRlZENvbmRpdGlvbnNULFxufSBmcm9tICdAcGFja2FnZXMvc3lzdGVtcy9keW5hbW8vdHlwZXMnO1xuaW1wb3J0IHtmbGF0TWFwfSBmcm9tICdAcGFja2FnZXMvdXRpbGl0aWVzL2ZwL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGNvbnZlcnRDb25kaXRpb25GaWVsZHNGcm9tT2JqZWN0VG9BcnJheSA9IChcbiAgZmllbGRzOiBEZXByZWNhdGVkQ29uZGl0aW9uc1Rcbik6IENvbmRpdGlvbnNXaXRoVHlwZVQgPT4ge1xuICBjb25zdCBtYXBwZXIgPSAoZmllbGRQYXRoOiBzdHJpbmcpOiBDb25kaXRpb25zV2l0aFR5cGVUID0+IHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMyNTMyIC0gT2JqZWN0IGlzIHBvc3NpYmx5ICd1bmRlZmluZWQnLlxuICAgIGNvbnN0IHR5cGUgPSBmaWVsZHNbZmllbGRQYXRoXS50eXBlO1xuXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTMjc2OSAtIE5vIG92ZXJsb2FkIG1hdGNoZXMgdGhpcyBjYWxsLlxuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhmaWVsZHNbZmllbGRQYXRoXSkucmVkdWNlPENvbmRpdGlvbnNXaXRoVHlwZVQ+KFxuICAgICAgKGNvbmRpdGlvbkZpZWxkcywgW29wZXJhdG9yTmFtZSwgdmFsdWVdOiBbc3RyaW5nLCB1bmtub3duXSkgPT4ge1xuICAgICAgICBpZiAob3BlcmF0b3JOYW1lID09PSAndHlwZScpIHtcbiAgICAgICAgICByZXR1cm4gY29uZGl0aW9uRmllbGRzO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZGl0aW9uRmllbGRzLnB1c2goe2ZpZWxkUGF0aCwgb3BlcmF0b3JOYW1lLCB2YWx1ZSwgdHlwZX0pO1xuXG4gICAgICAgIHJldHVybiBjb25kaXRpb25GaWVsZHM7XG4gICAgICB9LFxuICAgICAgW11cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBmbGF0TWFwKG1hcHBlcikoT2JqZWN0LmtleXMoZmllbGRzKSk7XG59O1xuXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplQ29uZGl0aW9uRmllbGRzID0gKFxuICBmaWVsZHM6IERlcHJlY2F0ZWRDb25kaXRpb25zVCB8IENvbmRpdGlvbnNXaXRoVHlwZVQgPSBbXVxuKTogQ29uZGl0aW9uc1dpdGhUeXBlVCA9PiB7XG4gIGlmIChBcnJheS5pc0FycmF5KGZpZWxkcykpIHtcbiAgICByZXR1cm4gZmllbGRzO1xuICB9XG5cbiAgcmV0dXJuIGNvbnZlcnRDb25kaXRpb25GaWVsZHNGcm9tT2JqZWN0VG9BcnJheShmaWVsZHMpO1xufTtcbiJdLCJuYW1lcyI6WyJjb252ZXJ0Q29uZGl0aW9uRmllbGRzRnJvbU9iamVjdFRvQXJyYXkiLCJub3JtYWxpemVDb25kaXRpb25GaWVsZHMiLCJmaWVsZHMiLCJtYXBwZXIiLCJmaWVsZFBhdGgiLCJ0eXBlIiwiT2JqZWN0IiwiZW50cmllcyIsInJlZHVjZSIsImNvbmRpdGlvbkZpZWxkcyIsIm9wZXJhdG9yTmFtZSIsInZhbHVlIiwicHVzaCIsImZsYXRNYXAiLCJrZXlzIiwiQXJyYXkiLCJpc0FycmF5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQU1hQSx1Q0FBdUM7ZUFBdkNBOztJQXlCQUMsd0JBQXdCO2VBQXhCQTs7O3VCQTNCUztBQUVmLE1BQU1ELDBDQUEwQyxDQUNyREU7SUFFQSxNQUFNQyxTQUFTLENBQUNDO1FBQ2QsOERBQThEO1FBQzlELE1BQU1DLE9BQU9ILE1BQU0sQ0FBQ0UsVUFBVSxDQUFDQyxJQUFJO1FBRW5DLDZEQUE2RDtRQUM3RCxPQUFPQyxPQUFPQyxPQUFPLENBQUNMLE1BQU0sQ0FBQ0UsVUFBVSxFQUFFSSxNQUFNLENBQzdDLENBQUNDLGlCQUFpQixDQUFDQyxjQUFjQyxNQUF5QjtZQUN4RCxJQUFJRCxpQkFBaUIsUUFBUTtnQkFDM0IsT0FBT0Q7WUFDVDtZQUVBQSxnQkFBZ0JHLElBQUksQ0FBQztnQkFBQ1I7Z0JBQVdNO2dCQUFjQztnQkFBT047WUFBSTtZQUUxRCxPQUFPSTtRQUNULEdBQ0EsRUFBRTtJQUVOO0lBRUEsT0FBT0ksSUFBQUEsY0FBTyxFQUFDVixRQUFRRyxPQUFPUSxJQUFJLENBQUNaO0FBQ3JDO0FBRU8sTUFBTUQsMkJBQTJCLENBQ3RDQyxTQUFzRCxFQUFFO0lBRXhELElBQUlhLE1BQU1DLE9BQU8sQ0FBQ2QsU0FBUztRQUN6QixPQUFPQTtJQUNUO0lBRUEsT0FBT0Ysd0NBQXdDRTtBQUNqRCJ9

}),
20574: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
_export_star(__webpack_require__(4880), exports);
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vRmlsdGVyVXRpbHMnO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWMifQ==

}),
68490: (function (__unused_webpack_module, exports) {
"use strict";
/**
 * These utils are for handling field paths in node params (DynList filters and CondVis).
 * For basic fields the fieldPath is currently just the field slug. For fields of an
 * item-reference the fieldPaths are for example `author:post` (separated with SEPARATOR).
 *
 * Encapsulating the internals of fieldPath inside these utils it is easier to refactor the
 * structure of a fieldPath if needed.
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createFieldPath: function() {
        return createFieldPath;
    },
    fieldPathsEqual: function() {
        return fieldPathsEqual;
    },
    getItemRefSlug: function() {
        return getItemRefSlug;
    },
    getValueFieldSlug: function() {
        return getValueFieldSlug;
    },
    isEmptyFieldPath: function() {
        return isEmptyFieldPath;
    },
    isFauxDynContextField: function() {
        return isFauxDynContextField;
    },
    isFieldOfItemRef: function() {
        return isFieldOfItemRef;
    }
});
const SEPARATOR = ':';
const EMPTY_STRING = '';
const isFieldOfItemRef = (fieldPath)=>fieldPath.indexOf(SEPARATOR) !== -1;
const getValueFieldSlug = (fieldPath)=>{
    const splitPath = fieldPath.split(SEPARATOR);
    // @ts-expect-error - TS2322 - Type 'string | undefined' is not assignable to type 'string'.
    return splitPath[splitPath.length - 1];
};
const getItemRefSlug = (fieldPath)=>{
    if (isFieldOfItemRef(fieldPath)) {
        const splitPath = fieldPath.split(SEPARATOR);
        // @ts-expect-error - TS2322 - Type 'string | undefined' is not assignable to type 'string | null'.
        return splitPath[0];
    }
    return null;
};
const createFieldPath = (...fieldSlugs)=>fieldSlugs.join(SEPARATOR);
const isEmptyFieldPath = (a)=>a === EMPTY_STRING;
const fieldPathsEqual = (a, b)=>a === b;
const isFauxDynContextField = (fieldPath)=>!isFieldOfItemRef(fieldPath) && getValueFieldSlug(fieldPath) === '_id';

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlc2UgdXRpbHMgYXJlIGZvciBoYW5kbGluZyBmaWVsZCBwYXRocyBpbiBub2RlIHBhcmFtcyAoRHluTGlzdCBmaWx0ZXJzIGFuZCBDb25kVmlzKS5cbiAqIEZvciBiYXNpYyBmaWVsZHMgdGhlIGZpZWxkUGF0aCBpcyBjdXJyZW50bHkganVzdCB0aGUgZmllbGQgc2x1Zy4gRm9yIGZpZWxkcyBvZiBhblxuICogaXRlbS1yZWZlcmVuY2UgdGhlIGZpZWxkUGF0aHMgYXJlIGZvciBleGFtcGxlIGBhdXRob3I6cG9zdGAgKHNlcGFyYXRlZCB3aXRoIFNFUEFSQVRPUikuXG4gKlxuICogRW5jYXBzdWxhdGluZyB0aGUgaW50ZXJuYWxzIG9mIGZpZWxkUGF0aCBpbnNpZGUgdGhlc2UgdXRpbHMgaXQgaXMgZWFzaWVyIHRvIHJlZmFjdG9yIHRoZVxuICogc3RydWN0dXJlIG9mIGEgZmllbGRQYXRoIGlmIG5lZWRlZC5cbiAqL1xuXG5jb25zdCBTRVBBUkFUT1IgPSAnOic7XG5jb25zdCBFTVBUWV9TVFJJTkcgPSAnJztcblxuZXhwb3J0IGNvbnN0IGlzRmllbGRPZkl0ZW1SZWYgPSAoZmllbGRQYXRoOiBzdHJpbmcpOiBib29sZWFuID0+XG4gIGZpZWxkUGF0aC5pbmRleE9mKFNFUEFSQVRPUikgIT09IC0xO1xuXG5leHBvcnQgY29uc3QgZ2V0VmFsdWVGaWVsZFNsdWcgPSAoZmllbGRQYXRoOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBzcGxpdFBhdGggPSBmaWVsZFBhdGguc3BsaXQoU0VQQVJBVE9SKTtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTMjMyMiAtIFR5cGUgJ3N0cmluZyB8IHVuZGVmaW5lZCcgaXMgbm90IGFzc2lnbmFibGUgdG8gdHlwZSAnc3RyaW5nJy5cbiAgcmV0dXJuIHNwbGl0UGF0aFtzcGxpdFBhdGgubGVuZ3RoIC0gMV07XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0SXRlbVJlZlNsdWcgPSAoZmllbGRQYXRoOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsID0+IHtcbiAgaWYgKGlzRmllbGRPZkl0ZW1SZWYoZmllbGRQYXRoKSkge1xuICAgIGNvbnN0IHNwbGl0UGF0aCA9IGZpZWxkUGF0aC5zcGxpdChTRVBBUkFUT1IpO1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzIzMjIgLSBUeXBlICdzdHJpbmcgfCB1bmRlZmluZWQnIGlzIG5vdCBhc3NpZ25hYmxlIHRvIHR5cGUgJ3N0cmluZyB8IG51bGwnLlxuICAgIHJldHVybiBzcGxpdFBhdGhbMF07XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlRmllbGRQYXRoID0gKC4uLmZpZWxkU2x1Z3M6IEFycmF5PHN0cmluZz4pOiBzdHJpbmcgPT5cbiAgZmllbGRTbHVncy5qb2luKFNFUEFSQVRPUik7XG5cbmV4cG9ydCBjb25zdCBpc0VtcHR5RmllbGRQYXRoID0gKGE6IHN0cmluZyk6IGJvb2xlYW4gPT4gYSA9PT0gRU1QVFlfU1RSSU5HO1xuXG5leHBvcnQgY29uc3QgZmllbGRQYXRoc0VxdWFsID0gKGE6IHN0cmluZywgYjogc3RyaW5nKTogYm9vbGVhbiA9PiBhID09PSBiO1xuXG5leHBvcnQgY29uc3QgaXNGYXV4RHluQ29udGV4dEZpZWxkID0gKGZpZWxkUGF0aDogc3RyaW5nKSA9PlxuICAhaXNGaWVsZE9mSXRlbVJlZihmaWVsZFBhdGgpICYmIGdldFZhbHVlRmllbGRTbHVnKGZpZWxkUGF0aCkgPT09ICdfaWQnO1xuIl0sIm5hbWVzIjpbImNyZWF0ZUZpZWxkUGF0aCIsImZpZWxkUGF0aHNFcXVhbCIsImdldEl0ZW1SZWZTbHVnIiwiZ2V0VmFsdWVGaWVsZFNsdWciLCJpc0VtcHR5RmllbGRQYXRoIiwiaXNGYXV4RHluQ29udGV4dEZpZWxkIiwiaXNGaWVsZE9mSXRlbVJlZiIsIlNFUEFSQVRPUiIsIkVNUFRZX1NUUklORyIsImZpZWxkUGF0aCIsImluZGV4T2YiLCJzcGxpdFBhdGgiLCJzcGxpdCIsImxlbmd0aCIsImZpZWxkU2x1Z3MiLCJqb2luIiwiYSIsImIiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0NBT0M7Ozs7Ozs7Ozs7O0lBdUJZQSxlQUFlO2VBQWZBOztJQUtBQyxlQUFlO2VBQWZBOztJQWRBQyxjQUFjO2VBQWRBOztJQU5BQyxpQkFBaUI7ZUFBakJBOztJQWtCQUMsZ0JBQWdCO2VBQWhCQTs7SUFJQUMscUJBQXFCO2VBQXJCQTs7SUF6QkFDLGdCQUFnQjtlQUFoQkE7OztBQUhiLE1BQU1DLFlBQVk7QUFDbEIsTUFBTUMsZUFBZTtBQUVkLE1BQU1GLG1CQUFtQixDQUFDRyxZQUMvQkEsVUFBVUMsT0FBTyxDQUFDSCxlQUFlLENBQUM7QUFFN0IsTUFBTUosb0JBQW9CLENBQUNNO0lBQ2hDLE1BQU1FLFlBQVlGLFVBQVVHLEtBQUssQ0FBQ0w7SUFDbEMsNEZBQTRGO0lBQzVGLE9BQU9JLFNBQVMsQ0FBQ0EsVUFBVUUsTUFBTSxHQUFHLEVBQUU7QUFDeEM7QUFFTyxNQUFNWCxpQkFBaUIsQ0FBQ087SUFDN0IsSUFBSUgsaUJBQWlCRyxZQUFZO1FBQy9CLE1BQU1FLFlBQVlGLFVBQVVHLEtBQUssQ0FBQ0w7UUFDbEMsbUdBQW1HO1FBQ25HLE9BQU9JLFNBQVMsQ0FBQyxFQUFFO0lBQ3JCO0lBQ0EsT0FBTztBQUNUO0FBRU8sTUFBTVgsa0JBQWtCLENBQUMsR0FBR2MsYUFDakNBLFdBQVdDLElBQUksQ0FBQ1I7QUFFWCxNQUFNSCxtQkFBbUIsQ0FBQ1ksSUFBdUJBLE1BQU1SO0FBRXZELE1BQU1QLGtCQUFrQixDQUFDZSxHQUFXQyxJQUF1QkQsTUFBTUM7QUFFakUsTUFBTVosd0JBQXdCLENBQUNJLFlBQ3BDLENBQUNILGlCQUFpQkcsY0FBY04sa0JBQWtCTSxlQUFlIn0=

}),
19336: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    applyConditionToNode: function() {
        return applyConditionToNode;
    },
    removeWDynBindEmptyClass: function() {
        return removeWDynBindEmptyClass;
    },
    walkDOM: function() {
        return walkDOM;
    }
});
const _constants = __webpack_require__(29197);
const _ConditionUtils = __webpack_require__(44557);
const removeClass = (node, className)=>{
    if (node.classList.contains(className)) {
        node.classList.remove(className);
        if (node.classList.length === 0) {
            node.removeAttribute('class');
        }
    }
};
const removeWDynBindEmptyClass = (node)=>removeClass(node, _constants.CLASS_NAME_W_DYN_BIND_EMPTY);
const addConditionalVisibilityClass = (node)=>{
    node.classList.add(_constants.CONDITION_INVISIBLE_CLASS);
};
const removeConditionalVisibilityClass = (node)=>removeClass(node, _constants.CONDITION_INVISIBLE_CLASS);
const applyConditionToNode = (node, item, conditionData, graphQLSlugs = false)=>{
    if (!conditionData) {
        return;
    }
    const { condition, timezone } = conditionData;
    if (item) {
        const isVisible = (0, _ConditionUtils.testCondition)({
            item,
            contextItem: null,
            timezone,
            condition,
            graphQLSlugs
        });
        if (isVisible) {
            removeConditionalVisibilityClass(node);
        } else {
            addConditionalVisibilityClass(node);
        }
    }
};
function walkDOM(el, fn) {
    fn(el);
    if (!el || !el.children) {
        return el;
    }
    const children = Array.from(el.children);
    if (!children.length) {
        return el;
    }
    children.forEach((child)=>walkDOM(child, fn));
    return el;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlbmRlcmluZ1V0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENMQVNTX05BTUVfV19EWU5fQklORF9FTVBUWSxcbiAgQ09ORElUSU9OX0lOVklTSUJMRV9DTEFTUyxcbn0gZnJvbSAnQHBhY2thZ2VzL3N5c3RlbXMvZHluYW1vL2NvbnN0YW50cyc7XG5pbXBvcnQge3Rlc3RDb25kaXRpb259IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL2R5bmFtby91dGlscy9Db25kaXRpb25VdGlscyc7XG5cbmNvbnN0IHJlbW92ZUNsYXNzID0gKG5vZGU6IEVsZW1lbnQsIGNsYXNzTmFtZTogc3RyaW5nKTogdm9pZCA9PiB7XG4gIGlmIChub2RlLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XG4gICAgbm9kZS5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgaWYgKG5vZGUuY2xhc3NMaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcmVtb3ZlV0R5bkJpbmRFbXB0eUNsYXNzID0gKG5vZGU6IEVsZW1lbnQpOiB2b2lkID0+XG4gIHJlbW92ZUNsYXNzKG5vZGUsIENMQVNTX05BTUVfV19EWU5fQklORF9FTVBUWSk7XG5cbmNvbnN0IGFkZENvbmRpdGlvbmFsVmlzaWJpbGl0eUNsYXNzID0gKG5vZGU6IEVsZW1lbnQpOiB2b2lkID0+IHtcbiAgbm9kZS5jbGFzc0xpc3QuYWRkKENPTkRJVElPTl9JTlZJU0lCTEVfQ0xBU1MpO1xufTtcblxuY29uc3QgcmVtb3ZlQ29uZGl0aW9uYWxWaXNpYmlsaXR5Q2xhc3MgPSAobm9kZTogRWxlbWVudCk6IHZvaWQgPT5cbiAgcmVtb3ZlQ2xhc3Mobm9kZSwgQ09ORElUSU9OX0lOVklTSUJMRV9DTEFTUyk7XG5cbmV4cG9ydCBjb25zdCBhcHBseUNvbmRpdGlvblRvTm9kZSA9IChcbiAgbm9kZTogRWxlbWVudCxcbiAgaXRlbTogUmVjb3JkPGFueSwgYW55PiB8IG51bGwsXG4gIGNvbmRpdGlvbkRhdGE6IGFueSxcbiAgZ3JhcGhRTFNsdWdzOiBib29sZWFuID0gZmFsc2Vcbik6IHZvaWQgPT4ge1xuICBpZiAoIWNvbmRpdGlvbkRhdGEpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7Y29uZGl0aW9uLCB0aW1lem9uZX0gPSBjb25kaXRpb25EYXRhO1xuXG4gIGlmIChpdGVtKSB7XG4gICAgY29uc3QgaXNWaXNpYmxlID0gdGVzdENvbmRpdGlvbih7XG4gICAgICBpdGVtLFxuICAgICAgY29udGV4dEl0ZW06IG51bGwsXG4gICAgICB0aW1lem9uZSxcbiAgICAgIGNvbmRpdGlvbixcbiAgICAgIGdyYXBoUUxTbHVncyxcbiAgICB9KTtcbiAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICByZW1vdmVDb25kaXRpb25hbFZpc2liaWxpdHlDbGFzcyhub2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWRkQ29uZGl0aW9uYWxWaXNpYmlsaXR5Q2xhc3Mobm9kZSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEJyZWFkdGgtZmlyc3QgdHJhdmVyc2FsIG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fSBlbCAtIFJvb3QgZWxlbWVudCB0byBzdGFydCB3aXRoXG4gKiBAcGFyYW0geyhub2RlOiBFbGVtZW50KSA9PiB2b2lkfSBmbiAtIEZ1bmN0aW9uIHRvIHJ1biBmb3IgZXZlcnkgbm9kZSBlbmNvdW50ZXJlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gd2Fsa0RPTShlbDogRWxlbWVudCwgZm46IChub2RlOiBFbGVtZW50KSA9PiB2b2lkKTogYW55IHtcbiAgZm4oZWwpO1xuXG4gIGlmICghZWwgfHwgIWVsLmNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIGVsO1xuICB9XG5cbiAgY29uc3QgY2hpbGRyZW4gPSBBcnJheS5mcm9tKGVsLmNoaWxkcmVuKTtcblxuICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHJldHVybiBlbDtcbiAgfVxuXG4gIGNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB3YWxrRE9NKGNoaWxkLCBmbikpO1xuXG4gIHJldHVybiBlbDtcbn1cbiJdLCJuYW1lcyI6WyJhcHBseUNvbmRpdGlvblRvTm9kZSIsInJlbW92ZVdEeW5CaW5kRW1wdHlDbGFzcyIsIndhbGtET00iLCJyZW1vdmVDbGFzcyIsIm5vZGUiLCJjbGFzc05hbWUiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInJlbW92ZSIsImxlbmd0aCIsInJlbW92ZUF0dHJpYnV0ZSIsIkNMQVNTX05BTUVfV19EWU5fQklORF9FTVBUWSIsImFkZENvbmRpdGlvbmFsVmlzaWJpbGl0eUNsYXNzIiwiYWRkIiwiQ09ORElUSU9OX0lOVklTSUJMRV9DTEFTUyIsInJlbW92ZUNvbmRpdGlvbmFsVmlzaWJpbGl0eUNsYXNzIiwiaXRlbSIsImNvbmRpdGlvbkRhdGEiLCJncmFwaFFMU2x1Z3MiLCJjb25kaXRpb24iLCJ0aW1lem9uZSIsImlzVmlzaWJsZSIsInRlc3RDb25kaXRpb24iLCJjb250ZXh0SXRlbSIsImVsIiwiZm4iLCJjaGlsZHJlbiIsIkFycmF5IiwiZnJvbSIsImZvckVhY2giLCJjaGlsZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUF5QmFBLG9CQUFvQjtlQUFwQkE7O0lBVkFDLHdCQUF3QjtlQUF4QkE7O0lBMkNHQyxPQUFPO2VBQVBBOzs7MkJBdkRUO2dDQUNxQjtBQUU1QixNQUFNQyxjQUFjLENBQUNDLE1BQWVDO0lBQ2xDLElBQUlELEtBQUtFLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDRixZQUFZO1FBQ3RDRCxLQUFLRSxTQUFTLENBQUNFLE1BQU0sQ0FBQ0g7UUFDdEIsSUFBSUQsS0FBS0UsU0FBUyxDQUFDRyxNQUFNLEtBQUssR0FBRztZQUMvQkwsS0FBS00sZUFBZSxDQUFDO1FBQ3ZCO0lBQ0Y7QUFDRjtBQUVPLE1BQU1ULDJCQUEyQixDQUFDRyxPQUN2Q0QsWUFBWUMsTUFBTU8sc0NBQTJCO0FBRS9DLE1BQU1DLGdDQUFnQyxDQUFDUjtJQUNyQ0EsS0FBS0UsU0FBUyxDQUFDTyxHQUFHLENBQUNDLG9DQUF5QjtBQUM5QztBQUVBLE1BQU1DLG1DQUFtQyxDQUFDWCxPQUN4Q0QsWUFBWUMsTUFBTVUsb0NBQXlCO0FBRXRDLE1BQU1kLHVCQUF1QixDQUNsQ0ksTUFDQVksTUFDQUMsZUFDQUMsZUFBd0IsS0FBSztJQUU3QixJQUFJLENBQUNELGVBQWU7UUFDbEI7SUFDRjtJQUVBLE1BQU0sRUFBQ0UsU0FBUyxFQUFFQyxRQUFRLEVBQUMsR0FBR0g7SUFFOUIsSUFBSUQsTUFBTTtRQUNSLE1BQU1LLFlBQVlDLElBQUFBLDZCQUFhLEVBQUM7WUFDOUJOO1lBQ0FPLGFBQWE7WUFDYkg7WUFDQUQ7WUFDQUQ7UUFDRjtRQUNBLElBQUlHLFdBQVc7WUFDYk4saUNBQWlDWDtRQUNuQyxPQUFPO1lBQ0xRLDhCQUE4QlI7UUFDaEM7SUFDRjtBQUNGO0FBT08sU0FBU0YsUUFBUXNCLEVBQVcsRUFBRUMsRUFBMkI7SUFDOURBLEdBQUdEO0lBRUgsSUFBSSxDQUFDQSxNQUFNLENBQUNBLEdBQUdFLFFBQVEsRUFBRTtRQUN2QixPQUFPRjtJQUNUO0lBRUEsTUFBTUUsV0FBV0MsTUFBTUMsSUFBSSxDQUFDSixHQUFHRSxRQUFRO0lBRXZDLElBQUksQ0FBQ0EsU0FBU2pCLE1BQU0sRUFBRTtRQUNwQixPQUFPZTtJQUNUO0lBRUFFLFNBQVNHLE9BQU8sQ0FBQyxDQUFDQyxRQUFVNUIsUUFBUTRCLE9BQU9MO0lBRTNDLE9BQU9EO0FBQ1QifQ==

}),
86078: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
_export_star(__webpack_require__(19336), exports);
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vUmVuZGVyaW5nVXRpbHMnO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7cUJBQWMifQ==

}),
53083: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    _crapCode: function() {
        return _crapCode;
    },
    _test: function() {
        return _test;
    },
    collSlug: function() {
        return collSlug;
    },
    fieldSlug: function() {
        return fieldSlug;
    },
    restoreSlug: function() {
        return restoreSlug;
    }
});
const _invert = /*#__PURE__*/ _interop_require_default(__webpack_require__(61576));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * This file exists because GraphQL only allows /^[a-z_][a-z_0-9]$/i identifiers, but we allow things to be slugs,
 * like: "foo-bar". Since we allow characters that are not allowed by GraphQL, we need to convert these slugs into an
 * accepted format.
 *
 * Unfortunately, simple conversions (like what the prototype did: slug.replace(/\W/g, '_')) don't work, because this
 * would encode the slugs "foo-bar" and "foo_bar" to the same value. Both are valid slugs according to our system, and
 * can totally co-exist in a collection schema. So if a site existed that accidentally did something like that, schema
 * generation would fail for that user, which is a big "No bueno".
 */ // Consonants are used instead of the traditional hex characters, since there's
// a lower likelihood of it accidentally spelling something...
const hex_lookup = {
    '0': 'b',
    '1': 'c',
    '2': 'd',
    '3': 'f',
    '4': 'g',
    '5': 'h',
    '6': 'j',
    '7': 'k',
    '8': 'l',
    '9': 'm',
    a: 'n',
    b: 'p',
    c: 'q',
    d: 'r',
    e: 's',
    f: 't'
};
const reverse_hex_lookup = (0, _invert.default)(hex_lookup);
function _crapCode(str) {
    str = String(str);
    // Right is all rejected chars, in a {idx}{letterhex} format. Letter hex is just hex,
    // but all values are shifted into consonants to avoid ambiguities with idx / the hex
    // data. Left is the original string, with all rejected characters replaced with '_'.
    // This stragegy should have a good 1:1 mapping from source to encoded values. It
    // will produce keys that can be used as identifiers in GraphQL. And it also leaves
    // many of the readable characters in the source string alone, so that the slug is
    // still kinda readable:
    const right = [];
    // Left is all acceptable chars, for "readability".
    const left = str.replace(/[^a-z0-9]/gi, (substr, idx)=>{
        // Get hex of invalid character:
        const hex = substr.charCodeAt(0).toString(16);
        // Map to letters, so there's no ambiguity between indexes and char data.
        // @ts-expect-error - TS2769 - No overload matches this call.
        const letters = hex.replace(/./g, (ch)=>hex_lookup[ch]);
        // Push this {idx}{kinda-hex} combo for later concat:
        right.push(String(idx) + letters);
        // ... and replace the invalid char with '_':
        return '_';
    });
    return left + '_' + right.join('');
}
const collSlug = (coll)=>'c_' + _crapCode(coll.slug);
const fieldSlug = (field)=>'f_' + _crapCode(field.slug);
const _test = {
    _crapCode
};
const restoreSlug = (slugWithPrefixAndCrapCode)=>{
    const results = slugWithPrefixAndCrapCode.match(/^[fc]_([_A-Za-z0-9]+)_([0-9bcdfghjklmnpqrst]*)$/);
    if (!results || results.length < 3) {
        // slug is not a valid Dynamo collection or field GraphQL slug,
        // so it does not need to be restored
        return slugWithPrefixAndCrapCode;
    }
    const left = results[1];
    const right = results[2];
    if (!right) {
        // @ts-expect-error - TS2322 - Type 'string | undefined' is not assignable to type 'string'.
        return left;
    }
    // we use a while loop and mutable variables,
    // because node 10 does not support `matchAll`
    // @ts-expect-error - TS18048 - 'left' is possibly 'undefined'.
    const decrapified = left.split('');
    const re = /(\d+)([bcdfghjklmnpqrst]+)/g;
    let matches = re.exec(right);
    while(matches !== null && matches.length > 2){
        const idx = Number(matches[1]);
        const letters = matches[2];
        // @ts-expect-error - TS18048 - 'letters' is possibly 'undefined'. | TS2769 - No overload matches this call.
        const hex = letters.replace(/./g, (ch)=>reverse_hex_lookup[ch]);
        const char = String.fromCharCode(parseInt(hex, 16));
        decrapified[idx] = char;
        matches = re.exec(right);
    }
    return decrapified.join('');
};

//# sourceMappingURL=data:application/json;base64,

}),
24915: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
_export_star(__webpack_require__(53083), exports);
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vU2NoZW1hRW5jb2Rlcic7XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztxQkFBYyJ9

}),
67526: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    collectionSlug: function() {
        return collectionSlug;
    },
    fieldSlug: function() {
        return fieldSlug;
    },
    isDynamoGraphQLFieldSlug: function() {
        return isDynamoGraphQLFieldSlug;
    },
    restoreSlug: function() {
        return _SchemaEncoder.restoreSlug;
    }
});
const _SchemaEncoder = __webpack_require__(24915);
const fieldSlug = (slug)=>(0, _SchemaEncoder.fieldSlug)({
        slug
    });
const DYNAMO_GQL_FIELD_SLUG = 'f_';
const isDynamoGraphQLFieldSlug = (str)=>str.startsWith(DYNAMO_GQL_FIELD_SLUG);
const collectionSlug = (slug)=>(0, _SchemaEncoder.collSlug)({
        slug
    });

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNsdWdVdGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBjb2xsU2x1ZyxcbiAgZmllbGRTbHVnIGFzIF9maWVsZFNsdWcsXG59IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL2R5bmFtby91dGlscy9TY2hlbWFFbmNvZGVyJztcblxuZXhwb3J0IHtyZXN0b3JlU2x1Z30gZnJvbSAnQHBhY2thZ2VzL3N5c3RlbXMvZHluYW1vL3V0aWxzL1NjaGVtYUVuY29kZXInO1xuXG5leHBvcnQgY29uc3QgZmllbGRTbHVnID0gKHNsdWc6IHN0cmluZyk6IHN0cmluZyA9PiBfZmllbGRTbHVnKHtzbHVnfSk7XG5cbmNvbnN0IERZTkFNT19HUUxfRklFTERfU0xVRyA9ICdmXyc7XG5leHBvcnQgY29uc3QgaXNEeW5hbW9HcmFwaFFMRmllbGRTbHVnOiAoYXJnMTogc3RyaW5nKSA9PiBib29sZWFuID0gKHN0cikgPT5cbiAgc3RyLnN0YXJ0c1dpdGgoRFlOQU1PX0dRTF9GSUVMRF9TTFVHKTtcblxuZXhwb3J0IGNvbnN0IGNvbGxlY3Rpb25TbHVnID0gKHNsdWc6IHN0cmluZyk6IHN0cmluZyA9PiBjb2xsU2x1Zyh7c2x1Z30pO1xuIl0sIm5hbWVzIjpbImNvbGxlY3Rpb25TbHVnIiwiZmllbGRTbHVnIiwiaXNEeW5hbW9HcmFwaFFMRmllbGRTbHVnIiwicmVzdG9yZVNsdWciLCJzbHVnIiwiX2ZpZWxkU2x1ZyIsIkRZTkFNT19HUUxfRklFTERfU0xVRyIsInN0ciIsInN0YXJ0c1dpdGgiLCJjb2xsU2x1ZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFhYUEsY0FBYztlQUFkQTs7SUFOQUMsU0FBUztlQUFUQTs7SUFHQUMsd0JBQXdCO2VBQXhCQTs7SUFMTEMsV0FBVztlQUFYQSwwQkFBVzs7OytCQUZaO0FBSUEsTUFBTUYsWUFBWSxDQUFDRyxPQUF5QkMsSUFBQUEsd0JBQVUsRUFBQztRQUFDRDtJQUFJO0FBRW5FLE1BQU1FLHdCQUF3QjtBQUN2QixNQUFNSiwyQkFBc0QsQ0FBQ0ssTUFDbEVBLElBQUlDLFVBQVUsQ0FBQ0Y7QUFFVixNQUFNTixpQkFBaUIsQ0FBQ0ksT0FBeUJLLElBQUFBLHVCQUFRLEVBQUM7UUFBQ0w7SUFBSSJ9

}),
82985: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
_export_star(__webpack_require__(67526), exports);
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vU2x1Z1V0aWxzJztcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O3FCQUFjIn0=

}),
73141: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "transformers", ({
    enumerable: true,
    get: function() {
        return transformers;
    }
}));
const _escape = /*#__PURE__*/ _interop_require_default(__webpack_require__(28929));
const _momenttimezone = /*#__PURE__*/ _interop_require_default(__webpack_require__(47636));
const _CurrencyUtils = __webpack_require__(60937);
const _DynamoFormattingUtils = __webpack_require__(82688);
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// GraphQL api returns date-times as ISO strings and simple dates as YYYY-MM-DD format
const isSimpleDateFormat = (value)=>/^([0-9]{4})-([0-9]{2})-([0-9]{2})$/.test(value);
const date = (value, [format], { timezone = 'UTC' })=>{
    if (isSimpleDateFormat(value)) {
        timezone = 'UTC';
    }
    const momentDate = _momenttimezone.default.utc(value, _momenttimezone.default.ISO_8601);
    if (momentDate.isValid()) {
        return momentDate.tz(timezone).format(format);
    } else {
        return '';
    }
};
const detailPage = (value, [collectionIdOrLegacySlug], { collectionSlugMap })=>{
    // Falling back to collectionIdOrLegacySlug because in the legacy filters, it's
    // actually the collection slug. If there's a legacy filter, the collection slug
    // rename is not enabled yet for the site so the href is still accurate.
    const collectionSlug = collectionSlugMap[collectionIdOrLegacySlug] || collectionIdOrLegacySlug;
    return value ? `/${collectionSlug}/${value}` : null;
};
const style = (value, [styleProp])=>{
    if (styleProp === 'background-image') {
        return value ? `url("${value}")` : 'none';
    }
    return value;
};
const numberPrecision = (value, [precision])=>{
    return (0, _DynamoFormattingUtils.formatNumber)(value, precision);
};
const rich = (value, params, { pageLinkHrefPrefix, collectionSlugMap })=>{
    if (!value) {
        return null;
    }
    if (typeof value !== 'string') {
        return value;
    }
    return value.replace(/<a\s+[^>]+/g, (linkString)=>{
        const isPageLink = /\sdata-rt-link-type="page"/.test(linkString);
        const needsPrefix = pageLinkHrefPrefix && isPageLink;
        const collectionIdMatch = isPageLink && /\sdata-rt-link-collectionid="([a-z0-9]{24})"/.exec(linkString);
        if (needsPrefix || collectionIdMatch) {
            return linkString.replace(/(\shref=")([^"]+)/, (match, begin, href)=>{
                const end = collectionIdMatch ? replaceDetailPageHrefCollectionSlug(href, // @ts-expect-error - TS2345 - Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
                collectionIdMatch[1], collectionSlugMap) : href;
                // Need to escape the prefix here as dynamic RTE is added with dangerouslySetInnerHTML in RichText atom.
                const prefix = pageLinkHrefPrefix ? (0, _escape.default)(pageLinkHrefPrefix) : '';
                return `${begin}${prefix}${end}`;
            });
        } else {
            return linkString;
        }
    });
};
// Collection slug may have been renamed so we need to make sure detail
// page links in CMS RichText fields still point to the correct page.
const replaceDetailPageHrefCollectionSlug = (href, collectionId, collectionSlugMap)=>{
    const [emptyString, originalCollectionSlug, ...rest] = href.split('/');
    const collectionSlug = collectionSlugMap[collectionId] || originalCollectionSlug;
    return [
        emptyString,
        collectionSlug,
        ...rest
    ].join('/');
};
const get = (obj, key)=>{
    if (obj != null && typeof obj.get === 'function') {
        return obj.get(key);
    }
    return obj[key];
};
const price = (obj, params, context)=>{
    if (!obj) return null;
    return (0, _CurrencyUtils.renderPriceFromSettings)({
        unit: get(obj, 'unit'),
        value: get(obj, 'value')
    }, context.currencySettings);
};
function getTransformerFn(fnKey) {
    switch(fnKey){
        case 'date':
            {
                return date;
            }
        case 'detailPage':
            {
                return detailPage;
            }
        case 'style':
            {
                return style;
            }
        case 'numberPrecision':
            {
                return numberPrecision;
            }
        case 'rich':
            {
                return rich;
            }
        case 'price':
            {
                return price;
            }
        default:
            {
                return null;
            }
    }
}
const transformers = (value, filter, context)=>{
    const { type: key, params } = filter;
    const fn = getTransformerFn(key);
    return fn ? fn(value, params, context) : value;
};

//# sourceMappingURL=data:application/json;base64,

}),
61649: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
_export_star(__webpack_require__(73141), exports);
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vVHJhbnNmb3JtZXJzJztcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O3FCQUFjIn0=

}),
82216: (function (__unused_webpack_module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    BREAKPOINT_ID_LARGE: function() {
        return BREAKPOINT_ID_LARGE;
    },
    BREAKPOINT_ID_MAIN: function() {
        return BREAKPOINT_ID_MAIN;
    },
    BREAKPOINT_ID_MEDIUM: function() {
        return BREAKPOINT_ID_MEDIUM;
    },
    BREAKPOINT_ID_SMALL: function() {
        return BREAKPOINT_ID_SMALL;
    },
    BREAKPOINT_ID_TINY: function() {
        return BREAKPOINT_ID_TINY;
    },
    BREAKPOINT_ID_XL: function() {
        return BREAKPOINT_ID_XL;
    },
    BREAKPOINT_ID_XXL: function() {
        return BREAKPOINT_ID_XXL;
    },
    DEFAULT_BREAKPOINT_IDS: function() {
        return DEFAULT_BREAKPOINT_IDS;
    },
    LARGER_BREAKPOINT_IDS: function() {
        return LARGER_BREAKPOINT_IDS;
    }
});
const BREAKPOINT_ID_XXL = 'xxl';
const BREAKPOINT_ID_XL = 'xl';
const BREAKPOINT_ID_LARGE = 'large';
const BREAKPOINT_ID_MAIN = 'main';
const BREAKPOINT_ID_MEDIUM = 'medium';
const BREAKPOINT_ID_SMALL = 'small';
const BREAKPOINT_ID_TINY = 'tiny';
const DEFAULT_BREAKPOINT_IDS = [
    BREAKPOINT_ID_MAIN,
    BREAKPOINT_ID_MEDIUM,
    BREAKPOINT_ID_SMALL,
    BREAKPOINT_ID_TINY
];
const LARGER_BREAKPOINT_IDS = [
    BREAKPOINT_ID_LARGE,
    BREAKPOINT_ID_XL,
    BREAKPOINT_ID_XXL
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtCcmVha3BvaW50SUR9IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL3N0eWxlL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IEJSRUFLUE9JTlRfSURfWFhMID0gJ3h4bCcgYXMgY29uc3Q7XG5leHBvcnQgY29uc3QgQlJFQUtQT0lOVF9JRF9YTCA9ICd4bCcgYXMgY29uc3Q7XG5leHBvcnQgY29uc3QgQlJFQUtQT0lOVF9JRF9MQVJHRSA9ICdsYXJnZScgYXMgY29uc3Q7XG5leHBvcnQgY29uc3QgQlJFQUtQT0lOVF9JRF9NQUlOID0gJ21haW4nIGFzIGNvbnN0O1xuZXhwb3J0IGNvbnN0IEJSRUFLUE9JTlRfSURfTUVESVVNID0gJ21lZGl1bScgYXMgY29uc3Q7XG5leHBvcnQgY29uc3QgQlJFQUtQT0lOVF9JRF9TTUFMTCA9ICdzbWFsbCcgYXMgY29uc3Q7XG5leHBvcnQgY29uc3QgQlJFQUtQT0lOVF9JRF9USU5ZID0gJ3RpbnknIGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9CUkVBS1BPSU5UX0lEUyA9IFtcbiAgQlJFQUtQT0lOVF9JRF9NQUlOLFxuICBCUkVBS1BPSU5UX0lEX01FRElVTSxcbiAgQlJFQUtQT0lOVF9JRF9TTUFMTCxcbiAgQlJFQUtQT0lOVF9JRF9USU5ZLFxuXSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IExBUkdFUl9CUkVBS1BPSU5UX0lEUzogQnJlYWtwb2ludElEW10gPSBbXG4gIEJSRUFLUE9JTlRfSURfTEFSR0UsXG4gIEJSRUFLUE9JTlRfSURfWEwsXG4gIEJSRUFLUE9JTlRfSURfWFhMLFxuXTtcbiJdLCJuYW1lcyI6WyJCUkVBS1BPSU5UX0lEX0xBUkdFIiwiQlJFQUtQT0lOVF9JRF9NQUlOIiwiQlJFQUtQT0lOVF9JRF9NRURJVU0iLCJCUkVBS1BPSU5UX0lEX1NNQUxMIiwiQlJFQUtQT0lOVF9JRF9USU5ZIiwiQlJFQUtQT0lOVF9JRF9YTCIsIkJSRUFLUE9JTlRfSURfWFhMIiwiREVGQVVMVF9CUkVBS1BPSU5UX0lEUyIsIkxBUkdFUl9CUkVBS1BPSU5UX0lEUyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFJYUEsbUJBQW1CO2VBQW5CQTs7SUFDQUMsa0JBQWtCO2VBQWxCQTs7SUFDQUMsb0JBQW9CO2VBQXBCQTs7SUFDQUMsbUJBQW1CO2VBQW5CQTs7SUFDQUMsa0JBQWtCO2VBQWxCQTs7SUFMQUMsZ0JBQWdCO2VBQWhCQTs7SUFEQUMsaUJBQWlCO2VBQWpCQTs7SUFRQUMsc0JBQXNCO2VBQXRCQTs7SUFPQUMscUJBQXFCO2VBQXJCQTs7O0FBZk4sTUFBTUYsb0JBQW9CO0FBQzFCLE1BQU1ELG1CQUFtQjtBQUN6QixNQUFNTCxzQkFBc0I7QUFDNUIsTUFBTUMscUJBQXFCO0FBQzNCLE1BQU1DLHVCQUF1QjtBQUM3QixNQUFNQyxzQkFBc0I7QUFDNUIsTUFBTUMscUJBQXFCO0FBRTNCLE1BQU1HLHlCQUF5QjtJQUNwQ047SUFDQUM7SUFDQUM7SUFDQUM7Q0FDRDtBQUVNLE1BQU1JLHdCQUF3QztJQUNuRFI7SUFDQUs7SUFDQUM7Q0FDRCJ9

}),
66725: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DEFAULT_BREAKPOINTS_CONFIG: function() {
        return DEFAULT_BREAKPOINTS_CONFIG;
    },
    LARGER_BREAKPOINTS_CONFIG: function() {
        return LARGER_BREAKPOINTS_CONFIG;
    }
});
const _breakpointids = __webpack_require__(82216);
const DEFAULT_BREAKPOINTS_CONFIG = {
    [_breakpointids.BREAKPOINT_ID_MAIN]: {
        maxWidth: 10000
    },
    [_breakpointids.BREAKPOINT_ID_MEDIUM]: {
        maxWidth: 991
    },
    [_breakpointids.BREAKPOINT_ID_SMALL]: {
        maxWidth: 767
    },
    [_breakpointids.BREAKPOINT_ID_TINY]: {
        maxWidth: 479
    }
};
const LARGER_BREAKPOINTS_CONFIG = {
    [_breakpointids.BREAKPOINT_ID_MAIN]: {
        maxWidth: 10000
    },
    [_breakpointids.BREAKPOINT_ID_XXL]: {
        minWidth: 1920
    },
    [_breakpointids.BREAKPOINT_ID_XL]: {
        minWidth: 1440
    },
    [_breakpointids.BREAKPOINT_ID_LARGE]: {
        minWidth: 1280
    },
    [_breakpointids.BREAKPOINT_ID_MEDIUM]: {
        maxWidth: 991
    },
    [_breakpointids.BREAKPOINT_ID_SMALL]: {
        maxWidth: 767
    },
    [_breakpointids.BREAKPOINT_ID_TINY]: {
        maxWidth: 479
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEJSRUFLUE9JTlRfSURfWFhMLFxuICBCUkVBS1BPSU5UX0lEX1hMLFxuICBCUkVBS1BPSU5UX0lEX0xBUkdFLFxuICBCUkVBS1BPSU5UX0lEX01BSU4sXG4gIEJSRUFLUE9JTlRfSURfTUVESVVNLFxuICBCUkVBS1BPSU5UX0lEX1NNQUxMLFxuICBCUkVBS1BPSU5UX0lEX1RJTlksXG59IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL3N0eWxlL2JyZWFrcG9pbnQtaWRzJztcbmltcG9ydCB0eXBlIHtCcmVha3BvaW50c0NvbmZpZ30gZnJvbSAnQHBhY2thZ2VzL3N5c3RlbXMvc3R5bGUvdHlwZXMnO1xuXG4vKlxuICogRGF0YSB1c2VkIHRvIHN0b3JlIGJyZWFrcG9pbnRzIGluIHRoZSBiYWNrZW5kLlxuICovXG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0JSRUFLUE9JTlRTX0NPTkZJRzogQnJlYWtwb2ludHNDb25maWcgPSB7XG4gIFtCUkVBS1BPSU5UX0lEX01BSU5dOiB7XG4gICAgbWF4V2lkdGg6IDEwMDAwLFxuICB9LFxuICBbQlJFQUtQT0lOVF9JRF9NRURJVU1dOiB7XG4gICAgbWF4V2lkdGg6IDk5MSxcbiAgfSxcbiAgW0JSRUFLUE9JTlRfSURfU01BTExdOiB7XG4gICAgbWF4V2lkdGg6IDc2NyxcbiAgfSxcbiAgW0JSRUFLUE9JTlRfSURfVElOWV06IHtcbiAgICBtYXhXaWR0aDogNDc5LFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IExBUkdFUl9CUkVBS1BPSU5UU19DT05GSUc6IEJyZWFrcG9pbnRzQ29uZmlnID0ge1xuICBbQlJFQUtQT0lOVF9JRF9NQUlOXToge1xuICAgIG1heFdpZHRoOiAxMDAwMCxcbiAgfSxcbiAgW0JSRUFLUE9JTlRfSURfWFhMXToge1xuICAgIG1pbldpZHRoOiAxOTIwLFxuICB9LFxuICBbQlJFQUtQT0lOVF9JRF9YTF06IHtcbiAgICBtaW5XaWR0aDogMTQ0MCxcbiAgfSxcbiAgW0JSRUFLUE9JTlRfSURfTEFSR0VdOiB7XG4gICAgbWluV2lkdGg6IDEyODAsXG4gIH0sXG4gIFtCUkVBS1BPSU5UX0lEX01FRElVTV06IHtcbiAgICBtYXhXaWR0aDogOTkxLFxuICB9LFxuICBbQlJFQUtQT0lOVF9JRF9TTUFMTF06IHtcbiAgICBtYXhXaWR0aDogNzY3LFxuICB9LFxuICBbQlJFQUtQT0lOVF9JRF9USU5ZXToge1xuICAgIG1heFdpZHRoOiA0NzksXG4gIH0sXG59O1xuIl0sIm5hbWVzIjpbIkRFRkFVTFRfQlJFQUtQT0lOVFNfQ09ORklHIiwiTEFSR0VSX0JSRUFLUE9JTlRTX0NPTkZJRyIsIkJSRUFLUE9JTlRfSURfTUFJTiIsIm1heFdpZHRoIiwiQlJFQUtQT0lOVF9JRF9NRURJVU0iLCJCUkVBS1BPSU5UX0lEX1NNQUxMIiwiQlJFQUtQT0lOVF9JRF9USU5ZIiwiQlJFQUtQT0lOVF9JRF9YWEwiLCJtaW5XaWR0aCIsIkJSRUFLUE9JTlRfSURfWEwiLCJCUkVBS1BPSU5UX0lEX0xBUkdFIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQWVhQSwwQkFBMEI7ZUFBMUJBOztJQWVBQyx5QkFBeUI7ZUFBekJBOzs7K0JBdEJOO0FBT0EsTUFBTUQsNkJBQWdEO0lBQzNELENBQUNFLGlDQUFrQixDQUFDLEVBQUU7UUFDcEJDLFVBQVU7SUFDWjtJQUNBLENBQUNDLG1DQUFvQixDQUFDLEVBQUU7UUFDdEJELFVBQVU7SUFDWjtJQUNBLENBQUNFLGtDQUFtQixDQUFDLEVBQUU7UUFDckJGLFVBQVU7SUFDWjtJQUNBLENBQUNHLGlDQUFrQixDQUFDLEVBQUU7UUFDcEJILFVBQVU7SUFDWjtBQUNGO0FBRU8sTUFBTUYsNEJBQStDO0lBQzFELENBQUNDLGlDQUFrQixDQUFDLEVBQUU7UUFDcEJDLFVBQVU7SUFDWjtJQUNBLENBQUNJLGdDQUFpQixDQUFDLEVBQUU7UUFDbkJDLFVBQVU7SUFDWjtJQUNBLENBQUNDLCtCQUFnQixDQUFDLEVBQUU7UUFDbEJELFVBQVU7SUFDWjtJQUNBLENBQUNFLGtDQUFtQixDQUFDLEVBQUU7UUFDckJGLFVBQVU7SUFDWjtJQUNBLENBQUNKLG1DQUFvQixDQUFDLEVBQUU7UUFDdEJELFVBQVU7SUFDWjtJQUNBLENBQUNFLGtDQUFtQixDQUFDLEVBQUU7UUFDckJGLFVBQVU7SUFDWjtJQUNBLENBQUNHLGlDQUFrQixDQUFDLEVBQUU7UUFDcEJILFVBQVU7SUFDWjtBQUNGIn0=

}),
33001: (function (__unused_webpack_module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ERROR_ATTRIBUTE_PREFIX: function() {
        return ERROR_ATTRIBUTE_PREFIX;
    },
    ERROR_MSG_CLASS: function() {
        return ERROR_MSG_CLASS;
    },
    ERROR_STATE: function() {
        return ERROR_STATE;
    },
    ErrorStateToCopy: function() {
        return ErrorStateToCopy;
    },
    FORM_GENERIC_ERROR_PATH: function() {
        return FORM_GENERIC_ERROR_PATH;
    },
    FORM_REQUIRED_ERROR_PATH: function() {
        return FORM_REQUIRED_ERROR_PATH;
    },
    FORM_TOO_LARGE_ERROR_PATH: function() {
        return FORM_TOO_LARGE_ERROR_PATH;
    },
    FORM_TOO_SMALL_ERROR_PATH: function() {
        return FORM_TOO_SMALL_ERROR_PATH;
    },
    FORM_TYPE_ERROR_PATH: function() {
        return FORM_TYPE_ERROR_PATH;
    },
    LOGIN_UI_ERROR_CODES: function() {
        return LOGIN_UI_ERROR_CODES;
    },
    RESET_PASSWORD_UI_ERROR_CODES: function() {
        return RESET_PASSWORD_UI_ERROR_CODES;
    },
    SERVER_DATA_VALIDATION_ERRORS: function() {
        return SERVER_DATA_VALIDATION_ERRORS;
    },
    SIGNUP_ERROR_CATEGORY: function() {
        return SIGNUP_ERROR_CATEGORY;
    },
    SIGNUP_UI_ERROR_CODES: function() {
        return SIGNUP_UI_ERROR_CODES;
    },
    UPDATE_ACCOUNT_ERROR_CODES: function() {
        return UPDATE_ACCOUNT_ERROR_CODES;
    },
    UPDATE_PASSWORD_UI_ERROR_CODES: function() {
        return UPDATE_PASSWORD_UI_ERROR_CODES;
    },
    USER_FILE_UPLOAD_ERRORS: function() {
        return USER_FILE_UPLOAD_ERRORS;
    },
    __DEPRECATED__logInErrorStates: function() {
        return __DEPRECATED__logInErrorStates;
    },
    logInErrorStates: function() {
        return logInErrorStates;
    },
    resetPasswordErrorStates: function() {
        return resetPasswordErrorStates;
    },
    signUpErrorStates: function() {
        return signUpErrorStates;
    },
    updateAccountErrorStates: function() {
        return updateAccountErrorStates;
    },
    updatePasswordErrorStates: function() {
        return updatePasswordErrorStates;
    }
});
const ERROR_MSG_CLASS = 'user-form-error-msg';
const ERROR_STATE = {
    SIGNUP: 'signup-error-state',
    LOGIN: 'login-error-state',
    UPDATE_PASSWORD: 'update-password-error-state',
    RESET_PASSWORD: 'reset-password-error-state',
    ACCOUNT_UPDATE: 'account-update-error-state'
};
const ErrorStateToCopy = (errorStateType, id)=>{
    if (errorStateType === 'signup-error-state') {
        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"GENERAL_ERROR" | "NOT_ALLOWED" | "NOT_VERIFIED" | "EMAIL_ALREADY_EXIST" | "USE_INVITE_EMAIL" | "INVALID_EMAIL" | "INVALID_PASSWORD" | "EXPIRED_TOKEN" | "VALIDATION_FAILED" | "REQUIRED", ErrorStateType>>'.
        return signUpErrorStates[id]?.copy ?? null;
    }
    if (errorStateType === 'login-error-state') {
        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"GENERAL_ERROR" | "INVALID_EMAIL_OR_PASSWORD", ErrorStateType>>'.
        return logInErrorStates[id]?.copy ?? null;
    }
    if (errorStateType === 'update-password-error-state') {
        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"GENERAL_ERROR" | "WEAK_PASSWORD", ErrorStateType>>'.
        return updatePasswordErrorStates[id]?.copy ?? null;
    }
    if (errorStateType === 'reset-password-error-state') {
        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"GENERAL_ERROR", ErrorStateType>>'.
        return resetPasswordErrorStates[id]?.copy ?? null;
    }
    if (errorStateType === 'account-update-error-state') {
        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"GENERAL_ERROR", ErrorStateType>>'.
        return updateAccountErrorStates[id]?.copy ?? null;
    }
    console.error(`copy for ${errorStateType} not found`);
    return null;
};
const SERVER_DATA_VALIDATION_ERRORS = {
    RequiredError: 'EmptyValue',
    MinSizeError: 'MinSizeError',
    MaxSizeError: 'MaxSizeError',
    ExtensionsError: 'ExtensionsError',
    DefaultError: 'DefaultError'
};
const LOGIN_UI_ERROR_CODES = {
    GENERAL_ERROR: 'GENERAL_ERROR',
    INVALID_EMAIL_OR_PASSWORD: 'INVALID_EMAIL_OR_PASSWORD'
};
const SIGNUP_UI_ERROR_CODES = {
    GENERAL_ERROR: 'GENERAL_ERROR',
    NOT_ALLOWED: 'NOT_ALLOWED',
    NOT_VERIFIED: 'NOT_VERIFIED',
    EMAIL_ALREADY_EXIST: 'EMAIL_ALREADY_EXIST',
    USE_INVITE_EMAIL: 'USE_INVITE_EMAIL',
    INVALID_EMAIL: 'INVALID_EMAIL',
    INVALID_PASSWORD: 'INVALID_PASSWORD',
    EXPIRED_TOKEN: 'EXPIRED_TOKEN',
    VALIDATION_FAILED: 'VALIDATION_FAILED',
    REQUIRED: 'REQUIRED'
};
const ERROR_ATTRIBUTE_PREFIX = {
    SIGNUP: 'wf-signup-form',
    LOGIN: 'wf-login-form',
    RESET_PASSWORD: 'wf-reset-pw-form',
    UPDATE_PASSWORD: 'wf-update-pw-form',
    ACCOUNT_UPDATE: 'wf-account-update-form'
};
const UPDATE_PASSWORD_UI_ERROR_CODES = {
    GENERAL_ERROR: 'GENERAL_ERROR',
    WEAK_PASSWORD: 'WEAK_PASSWORD'
};
const RESET_PASSWORD_UI_ERROR_CODES = {
    GENERAL_ERROR: 'GENERAL_ERROR'
};
const TOO_LARGE_ERR = 'TOO_LARGE_ERROR';
const TOO_SMALL_ERR = 'TOO_SMALL_ERROR';
const TYPE_ERR = 'TYPE_ERROR';
const GENERIC_ERR = 'GENERIC_ERROR';
const REQUIRED_ERR = 'REQUIRED_ERROR';
const USER_FILE_UPLOAD_ERRORS = {
    GENERIC: {
        id: GENERIC_ERR,
        msg: 'Upload failed. Something went wrong. Please retry.',
        path: [
            'data',
            'form',
            GENERIC_ERR
        ]
    },
    TOO_LARGE: {
        id: TOO_LARGE_ERR,
        msg: 'Upload failed. File too large.',
        path: [
            'data',
            'form',
            TOO_LARGE_ERR
        ]
    },
    TOO_SMALL: {
        id: TOO_SMALL_ERR,
        msg: 'Upload failed. File too small.',
        path: [
            'data',
            'form',
            TOO_SMALL_ERR
        ]
    },
    TYPE: {
        id: TYPE_ERR,
        msg: 'Upload failed. Invalid file type.',
        path: [
            'data',
            'form',
            TYPE_ERR
        ]
    },
    REQUIRED: {
        id: REQUIRED_ERR,
        msg: 'Please upload a file.',
        path: [
            'data',
            'form',
            REQUIRED_ERR
        ]
    }
};
const FORM_PATH = [
    {
        in: 'Record',
        at: 'form'
    }
];
const FORM_TOO_LARGE_ERROR_PATH = [
    ...FORM_PATH,
    {
        in: 'Record',
        at: TOO_LARGE_ERR
    }
];
const FORM_TOO_SMALL_ERROR_PATH = [
    ...FORM_PATH,
    {
        in: 'Record',
        at: TOO_SMALL_ERR
    }
];
const FORM_TYPE_ERROR_PATH = [
    ...FORM_PATH,
    {
        in: 'Record',
        at: TYPE_ERR
    }
];
const FORM_GENERIC_ERROR_PATH = [
    ...FORM_PATH,
    {
        in: 'Record',
        at: GENERIC_ERR
    }
];
const FORM_REQUIRED_ERROR_PATH = [
    ...FORM_PATH,
    {
        in: 'Record',
        at: REQUIRED_ERR
    }
];
const __DEPRECATED__logInErrorStates = {
    [LOGIN_UI_ERROR_CODES.GENERAL_ERROR]: {
        id: LOGIN_UI_ERROR_CODES.GENERAL_ERROR,
        name: 'General error',
        copy: "We're having trouble logging you in. Please try again, or contact us if you continue to have problems.",
        path: [
            'data',
            'users',
            LOGIN_UI_ERROR_CODES.GENERAL_ERROR
        ]
    }
};
const logInErrorStates = {
    [LOGIN_UI_ERROR_CODES.GENERAL_ERROR]: {
        id: LOGIN_UI_ERROR_CODES.GENERAL_ERROR,
        name: 'General error',
        copy: "We're having trouble logging you in. Please try again, or contact us if you continue to have problems.",
        path: [
            'data',
            'users',
            LOGIN_UI_ERROR_CODES.GENERAL_ERROR
        ]
    },
    [LOGIN_UI_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD]: {
        id: LOGIN_UI_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD,
        name: 'Wrong email or password',
        copy: 'Invalid email or password. Please try again.',
        path: [
            'data',
            'users',
            LOGIN_UI_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD
        ]
    }
};
const SIGNUP_ERROR_CATEGORY = {
    GENERAL: {
        id: 'GENERAL',
        label: 'General Errors'
    },
    EMAIL: {
        id: 'EMAIL',
        label: 'Email Errors'
    },
    PASSWORD: {
        id: 'PASSWORD',
        label: 'Password Errors'
    },
    INVITE: {
        id: 'INVITE',
        label: 'Invitation Errors'
    },
    VERFIICATION: {
        id: 'VERIFCATION',
        label: 'Verification Errors'
    },
    VALIDATION: {
        id: 'VALIDATION',
        label: 'Validation Errors'
    }
};
const signUpErrorStates = {
    [SIGNUP_UI_ERROR_CODES.GENERAL_ERROR]: {
        id: SIGNUP_UI_ERROR_CODES.GENERAL_ERROR,
        // @ts-expect-error - TS2418 - Type of computed property's value is '{ id: "GENERAL_ERROR"; category: { readonly id: "GENERAL"; readonly label: "General Errors"; }; name: string; copy: string; path: string[]; }', which is not assignable to type 'ErrorStateType'.
        category: SIGNUP_ERROR_CATEGORY.GENERAL,
        name: 'General error',
        copy: 'There was an error signing you up. Please try again, or contact us if you continue to have problems.',
        path: [
            'data',
            'users',
            SIGNUP_UI_ERROR_CODES.GENERAL_ERROR
        ]
    },
    [SIGNUP_UI_ERROR_CODES.NOT_ALLOWED]: {
        id: SIGNUP_UI_ERROR_CODES.NOT_ALLOWED,
        // @ts-expect-error - TS2418 - Type of computed property's value is '{ id: "NOT_ALLOWED"; category: { readonly id: "EMAIL"; readonly label: "Email Errors"; }; name: string; copy: string; path: string[]; }', which is not assignable to type 'ErrorStateType'.
        category: SIGNUP_ERROR_CATEGORY.EMAIL,
        name: 'Email not allowed',
        copy: "You're not allowed to access this site, please contact the admin for support.",
        path: [
            'data',
            'users',
            SIGNUP_UI_ERROR_CODES.NOT_ALLOWED
        ]
    },
    // email errors
    [SIGNUP_UI_ERROR_CODES.INVALID_EMAIL]: {
        id: SIGNUP_UI_ERROR_CODES.INVALID_EMAIL,
        // @ts-expect-error - TS2418 - Type of computed property's value is '{ id: "INVALID_EMAIL"; category: { readonly id: "EMAIL"; readonly label: "Email Errors"; }; name: string; copy: string; path: string[]; }', which is not assignable to type 'ErrorStateType'.
        category: SIGNUP_ERROR_CATEGORY.EMAIL,
        name: 'Invalid email',
        copy: 'Make sure your email exists and is properly formatted (e.g., user@domain.com).',
        path: [
            'data',
            'users',
            SIGNUP_UI_ERROR_CODES.INVALID_EMAIL
        ]
    },
    [SIGNUP_UI_ERROR_CODES.EMAIL_ALREADY_EXIST]: {
        id: SIGNUP_UI_ERROR_CODES.EMAIL_ALREADY_EXIST,
        // @ts-expect-error - TS2418 - Type of computed property's value is '{ id: "EMAIL_ALREADY_EXIST"; category: { readonly id: "EMAIL"; readonly label: "Email Errors"; }; name: string; copy: string; path: string[]; }', which is not assignable to type 'ErrorStateType'.
        category: SIGNUP_ERROR_CATEGORY.EMAIL,
        name: 'Email already exists',
        copy: 'An account with this email address already exists. Log in or reset your password.',
        path: [
            'data',
            'users',
            SIGNUP_UI_ERROR_CODES.EMAIL_ALREADY_EXIST
        ]
    },
    // invitation errors
    [SIGNUP_UI_ERROR_CODES.USE_INVITE_EMAIL]: {
        id: SIGNUP_UI_ERROR_CODES.USE_INVITE_EMAIL,
        // @ts-expect-error - TS2418 - Type of computed property's value is '{ id: "USE_INVITE_EMAIL"; category: { readonly id: "INVITE"; readonly label: "Invitation Errors"; }; name: string; copy: string; path: string[]; }', which is not assignable to type 'ErrorStateType'.
        category: SIGNUP_ERROR_CATEGORY.INVITE,
        name: 'Must use invite email',
        copy: 'Use the same email address your invitation was sent to.',
        path: [
            'data',
            'users',
            SIGNUP_UI_ERROR_CODES.USE_INVITE_EMAIL
        ]
    },
    // password errors
    [SIGNUP_UI_ERROR_CODES.INVALID_PASSWORD]: {
        id: SIGNUP_UI_ERROR_CODES.INVALID_PASSWORD,
        // @ts-expect-error - TS2418 - Type of computed property's value is '{ id: "INVALID_PASSWORD"; category: { readonly id: "PASSWORD"; readonly label: "Password Errors"; }; name: string; copy: string; path: string[]; }', which is not assignable to type 'ErrorStateType'.
        category: SIGNUP_ERROR_CATEGORY.PASSWORD,
        name: 'Invalid password',
        copy: 'Your password must be at least 8 characters.',
        path: [
            'data',
            'users',
            SIGNUP_UI_ERROR_CODES.INVALID_PASSWORD
        ]
    },
    // verification errors
    [SIGNUP_UI_ERROR_CODES.NOT_VERIFIED]: {
        id: SIGNUP_UI_ERROR_CODES.NOT_VERIFIED,
        // @ts-expect-error - TS2418 - Type of computed property's value is '{ id: "NOT_VERIFIED"; category: { readonly id: "VERIFCATION"; readonly label: "Verification Errors"; }; name: string; copy: string; path: string[]; }', which is not assignable to type 'ErrorStateType'.
        category: SIGNUP_ERROR_CATEGORY.VERFIICATION,
        name: 'Verification failed',
        copy: "We couldn't verify your account. Please try again, or contact us if you continue to have problems.",
        path: [
            'data',
            'users',
            SIGNUP_UI_ERROR_CODES.NOT_VERIFIED
        ]
    },
    [SIGNUP_UI_ERROR_CODES.EXPIRED_TOKEN]: {
        id: SIGNUP_UI_ERROR_CODES.EXPIRED_TOKEN,
        // @ts-expect-error - TS2418 - Type of computed property's value is '{ id: "EXPIRED_TOKEN"; category: { readonly id: "VERIFCATION"; readonly label: "Verification Errors"; }; name: string; copy: string; path: string[]; }', which is not assignable to type 'ErrorStateType'.
        category: SIGNUP_ERROR_CATEGORY.VERFIICATION,
        name: 'Verification expired',
        copy: 'This link has expired. A new link has been sent to your email. Please try again, or contact us if you continue to have problems.',
        path: [
            'data',
            'users',
            SIGNUP_UI_ERROR_CODES.EXPIRED_TOKEN
        ]
    },
    [SIGNUP_UI_ERROR_CODES.VALIDATION_FAILED]: {
        id: SIGNUP_UI_ERROR_CODES.VALIDATION_FAILED,
        // @ts-expect-error - TS2418 - Type of computed property's value is '{ id: "VALIDATION_FAILED"; category: { readonly id: "VALIDATION"; readonly label: "Validation Errors"; }; name: string; copy: string; path: string[]; }', which is not assignable to type 'ErrorStateType'.
        category: SIGNUP_ERROR_CATEGORY.VALIDATION,
        name: 'Validation error',
        copy: 'There was an error in some of the information provided.',
        path: [
            'data',
            'users',
            SIGNUP_UI_ERROR_CODES.VALIDATION_FAILED
        ]
    },
    [SIGNUP_UI_ERROR_CODES.REQUIRED]: {
        id: SIGNUP_UI_ERROR_CODES.REQUIRED,
        // @ts-expect-error - TS2418 - Type of computed property's value is '{ id: "REQUIRED"; category: { readonly id: "VALIDATION"; readonly label: "Validation Errors"; }; name: string; copy: string; path: string[]; }', which is not assignable to type 'ErrorStateType'.
        category: SIGNUP_ERROR_CATEGORY.VALIDATION,
        name: 'Missing information',
        copy: 'Fill out all required fields',
        path: [
            'data',
            'users',
            SIGNUP_UI_ERROR_CODES.REQUIRED
        ]
    }
};
const updatePasswordErrorStates = {
    [UPDATE_PASSWORD_UI_ERROR_CODES.GENERAL_ERROR]: {
        id: UPDATE_PASSWORD_UI_ERROR_CODES.GENERAL_ERROR,
        name: 'General error',
        copy: 'There was an error updating your password. Please try again, or contact us if you continue to have problems.',
        path: [
            'data',
            'users',
            UPDATE_PASSWORD_UI_ERROR_CODES.GENERAL_ERROR
        ]
    },
    [UPDATE_PASSWORD_UI_ERROR_CODES.WEAK_PASSWORD]: {
        id: UPDATE_PASSWORD_UI_ERROR_CODES.WEAK_PASSWORD,
        name: 'Weak password',
        copy: 'Your password must be at least 8 characters.',
        path: [
            'data',
            'users',
            UPDATE_PASSWORD_UI_ERROR_CODES.WEAK_PASSWORD
        ]
    }
};
const resetPasswordErrorStates = {
    [RESET_PASSWORD_UI_ERROR_CODES.GENERAL_ERROR]: {
        id: RESET_PASSWORD_UI_ERROR_CODES.GENERAL_ERROR,
        name: 'General error',
        copy: 'There was an error resetting your password. Please try again, or contact us if you continue to have problems.',
        path: [
            'data',
            'users',
            RESET_PASSWORD_UI_ERROR_CODES.GENERAL_ERROR
        ]
    }
};
const UPDATE_ACCOUNT_ERROR_CODES = {
    GENERAL_ERROR: 'GENERAL_ERROR'
};
const updateAccountErrorStates = {
    [UPDATE_ACCOUNT_ERROR_CODES.GENERAL_ERROR]: {
        id: UPDATE_ACCOUNT_ERROR_CODES.GENERAL_ERROR,
        name: 'General error',
        copy: 'There was an error updating your account. Please try again, or contact us if you continue to have problems.',
        path: [
            'data',
            'users',
            UPDATE_ACCOUNT_ERROR_CODES.GENERAL_ERROR
        ]
    }
};

//# sourceMappingURL=data:application/json;base64,

}),
7462: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ACCESS_GROUP_ADMISSION_TYPE: function() {
        return ACCESS_GROUP_ADMISSION_TYPE;
    },
    ACCESS_GROUP_FREE_TYPE: function() {
        return ACCESS_GROUP_FREE_TYPE;
    },
    ACCESS_GROUP_INLINE_PRODUCT_FIELD_SLUG: function() {
        return ACCESS_GROUP_INLINE_PRODUCT_FIELD_SLUG;
    },
    BASIC_MAX_NUM_USERS: function() {
        return BASIC_MAX_NUM_USERS;
    },
    BUSINESS_MAX_NUM_USERS: function() {
        return BUSINESS_MAX_NUM_USERS;
    },
    CONFIRM_UNSAVED_CHANGES_COPY: function() {
        return CONFIRM_UNSAVED_CHANGES_COPY;
    },
    DEFAULT_SESSION_DURATION_IN_MS: function() {
        return DEFAULT_SESSION_DURATION_IN_MS;
    },
    DEFAULT_SESSION_TOKEN_DURATION_IN_MS: function() {
        return DEFAULT_SESSION_TOKEN_DURATION_IN_MS;
    },
    DEFAULT_STYLES: function() {
        return DEFAULT_STYLES;
    },
    DEFAULT_TOKEN_AGE_MS: function() {
        return DEFAULT_TOKEN_AGE_MS;
    },
    DEFAULT_USER_FIELDS: function() {
        return DEFAULT_USER_FIELDS;
    },
    ECOMM_PLUS_MAX_NUM_USERS: function() {
        return ECOMM_PLUS_MAX_NUM_USERS;
    },
    ECOMM_STANDARD_MAX_NUM_USERS: function() {
        return ECOMM_STANDARD_MAX_NUM_USERS;
    },
    EMAIL_TEMPLATE_TYPES: function() {
        return EMAIL_TEMPLATE_TYPES;
    },
    EXCEEDS_MAX_FILE_SIZE_ERROR: function() {
        return EXCEEDS_MAX_FILE_SIZE_ERROR;
    },
    EXCEEDS_MAX_IMAGE_SIZE_ERROR: function() {
        return EXCEEDS_MAX_IMAGE_SIZE_ERROR;
    },
    HARD_LIMIT_MAX_NUM_USERS: function() {
        return HARD_LIMIT_MAX_NUM_USERS;
    },
    KEY_FROM_RESERVED_USER_FIELD: function() {
        return KEY_FROM_RESERVED_USER_FIELD;
    },
    LOGGEDIN_COOKIE_NAME: function() {
        return LOGGEDIN_COOKIE_NAME;
    },
    MAX_GROUP_ID_LENGTH: function() {
        return MAX_GROUP_ID_LENGTH;
    },
    MAX_NUM_GROUPS: function() {
        return MAX_NUM_GROUPS;
    },
    MAX_UPDATE_USER_DATA_FIELDS: function() {
        return MAX_UPDATE_USER_DATA_FIELDS;
    },
    MAX_USER_DATA_FIELDS: function() {
        return MAX_USER_DATA_FIELDS;
    },
    MEMBERSHIPS_EMAIL_KEYS: function() {
        return MEMBERSHIPS_EMAIL_KEYS;
    },
    MIN_GROUP_ID_LENGTH: function() {
        return MIN_GROUP_ID_LENGTH;
    },
    NAMES_FROM_USER_FIELDS: function() {
        return NAMES_FROM_USER_FIELDS;
    },
    NEW_USER_FIELD_ID: function() {
        return NEW_USER_FIELD_ID;
    },
    NO_REQUIRED_ATTRIBUTE: function() {
        return NO_REQUIRED_ATTRIBUTE;
    },
    PASSWORD_MAX_LENGTH: function() {
        return PASSWORD_MAX_LENGTH;
    },
    PASSWORD_MIN_LENGTH: function() {
        return PASSWORD_MIN_LENGTH;
    },
    RESERVED_USER_FIELDS: function() {
        return RESERVED_USER_FIELDS;
    },
    RESERVED_USER_PREFIX: function() {
        return RESERVED_USER_PREFIX;
    },
    SESSION_COOKIE_NAME: function() {
        return SESSION_COOKIE_NAME;
    },
    SETUP_GUIDE_ALL_KEYS: function() {
        return SETUP_GUIDE_ALL_KEYS;
    },
    SETUP_GUIDE_KEYS: function() {
        return SETUP_GUIDE_KEYS;
    },
    STARTER_MAX_NUM_USERS: function() {
        return STARTER_MAX_NUM_USERS;
    },
    SUBSCRIPTION_EMAIL_TYPES: function() {
        return SUBSCRIPTION_EMAIL_TYPES;
    },
    SUBSCRIPTION_USER_LIMITS: function() {
        return SUBSCRIPTION_USER_LIMITS;
    },
    TEMP_STATE_PATH: function() {
        return TEMP_STATE_PATH;
    },
    TEXT_INPUT_TYPE_TO_FIELD_TYPE: function() {
        return TEXT_INPUT_TYPE_TO_FIELD_TYPE;
    },
    USER_ACCESS_META_OPTIONS: function() {
        return USER_ACCESS_META_OPTIONS;
    },
    USER_CSV_IMPORT_STATUS_MAX_TRIES: function() {
        return USER_CSV_IMPORT_STATUS_MAX_TRIES;
    },
    USER_CSV_IMPORT_STATUS_POLLING_INTERVAL: function() {
        return USER_CSV_IMPORT_STATUS_POLLING_INTERVAL;
    },
    USER_FIELD_DEFAULTS: function() {
        return USER_FIELD_DEFAULTS;
    },
    USER_FIELD_FORM_ID: function() {
        return USER_FIELD_FORM_ID;
    },
    USER_PAGE_SIZE: function() {
        return USER_PAGE_SIZE;
    },
    USER_STATUSES: function() {
        return USER_STATUSES;
    },
    USYS_CONTEXT_PATH: function() {
        return USYS_CONTEXT_PATH;
    },
    USYS_DATA_ATTRS: function() {
        return USYS_DATA_ATTRS;
    },
    USYS_DOM_CLASS_NAMES: function() {
        return USYS_DOM_CLASS_NAMES;
    },
    USYS_FIELD_PATH: function() {
        return USYS_FIELD_PATH;
    },
    USYS_FORM_TYPES: function() {
        return USYS_FORM_TYPES;
    },
    USYS_INPUT_SIGN_UP_IDS: function() {
        return USYS_INPUT_SIGN_UP_IDS;
    },
    USYS_INPUT_TYPES: function() {
        return USYS_INPUT_TYPES;
    },
    USYS_PAGE_SETTINGS: function() {
        return USYS_PAGE_SETTINGS;
    },
    USYS_PAGE_UTIL_KEYS: function() {
        return USYS_PAGE_UTIL_KEYS;
    },
    USYS_RESERVED_SLUGS: function() {
        return USYS_RESERVED_SLUGS;
    },
    USYS_TOKEN_TYPES: function() {
        return USYS_TOKEN_TYPES;
    },
    USYS_USER_STATES: function() {
        return USYS_USER_STATES;
    },
    USYS_UTILITY_KEYS: function() {
        return USYS_UTILITY_KEYS;
    }
});
const _utils = __webpack_require__(1242);
const _types = _export_star(__webpack_require__(29089), exports);
_export_star(__webpack_require__(33001), exports);
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
const RESERVED_USER_PREFIX = 'wf-user-field-';
const RESERVED_USER_FIELDS = {
    name: RESERVED_USER_PREFIX + 'name',
    acceptPrivacy: RESERVED_USER_PREFIX + 'accept-privacy',
    acceptCommunications: RESERVED_USER_PREFIX + 'accept-communications'
};
const KEY_FROM_RESERVED_USER_FIELD = {
    [RESERVED_USER_PREFIX + 'name']: 'name',
    [RESERVED_USER_PREFIX + 'accept-privacy']: 'acceptPrivacy',
    [RESERVED_USER_PREFIX + 'accept-communications']: 'acceptCommunications'
};
const NAMES_FROM_USER_FIELDS = {
    [RESERVED_USER_PREFIX + 'name']: 'Name',
    [RESERVED_USER_PREFIX + 'accept-privacy']: 'Accept privacy policy',
    [RESERVED_USER_PREFIX + 'accept-communications']: 'Accept communications',
    PRIVACY_POLICY: 'Accept privacy policy',
    PASSWORD: 'Password',
    EMAIL: 'Email'
};
const TEXT_INPUT_TYPE_TO_FIELD_TYPE = {
    text: 'PlainText',
    password: 'Password',
    email: 'Email',
    number: 'PlainText',
    tel: 'PlainText'
};
const USYS_UTILITY_KEYS = {
    'usys-log-in': 'usys-log-in',
    'usys-sign-up': 'usys-sign-up',
    'usys-reset-password': 'usys-reset-password',
    'usys-update-password': 'usys-update-password',
    'usys-access-denied': 'usys-access-denied',
    'usys-user-account': 'usys-user-account'
};
const USYS_DATA_ATTRS = {
    formType: 'data-wf-user-form-type',
    inputType: 'data-wf-user-form-input-type',
    logout: 'data-wf-user-logout',
    login: 'data-wf-user-login',
    formError: 'data-wf-user-form-error',
    redirectUrl: 'data-wf-user-form-redirect',
    formVerification: 'data-wf-user-form-verification',
    userSubscriptions: 'data-wf-user-subscriptions-list',
    userSubscriptionsEmptyState: 'data-wf-user-subscriptions-empty',
    userAccount: 'data-wf-user-account',
    subscriptionCancel: 'data-wf-user-subscription-cancel',
    userId: 'data-wf-user-id',
    field: 'data-wf-user-field',
    fieldType: 'data-wf-user-field-type',
    fileUploadKey: 'data-wf-user-file-upload-key',
    unsavedFileUploadKey: 'data-wf-unsaved-user-file-upload-key'
};
const USYS_DOM_CLASS_NAMES = {
    formSuccess: 'w-form-success',
    formVerfication: 'w-form-verification',
    formError: 'w-form-fail'
};
const USYS_FORM_TYPES = {
    login: 'login',
    signup: 'signup',
    updatePassword: 'updatePassword',
    resetPassword: 'resetPassword',
    account: 'userAccount'
};
const USYS_INPUT_TYPES = {
    email: 'email',
    name: 'name',
    password: 'password',
    acceptPrivacy: 'accept-privacy'
};
const USYS_INPUT_SIGN_UP_IDS = {
    email: 'wf-sign-up-email',
    name: 'wf-sign-up-name',
    password: 'wf-sign-up-password',
    acceptPrivacy: 'wf-sign-up-accept-privacy',
    acceptCommunications: 'wf-sign-up-accept-communications'
};
const USYS_USER_STATES = {
    loggedIn: 'loggedIn',
    loggedOut: 'loggedOut'
};
const USYS_PAGE_SETTINGS = {
    login: {
        parent: null,
        sortPos: 0,
        utilKey: 'usys-log-in',
        slug: 'log-in',
        title: 'Log In'
    },
    signup: {
        parent: null,
        sortPos: 1,
        utilKey: 'usys-sign-up',
        slug: 'sign-up',
        title: 'Sign Up'
    },
    resetPassword: {
        parent: null,
        sortPos: 2,
        utilKey: 'usys-reset-password',
        slug: 'reset-password',
        title: 'Reset Password'
    },
    updatePassword: {
        parent: null,
        sortPos: 3,
        utilKey: 'usys-update-password',
        slug: 'update-password',
        title: 'Update Password'
    },
    accessDenied: {
        parent: null,
        sortPos: 4,
        utilKey: 'usys-access-denied',
        slug: 'access-denied',
        title: 'Access Denied'
    },
    userAccount: {
        parent: null,
        sortPos: 5,
        utilKey: 'usys-user-account',
        slug: 'user-account',
        title: 'User Account'
    }
};
const USYS_RESERVED_SLUGS = (0, _utils.values)(USYS_PAGE_SETTINGS).map((pageSettings)=>pageSettings.slug);
const USYS_PAGE_UTIL_KEYS = (0, _utils.values)(USYS_PAGE_SETTINGS).map((pageSettings)=>pageSettings.utilKey);
const DEFAULT_STYLES = {
    accentColor: '#468EE5',
    bgColor: '#F5F6F7',
    includeWfBrand: true
};
const PASSWORD_MIN_LENGTH = 8;
const PASSWORD_MAX_LENGTH = 72;
// Helper constants.
const SECOND = 1000;
const MINUTE = 60 * SECOND;
const HOUR = 60 * MINUTE;
const DAY = 24 * HOUR;
const SESSION_COOKIE_NAME = 'wf_sid';
const LOGGEDIN_COOKIE_NAME = 'wf_loggedin';
const DEFAULT_SESSION_DURATION_IN_MS = 7 * DAY;
const DEFAULT_SESSION_TOKEN_DURATION_IN_MS = 4 * HOUR;
const DEFAULT_TOKEN_AGE_MS = HOUR;
const STARTER_MAX_NUM_USERS = 100;
const BASIC_MAX_NUM_USERS = 20000;
const BUSINESS_MAX_NUM_USERS = 20000;
const ECOMM_STANDARD_MAX_NUM_USERS = 20000;
const ECOMM_PLUS_MAX_NUM_USERS = 20000;
const HARD_LIMIT_MAX_NUM_USERS = 100 * 1000;
const SUBSCRIPTION_USER_LIMITS = {
    free: STARTER_MAX_NUM_USERS,
    static: BASIC_MAX_NUM_USERS,
    cms: BUSINESS_MAX_NUM_USERS,
    business: BUSINESS_MAX_NUM_USERS,
    ecommerce_standard: ECOMM_STANDARD_MAX_NUM_USERS,
    ecommerce_plus: ECOMM_PLUS_MAX_NUM_USERS,
    ecommerce_advanced: BUSINESS_MAX_NUM_USERS,
    enterprise: BUSINESS_MAX_NUM_USERS,
    enterprise_lite: BUSINESS_MAX_NUM_USERS
};
const MAX_NUM_GROUPS = 20;
const MIN_GROUP_ID_LENGTH = 2;
const MAX_GROUP_ID_LENGTH = 2;
const USYS_TOKEN_TYPES = {
    inviteUser: 'inviteUser',
    resetPassword: 'resetPassword',
    verifyEmail: 'verifyEmail'
};
const ACCESS_GROUP_INLINE_PRODUCT_FIELD_SLUG = 'access-group-membership-product';
const ACCESS_GROUP_ADMISSION_TYPE = {
    free: 'free',
    paid: 'paid'
};
const ACCESS_GROUP_FREE_TYPE = {
    all: 'all',
    admin: 'admin'
};
const SUBSCRIPTION_EMAIL_TYPES = {
    PAYMENT_FAILED: 'paymentFailed',
    PAYMENT_SUCCESSFUL: 'paymentSuccessful',
    SUBSCRIPTION_CANCELED: 'subscriptionCanceled',
    VERIFY_PAYMENT: 'verifyPayment'
};
const MEMBERSHIPS_EMAIL_KEYS = {
    invite: 'invite',
    resetPassword: 'resetPassword',
    updatedPassword: 'updatedPassword',
    welcome: 'welcome',
    verify: 'verify'
};
const EMAIL_TEMPLATE_TYPES = {
    invite: 'MEMBERSHIPS_INVITE',
    resetPassword: 'MEMBERSHIPS_RESET_PASSWORD',
    updatedPassword: 'MEMBERSHIPS_UPDATED_PASSWORD',
    verify: 'MEMBERSHIPS_VERIFY',
    welcome: 'MEMBERSHIPS_WELCOME'
};
const CONFIRM_UNSAVED_CHANGES_COPY = {
    title: 'Continue without saving?',
    content: 'Your changes will be lost.',
    iconType: 'warning',
    submit: {
        label: 'Continue',
        intent: 'danger'
    },
    cancel: {
        label: 'Cancel',
        intent: 'default'
    }
};
const USER_FIELD_FORM_ID = 'UserFieldForm';
const NEW_USER_FIELD_ID = 'mint-user-field';
const USER_FIELD_DEFAULTS = {
    PlainText: {
        id: NEW_USER_FIELD_ID,
        name: '',
        slug: '',
        required: false,
        type: 'PlainText',
        validations: {}
    },
    Email: {
        id: NEW_USER_FIELD_ID,
        name: '',
        slug: '',
        required: false,
        type: 'Email',
        validations: {}
    },
    Bool: {
        id: NEW_USER_FIELD_ID,
        name: '',
        slug: '',
        required: false,
        type: 'Bool',
        validations: {}
    },
    FileRef: {
        id: NEW_USER_FIELD_ID,
        name: '',
        slug: '',
        required: false,
        type: 'FileRef',
        validations: {}
    },
    Option: {
        id: NEW_USER_FIELD_ID,
        name: '',
        slug: '',
        required: false,
        type: 'Option',
        validations: {
            options: []
        }
    },
    Password: {
        id: NEW_USER_FIELD_ID,
        name: 'Password',
        slug: '',
        required: true,
        type: 'Password',
        validations: {}
    },
    Number: {
        id: NEW_USER_FIELD_ID,
        name: '',
        slug: '',
        required: false,
        type: 'Number',
        validations: {
            min: 0,
            step: 1
        }
    },
    Link: {
        id: NEW_USER_FIELD_ID,
        name: '',
        slug: '',
        required: false,
        type: 'Link',
        validations: {}
    }
};
const DEFAULT_USER_FIELDS = [
    {
        id: 'name',
        name: 'Name',
        required: false,
        slug: 'name',
        type: 'PlainText',
        validations: {}
    },
    {
        id: 'email',
        name: 'Email',
        required: true,
        slug: 'email',
        type: 'Email',
        validations: {}
    },
    {
        id: 'password',
        name: 'Password',
        required: true,
        slug: 'password',
        type: 'Password',
        validations: {}
    },
    {
        id: 'acceptPrivacy',
        name: 'Accept privacy',
        required: false,
        slug: 'accept-privacy',
        type: 'Bool',
        validations: {}
    },
    {
        id: 'acceptCommunications',
        name: 'Accept communications',
        required: false,
        slug: 'accept-communications',
        type: 'Bool',
        validations: {}
    }
];
const SETUP_GUIDE_KEYS = {
    hasVisitedAccessDeniedPage: 'hasVisitedAccessDeniedPage',
    hasVisitedLoginPage: 'hasVisitedLoginPage',
    hasVisitedSignUpPage: 'hasVisitedSignUpPage',
    hasVisitedUserAccountSettings: 'hasVisitedUserAccountSettings',
    hasVisitedUserAccountPage: 'hasVisitedUserAccountPage'
};
const SETUP_GUIDE_ALL_KEYS = {
    ...SETUP_GUIDE_KEYS,
    hasHostingPlan: 'hasHostingPlan',
    hasEcommerce: 'hasEcommerce',
    hasEnabledSSL: 'hasEnabledSSL',
    hasUsers: 'hasUsers',
    hasAccessGroups: 'hasAccessGroups',
    hasRestrictedContent: 'hasRestrictedContent',
    hasRestrictedProducts: 'hasRestrictedProducts'
};
const MAX_USER_DATA_FIELDS = 20;
const MAX_UPDATE_USER_DATA_FIELDS = MAX_USER_DATA_FIELDS + 2;
const USYS_FIELD_PATH = [
    {
        in: 'Record',
        at: 'users'
    },
    {
        in: 'Record',
        at: 'field'
    }
];
const USYS_CONTEXT_PATH = [
    {
        in: 'Record',
        at: 'users'
    },
    {
        in: 'Record',
        at: 'context'
    }
];
const TEMP_PATH = [
    {
        in: 'Record',
        at: 'temp'
    }
];
const TEMP_STATE_PATH = [
    ...TEMP_PATH,
    {
        in: 'Record',
        at: 'state'
    }
];
const USER_ACCESS_META_OPTIONS = [
    _types.USYS_ACCESS_TYPES.LOGGED_IN
];
const EXCEEDS_MAX_FILE_SIZE_ERROR = 'Maximum size allowed for a file upload is 10000kb / 10mb.';
const EXCEEDS_MAX_IMAGE_SIZE_ERROR = 'Maximum size allowed for a image upload is 4000kb / 4mb.';
const NO_REQUIRED_ATTRIBUTE = [
    'FileRef',
    'Bool'
];
const USER_STATUSES = {
    invited: 'Invited',
    verified: 'Verified',
    unverified: 'Unverified'
};
const USER_PAGE_SIZE = 100;
// User CSV Import constants
const USER_CSV_IMPORT_STATUS_POLLING_TIMEOUT = 20 * 60 * 1000;
const USER_CSV_IMPORT_STATUS_POLLING_INTERVAL = 5000;
const USER_CSV_IMPORT_STATUS_MAX_TRIES = Math.floor(USER_CSV_IMPORT_STATUS_POLLING_TIMEOUT / USER_CSV_IMPORT_STATUS_POLLING_INTERVAL);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Rmxvd0xhbmd9IGZyb20gJ2Zsb3ctdG8tdHlwZXNjcmlwdC1jb2RlbW9kJztcbmltcG9ydCB7dmFsdWVzfSBmcm9tICdAcGFja2FnZXMvdXRpbGl0aWVzL2ZwL3V0aWxzJztcbmltcG9ydCB7dHlwZSBVc2VyQWNjZXNzTWV0YSwgVVNZU19BQ0NFU1NfVFlQRVN9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHt0eXBlIEV4cHJlc3Npb25QYXRofSBmcm9tICdAcGFja2FnZXMvc3lzdGVtcy93ZmRsJztcbmV4cG9ydCAqIGZyb20gJy4vZXJyb3JTdGF0ZXMnO1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIFVzeXNVdGlsS2V5VHlwZSA9IGtleW9mIHR5cGVvZiBVU1lTX1VUSUxJVFlfS0VZUztcbmV4cG9ydCB0eXBlIFVzeXNGb3JtVHlwZSA9IGtleW9mIHR5cGVvZiBVU1lTX0ZPUk1fVFlQRVM7XG5leHBvcnQgdHlwZSBNZW1iZXJzaGlwc0VtYWlsVHlwZSA9IGtleW9mIHR5cGVvZiBNRU1CRVJTSElQU19FTUFJTF9LRVlTO1xuZXhwb3J0IHR5cGUgVXNlcnNTZXR1cEd1aWRlVHlwZSA9IEZsb3dMYW5nLk9iak1hcDxcbiAgdHlwZW9mIFNFVFVQX0dVSURFX0tFWVMsXG4gICgpID0+IGJvb2xlYW5cbj47XG5leHBvcnQgdHlwZSBVc2VyU2V0dXBHdWlkZUtleXMgPSBrZXlvZiB0eXBlb2YgU0VUVVBfR1VJREVfS0VZUztcbmV4cG9ydCB0eXBlIFVzeXNVdGlsS2V5TWFwPFY+ID0gRmxvd0xhbmcuT2JqTWFwPFxuICB0eXBlb2YgVVNZU19VVElMSVRZX0tFWVMsXG4gIDxUPihhcmcxOiBUKSA9PiBWXG4+O1xuZXhwb3J0IHR5cGUgVXNlclN0YXR1c2VzID0ga2V5b2YgdHlwZW9mIFVTRVJfU1RBVFVTRVM7XG5cbmV4cG9ydCBjb25zdCBSRVNFUlZFRF9VU0VSX1BSRUZJWCA9ICd3Zi11c2VyLWZpZWxkLSc7XG5cbmV4cG9ydCBjb25zdCBSRVNFUlZFRF9VU0VSX0ZJRUxEUyA9IHtcbiAgbmFtZTogUkVTRVJWRURfVVNFUl9QUkVGSVggKyAnbmFtZScsXG4gIGFjY2VwdFByaXZhY3k6IFJFU0VSVkVEX1VTRVJfUFJFRklYICsgJ2FjY2VwdC1wcml2YWN5JyxcbiAgYWNjZXB0Q29tbXVuaWNhdGlvbnM6IFJFU0VSVkVEX1VTRVJfUFJFRklYICsgJ2FjY2VwdC1jb21tdW5pY2F0aW9ucycsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgS0VZX0ZST01fUkVTRVJWRURfVVNFUl9GSUVMRCA9IHtcbiAgW1JFU0VSVkVEX1VTRVJfUFJFRklYICsgJ25hbWUnXTogJ25hbWUnLFxuICBbUkVTRVJWRURfVVNFUl9QUkVGSVggKyAnYWNjZXB0LXByaXZhY3knXTogJ2FjY2VwdFByaXZhY3knLFxuICBbUkVTRVJWRURfVVNFUl9QUkVGSVggKyAnYWNjZXB0LWNvbW11bmljYXRpb25zJ106ICdhY2NlcHRDb21tdW5pY2F0aW9ucycsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgTkFNRVNfRlJPTV9VU0VSX0ZJRUxEUyA9IHtcbiAgW1JFU0VSVkVEX1VTRVJfUFJFRklYICsgJ25hbWUnXTogJ05hbWUnLFxuICBbUkVTRVJWRURfVVNFUl9QUkVGSVggKyAnYWNjZXB0LXByaXZhY3knXTogJ0FjY2VwdCBwcml2YWN5IHBvbGljeScsXG4gIFtSRVNFUlZFRF9VU0VSX1BSRUZJWCArICdhY2NlcHQtY29tbXVuaWNhdGlvbnMnXTogJ0FjY2VwdCBjb21tdW5pY2F0aW9ucycsXG4gIFBSSVZBQ1lfUE9MSUNZOiAnQWNjZXB0IHByaXZhY3kgcG9saWN5JyxcbiAgUEFTU1dPUkQ6ICdQYXNzd29yZCcsXG4gIEVNQUlMOiAnRW1haWwnLFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IFRFWFRfSU5QVVRfVFlQRV9UT19GSUVMRF9UWVBFID0ge1xuICB0ZXh0OiAnUGxhaW5UZXh0JyxcbiAgcGFzc3dvcmQ6ICdQYXNzd29yZCcsXG4gIGVtYWlsOiAnRW1haWwnLFxuICBudW1iZXI6ICdQbGFpblRleHQnLFxuICB0ZWw6ICdQbGFpblRleHQnLFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IFVTWVNfVVRJTElUWV9LRVlTID0ge1xuICAndXN5cy1sb2ctaW4nOiAndXN5cy1sb2ctaW4nLFxuICAndXN5cy1zaWduLXVwJzogJ3VzeXMtc2lnbi11cCcsXG4gICd1c3lzLXJlc2V0LXBhc3N3b3JkJzogJ3VzeXMtcmVzZXQtcGFzc3dvcmQnLFxuICAndXN5cy11cGRhdGUtcGFzc3dvcmQnOiAndXN5cy11cGRhdGUtcGFzc3dvcmQnLFxuICAndXN5cy1hY2Nlc3MtZGVuaWVkJzogJ3VzeXMtYWNjZXNzLWRlbmllZCcsXG4gICd1c3lzLXVzZXItYWNjb3VudCc6ICd1c3lzLXVzZXItYWNjb3VudCcsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgVVNZU19EQVRBX0FUVFJTID0ge1xuICBmb3JtVHlwZTogJ2RhdGEtd2YtdXNlci1mb3JtLXR5cGUnLFxuICBpbnB1dFR5cGU6ICdkYXRhLXdmLXVzZXItZm9ybS1pbnB1dC10eXBlJyxcbiAgbG9nb3V0OiAnZGF0YS13Zi11c2VyLWxvZ291dCcsXG4gIGxvZ2luOiAnZGF0YS13Zi11c2VyLWxvZ2luJyxcbiAgZm9ybUVycm9yOiAnZGF0YS13Zi11c2VyLWZvcm0tZXJyb3InLFxuICByZWRpcmVjdFVybDogJ2RhdGEtd2YtdXNlci1mb3JtLXJlZGlyZWN0JyxcbiAgZm9ybVZlcmlmaWNhdGlvbjogJ2RhdGEtd2YtdXNlci1mb3JtLXZlcmlmaWNhdGlvbicsXG4gIHVzZXJTdWJzY3JpcHRpb25zOiAnZGF0YS13Zi11c2VyLXN1YnNjcmlwdGlvbnMtbGlzdCcsXG4gIHVzZXJTdWJzY3JpcHRpb25zRW1wdHlTdGF0ZTogJ2RhdGEtd2YtdXNlci1zdWJzY3JpcHRpb25zLWVtcHR5JyxcbiAgdXNlckFjY291bnQ6ICdkYXRhLXdmLXVzZXItYWNjb3VudCcsXG4gIHN1YnNjcmlwdGlvbkNhbmNlbDogJ2RhdGEtd2YtdXNlci1zdWJzY3JpcHRpb24tY2FuY2VsJyxcbiAgdXNlcklkOiAnZGF0YS13Zi11c2VyLWlkJyxcbiAgZmllbGQ6ICdkYXRhLXdmLXVzZXItZmllbGQnLFxuICBmaWVsZFR5cGU6ICdkYXRhLXdmLXVzZXItZmllbGQtdHlwZScsXG4gIGZpbGVVcGxvYWRLZXk6ICdkYXRhLXdmLXVzZXItZmlsZS11cGxvYWQta2V5JyxcbiAgdW5zYXZlZEZpbGVVcGxvYWRLZXk6ICdkYXRhLXdmLXVuc2F2ZWQtdXNlci1maWxlLXVwbG9hZC1rZXknLFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IFVTWVNfRE9NX0NMQVNTX05BTUVTID0ge1xuICBmb3JtU3VjY2VzczogJ3ctZm9ybS1zdWNjZXNzJyxcbiAgZm9ybVZlcmZpY2F0aW9uOiAndy1mb3JtLXZlcmlmaWNhdGlvbicsXG4gIGZvcm1FcnJvcjogJ3ctZm9ybS1mYWlsJyxcbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCBjb25zdCBVU1lTX0ZPUk1fVFlQRVMgPSB7XG4gIGxvZ2luOiAnbG9naW4nLFxuICBzaWdudXA6ICdzaWdudXAnLFxuICB1cGRhdGVQYXNzd29yZDogJ3VwZGF0ZVBhc3N3b3JkJyxcbiAgcmVzZXRQYXNzd29yZDogJ3Jlc2V0UGFzc3dvcmQnLFxuICBhY2NvdW50OiAndXNlckFjY291bnQnLFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IFVTWVNfSU5QVVRfVFlQRVMgPSB7XG4gIGVtYWlsOiAnZW1haWwnLFxuICBuYW1lOiAnbmFtZScsXG4gIHBhc3N3b3JkOiAncGFzc3dvcmQnLFxuICBhY2NlcHRQcml2YWN5OiAnYWNjZXB0LXByaXZhY3knLFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IFVTWVNfSU5QVVRfU0lHTl9VUF9JRFMgPSB7XG4gIGVtYWlsOiAnd2Ytc2lnbi11cC1lbWFpbCcsXG4gIG5hbWU6ICd3Zi1zaWduLXVwLW5hbWUnLFxuICBwYXNzd29yZDogJ3dmLXNpZ24tdXAtcGFzc3dvcmQnLFxuICBhY2NlcHRQcml2YWN5OiAnd2Ytc2lnbi11cC1hY2NlcHQtcHJpdmFjeScsXG4gIGFjY2VwdENvbW11bmljYXRpb25zOiAnd2Ytc2lnbi11cC1hY2NlcHQtY29tbXVuaWNhdGlvbnMnLFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IFVTWVNfVVNFUl9TVEFURVMgPSB7XG4gIGxvZ2dlZEluOiAnbG9nZ2VkSW4nLFxuICBsb2dnZWRPdXQ6ICdsb2dnZWRPdXQnLFxufSBhcyBjb25zdDtcblxuLy8gU291cmNlIG9mIHRydXRoIGZvciBhbGwgdXNlciBzeXN0ZW1zIHRlbXBsYXRlIHBhZ2Ugc2V0dGluZ3NcbmV4cG9ydCBjb25zdCBVU1lTX1BBR0VfU0VUVElOR1MgPSB7XG4gIGxvZ2luOiB7XG4gICAgcGFyZW50OiBudWxsLFxuICAgIHNvcnRQb3M6IDAsXG4gICAgdXRpbEtleTogJ3VzeXMtbG9nLWluJyxcbiAgICBzbHVnOiAnbG9nLWluJyxcbiAgICB0aXRsZTogJ0xvZyBJbicsXG4gIH0sXG4gIHNpZ251cDoge1xuICAgIHBhcmVudDogbnVsbCxcbiAgICBzb3J0UG9zOiAxLFxuICAgIHV0aWxLZXk6ICd1c3lzLXNpZ24tdXAnLFxuICAgIHNsdWc6ICdzaWduLXVwJyxcbiAgICB0aXRsZTogJ1NpZ24gVXAnLFxuICB9LFxuICByZXNldFBhc3N3b3JkOiB7XG4gICAgcGFyZW50OiBudWxsLFxuICAgIHNvcnRQb3M6IDIsXG4gICAgdXRpbEtleTogJ3VzeXMtcmVzZXQtcGFzc3dvcmQnLFxuICAgIHNsdWc6ICdyZXNldC1wYXNzd29yZCcsXG4gICAgdGl0bGU6ICdSZXNldCBQYXNzd29yZCcsXG4gIH0sXG4gIHVwZGF0ZVBhc3N3b3JkOiB7XG4gICAgcGFyZW50OiBudWxsLFxuICAgIHNvcnRQb3M6IDMsXG4gICAgdXRpbEtleTogJ3VzeXMtdXBkYXRlLXBhc3N3b3JkJyxcbiAgICBzbHVnOiAndXBkYXRlLXBhc3N3b3JkJyxcbiAgICB0aXRsZTogJ1VwZGF0ZSBQYXNzd29yZCcsXG4gIH0sXG4gIGFjY2Vzc0RlbmllZDoge1xuICAgIHBhcmVudDogbnVsbCxcbiAgICBzb3J0UG9zOiA0LFxuICAgIHV0aWxLZXk6ICd1c3lzLWFjY2Vzcy1kZW5pZWQnLFxuICAgIHNsdWc6ICdhY2Nlc3MtZGVuaWVkJyxcbiAgICB0aXRsZTogJ0FjY2VzcyBEZW5pZWQnLFxuICB9LFxuICB1c2VyQWNjb3VudDoge1xuICAgIHBhcmVudDogbnVsbCxcbiAgICBzb3J0UG9zOiA1LFxuICAgIHV0aWxLZXk6ICd1c3lzLXVzZXItYWNjb3VudCcsXG4gICAgc2x1ZzogJ3VzZXItYWNjb3VudCcsXG4gICAgdGl0bGU6ICdVc2VyIEFjY291bnQnLFxuICB9LFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IFVTWVNfUkVTRVJWRURfU0xVR1MgPSB2YWx1ZXMoVVNZU19QQUdFX1NFVFRJTkdTKS5tYXA8c3RyaW5nPihcbiAgKHBhZ2VTZXR0aW5ncykgPT4gcGFnZVNldHRpbmdzLnNsdWdcbik7XG5cbmV4cG9ydCBjb25zdCBVU1lTX1BBR0VfVVRJTF9LRVlTID0gdmFsdWVzKFVTWVNfUEFHRV9TRVRUSU5HUykubWFwPHN0cmluZz4oXG4gIChwYWdlU2V0dGluZ3MpID0+IHBhZ2VTZXR0aW5ncy51dGlsS2V5XG4pO1xuXG4vLyBmb3IgYnJhbmQgc3R5bGluZyBpbiBlbWFpbHNcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NUWUxFUyA9IHtcbiAgYWNjZW50Q29sb3I6ICcjNDY4RUU1JyxcbiAgYmdDb2xvcjogJyNGNUY2RjcnLFxuICBpbmNsdWRlV2ZCcmFuZDogdHJ1ZSxcbn0gYXMgY29uc3Q7XG5cbi8vIFRoZSBsZW5ndGggZXhwcmVzc2VkIGhlcmUgaXMgaW4gYnl0ZXMsIHRoYXQgbWVhbnMgdGhhdCBzb21lIGNoYXJhY3RlcnMgd2lsbFxuLy8gY291bnQgYXMgbW9yZSB0aGFuIDEgYnl0ZSwgbGlrZTogw6EsIMOpLCDDrSwgw7MsIMO6LCBldGMuXG5leHBvcnQgY29uc3QgUEFTU1dPUkRfTUlOX0xFTkdUSCA9IDg7XG5leHBvcnQgY29uc3QgUEFTU1dPUkRfTUFYX0xFTkdUSCA9IDcyO1xuXG4vLyBIZWxwZXIgY29uc3RhbnRzLlxuY29uc3QgU0VDT05EID0gMTAwMDtcbmNvbnN0IE1JTlVURSA9IDYwICogU0VDT05EO1xuY29uc3QgSE9VUiA9IDYwICogTUlOVVRFO1xuY29uc3QgREFZID0gMjQgKiBIT1VSO1xuXG5leHBvcnQgY29uc3QgU0VTU0lPTl9DT09LSUVfTkFNRSA9ICd3Zl9zaWQnO1xuZXhwb3J0IGNvbnN0IExPR0dFRElOX0NPT0tJRV9OQU1FID0gJ3dmX2xvZ2dlZGluJztcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NFU1NJT05fRFVSQVRJT05fSU5fTVMgPSA3ICogREFZO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VTU0lPTl9UT0tFTl9EVVJBVElPTl9JTl9NUyA9IDQgKiBIT1VSO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfVE9LRU5fQUdFX01TID0gSE9VUjtcblxuLy8gVGhlIG1heGltdW0gbnVtYmVyIG9mIHVzZXJzIHRoYXQgYSBmcmVlIHNpdGUgY2FuIGhhdmUuIEEgZnJlZSBzaXRlIGluIHRoaXNcbi8vIGNhc2UgbWVhbnMgYSBzaXRlIHRoYXQgZG9lc24ndCBoYXZlIGEgc2l0ZSBwbGFuLlxuZXhwb3J0IGNvbnN0IFNUQVJURVJfTUFYX05VTV9VU0VSUyA9IDEwMDtcbmV4cG9ydCBjb25zdCBCQVNJQ19NQVhfTlVNX1VTRVJTID0gMjAwMDA7XG5leHBvcnQgY29uc3QgQlVTSU5FU1NfTUFYX05VTV9VU0VSUyA9IDIwMDAwO1xuZXhwb3J0IGNvbnN0IEVDT01NX1NUQU5EQVJEX01BWF9OVU1fVVNFUlMgPSAyMDAwMDtcbmV4cG9ydCBjb25zdCBFQ09NTV9QTFVTX01BWF9OVU1fVVNFUlMgPSAyMDAwMDtcbi8vIEluIHNvbWUgY2FzZXMsIHdlIG1pZ2h0IHdhbnQgdG8gaGF2ZSBzb21lIHNpdGVzIGdvIG92ZXIgdGhlaXIgcGxhbiBsaW1pdC5cbi8vIEhvd2V2ZXIsIGZvciBzYWZldHkgd2Ugc2hvdWxkIGFsd2F5cyBoYXZlIGEgaGFyZCBsaW1pdCBmb3Igb3VyIHN5c3RlbS4gVGhpc1xuLy8gbGltaXQgY2FuIGJlIGluY3JlYXNlZCBidXQgc2hvdWxkIGJlIGRvbmUgZ3JhZHVhbGx5IGFzIHdlIGxlYXJuIGFib3V0IG91clxuLy8gY3VzdG9tZXJzIG5lZWRzLlxuZXhwb3J0IGNvbnN0IEhBUkRfTElNSVRfTUFYX05VTV9VU0VSUyA9IDEwMCAqIDEwMDA7XG5cbnR5cGUgU3Vic2NyaXB0aW9uVXNlckxpbWl0cyA9IHtcbiAgZnJlZTogbnVtYmVyO1xuICBzdGF0aWM6IG51bWJlcjtcbiAgY21zOiBudW1iZXI7XG4gIGJ1c2luZXNzOiBudW1iZXI7XG4gIGVjb21tZXJjZV9zdGFuZGFyZDogbnVtYmVyO1xuICBlY29tbWVyY2VfcGx1czogbnVtYmVyO1xuICBlY29tbWVyY2VfYWR2YW5jZWQ6IG51bWJlcjtcbiAgZW50ZXJwcmlzZTogbnVtYmVyO1xuICBlbnRlcnByaXNlX2xpdGU6IG51bWJlcjtcbn07XG5cbi8vIE1hcCB1c2VyIGxpbWl0cyB0byBzaXRlU3Vic2NyaXB0aW9uIHR5cGVzIGRlZmluZWQgaW5cbi8vIHBhY2thZ2VzL3N5c3RlbXMvZGVzaWduZXIvc2l0ZS1kYXRhL1NpdGVEYXRhU3RhdGVUeXBlLmpzXG5leHBvcnQgY29uc3QgU1VCU0NSSVBUSU9OX1VTRVJfTElNSVRTOiBTdWJzY3JpcHRpb25Vc2VyTGltaXRzID0ge1xuICBmcmVlOiBTVEFSVEVSX01BWF9OVU1fVVNFUlMsXG4gIHN0YXRpYzogQkFTSUNfTUFYX05VTV9VU0VSUyxcbiAgY21zOiBCVVNJTkVTU19NQVhfTlVNX1VTRVJTLFxuICBidXNpbmVzczogQlVTSU5FU1NfTUFYX05VTV9VU0VSUyxcbiAgZWNvbW1lcmNlX3N0YW5kYXJkOiBFQ09NTV9TVEFOREFSRF9NQVhfTlVNX1VTRVJTLFxuICBlY29tbWVyY2VfcGx1czogRUNPTU1fUExVU19NQVhfTlVNX1VTRVJTLFxuICBlY29tbWVyY2VfYWR2YW5jZWQ6IEJVU0lORVNTX01BWF9OVU1fVVNFUlMsXG4gIGVudGVycHJpc2U6IEJVU0lORVNTX01BWF9OVU1fVVNFUlMsXG4gIGVudGVycHJpc2VfbGl0ZTogQlVTSU5FU1NfTUFYX05VTV9VU0VSUyxcbn07XG5cbmV4cG9ydCBjb25zdCBNQVhfTlVNX0dST1VQUyA9IDIwO1xuZXhwb3J0IGNvbnN0IE1JTl9HUk9VUF9JRF9MRU5HVEggPSAyO1xuZXhwb3J0IGNvbnN0IE1BWF9HUk9VUF9JRF9MRU5HVEggPSAyO1xuXG5leHBvcnQgY29uc3QgVVNZU19UT0tFTl9UWVBFUyA9IHtcbiAgaW52aXRlVXNlcjogJ2ludml0ZVVzZXInLFxuICByZXNldFBhc3N3b3JkOiAncmVzZXRQYXNzd29yZCcsXG4gIHZlcmlmeUVtYWlsOiAndmVyaWZ5RW1haWwnLFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IEFDQ0VTU19HUk9VUF9JTkxJTkVfUFJPRFVDVF9GSUVMRF9TTFVHID1cbiAgJ2FjY2Vzcy1ncm91cC1tZW1iZXJzaGlwLXByb2R1Y3QnO1xuXG5leHBvcnQgY29uc3QgQUNDRVNTX0dST1VQX0FETUlTU0lPTl9UWVBFID0ge1xuICBmcmVlOiAnZnJlZScsXG4gIHBhaWQ6ICdwYWlkJyxcbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCBjb25zdCBBQ0NFU1NfR1JPVVBfRlJFRV9UWVBFID0ge1xuICBhbGw6ICdhbGwnLFxuICBhZG1pbjogJ2FkbWluJyxcbn0gYXMgY29uc3Q7XG5cbi8vICoqKiogRW1haWxzICoqKiogLy9cblxuZXhwb3J0IGNvbnN0IFNVQlNDUklQVElPTl9FTUFJTF9UWVBFUyA9IHtcbiAgUEFZTUVOVF9GQUlMRUQ6ICdwYXltZW50RmFpbGVkJyxcbiAgUEFZTUVOVF9TVUNDRVNTRlVMOiAncGF5bWVudFN1Y2Nlc3NmdWwnLFxuICBTVUJTQ1JJUFRJT05fQ0FOQ0VMRUQ6ICdzdWJzY3JpcHRpb25DYW5jZWxlZCcsXG4gIFZFUklGWV9QQVlNRU5UOiAndmVyaWZ5UGF5bWVudCcsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgTUVNQkVSU0hJUFNfRU1BSUxfS0VZUyA9IHtcbiAgaW52aXRlOiAnaW52aXRlJyxcbiAgcmVzZXRQYXNzd29yZDogJ3Jlc2V0UGFzc3dvcmQnLFxuICB1cGRhdGVkUGFzc3dvcmQ6ICd1cGRhdGVkUGFzc3dvcmQnLFxuICB3ZWxjb21lOiAnd2VsY29tZScsXG4gIHZlcmlmeTogJ3ZlcmlmeScsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgRU1BSUxfVEVNUExBVEVfVFlQRVMgPSB7XG4gIGludml0ZTogJ01FTUJFUlNISVBTX0lOVklURScsXG4gIHJlc2V0UGFzc3dvcmQ6ICdNRU1CRVJTSElQU19SRVNFVF9QQVNTV09SRCcsXG4gIHVwZGF0ZWRQYXNzd29yZDogJ01FTUJFUlNISVBTX1VQREFURURfUEFTU1dPUkQnLFxuICB2ZXJpZnk6ICdNRU1CRVJTSElQU19WRVJJRlknLFxuICB3ZWxjb21lOiAnTUVNQkVSU0hJUFNfV0VMQ09NRScsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgQ09ORklSTV9VTlNBVkVEX0NIQU5HRVNfQ09QWSA9IHtcbiAgdGl0bGU6ICdDb250aW51ZSB3aXRob3V0IHNhdmluZz8nLFxuICBjb250ZW50OiAnWW91ciBjaGFuZ2VzIHdpbGwgYmUgbG9zdC4nLFxuICBpY29uVHlwZTogJ3dhcm5pbmcnLFxuICBzdWJtaXQ6IHtsYWJlbDogJ0NvbnRpbnVlJywgaW50ZW50OiAnZGFuZ2VyJ30sXG4gIGNhbmNlbDoge2xhYmVsOiAnQ2FuY2VsJywgaW50ZW50OiAnZGVmYXVsdCd9LFxufSBhcyBjb25zdDtcblxuLy8gKioqKiBVc2VyIGFjY291bnQgc2V0dGluZ3MgKioqKiAvL1xuXG5leHBvcnQgY29uc3QgVVNFUl9GSUVMRF9GT1JNX0lEID0gJ1VzZXJGaWVsZEZvcm0nO1xuXG5leHBvcnQgY29uc3QgTkVXX1VTRVJfRklFTERfSUQgPSAnbWludC11c2VyLWZpZWxkJztcblxuZXhwb3J0IGNvbnN0IFVTRVJfRklFTERfREVGQVVMVFMgPSB7XG4gIFBsYWluVGV4dDoge1xuICAgIGlkOiBORVdfVVNFUl9GSUVMRF9JRCxcbiAgICBuYW1lOiAnJyxcbiAgICBzbHVnOiAnJyxcbiAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgdHlwZTogJ1BsYWluVGV4dCcsXG4gICAgdmFsaWRhdGlvbnM6IHt9LFxuICB9LFxuICBFbWFpbDoge1xuICAgIGlkOiBORVdfVVNFUl9GSUVMRF9JRCxcbiAgICBuYW1lOiAnJyxcbiAgICBzbHVnOiAnJyxcbiAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgdHlwZTogJ0VtYWlsJyxcbiAgICB2YWxpZGF0aW9uczoge30sXG4gIH0sXG4gIEJvb2w6IHtcbiAgICBpZDogTkVXX1VTRVJfRklFTERfSUQsXG4gICAgbmFtZTogJycsXG4gICAgc2x1ZzogJycsXG4gICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgIHR5cGU6ICdCb29sJyxcbiAgICB2YWxpZGF0aW9uczoge30sXG4gIH0sXG4gIEZpbGVSZWY6IHtcbiAgICBpZDogTkVXX1VTRVJfRklFTERfSUQsXG4gICAgbmFtZTogJycsXG4gICAgc2x1ZzogJycsXG4gICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgIHR5cGU6ICdGaWxlUmVmJyxcbiAgICB2YWxpZGF0aW9uczoge30sXG4gIH0sXG4gIE9wdGlvbjoge1xuICAgIGlkOiBORVdfVVNFUl9GSUVMRF9JRCxcbiAgICBuYW1lOiAnJyxcbiAgICBzbHVnOiAnJyxcbiAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgdHlwZTogJ09wdGlvbicsXG4gICAgdmFsaWRhdGlvbnM6IHtcbiAgICAgIG9wdGlvbnM6IFtdLFxuICAgIH0sXG4gIH0sXG4gIFBhc3N3b3JkOiB7XG4gICAgaWQ6IE5FV19VU0VSX0ZJRUxEX0lELFxuICAgIG5hbWU6ICdQYXNzd29yZCcsXG4gICAgc2x1ZzogJycsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgdHlwZTogJ1Bhc3N3b3JkJyxcbiAgICB2YWxpZGF0aW9uczoge30sXG4gIH0sXG4gIE51bWJlcjoge1xuICAgIGlkOiBORVdfVVNFUl9GSUVMRF9JRCxcbiAgICBuYW1lOiAnJyxcbiAgICBzbHVnOiAnJyxcbiAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgdHlwZTogJ051bWJlcicsXG4gICAgdmFsaWRhdGlvbnM6IHtcbiAgICAgIG1pbjogMCxcbiAgICAgIHN0ZXA6IDEsXG4gICAgfSxcbiAgfSxcbiAgTGluazoge1xuICAgIGlkOiBORVdfVVNFUl9GSUVMRF9JRCxcbiAgICBuYW1lOiAnJyxcbiAgICBzbHVnOiAnJyxcbiAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgdHlwZTogJ0xpbmsnLFxuICAgIHZhbGlkYXRpb25zOiB7fSxcbiAgfSxcbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1VTRVJfRklFTERTID0gW1xuICB7XG4gICAgaWQ6ICduYW1lJyxcbiAgICBuYW1lOiAnTmFtZScsXG4gICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgIHNsdWc6ICduYW1lJyxcbiAgICB0eXBlOiAnUGxhaW5UZXh0JyxcbiAgICB2YWxpZGF0aW9uczoge30sXG4gIH0sXG4gIHtcbiAgICBpZDogJ2VtYWlsJyxcbiAgICBuYW1lOiAnRW1haWwnLFxuICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIHNsdWc6ICdlbWFpbCcsXG4gICAgdHlwZTogJ0VtYWlsJyxcbiAgICB2YWxpZGF0aW9uczoge30sXG4gIH0sXG4gIHtcbiAgICBpZDogJ3Bhc3N3b3JkJyxcbiAgICBuYW1lOiAnUGFzc3dvcmQnLFxuICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIHNsdWc6ICdwYXNzd29yZCcsXG4gICAgdHlwZTogJ1Bhc3N3b3JkJyxcbiAgICB2YWxpZGF0aW9uczoge30sXG4gIH0sXG4gIHtcbiAgICBpZDogJ2FjY2VwdFByaXZhY3knLFxuICAgIG5hbWU6ICdBY2NlcHQgcHJpdmFjeScsXG4gICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgIHNsdWc6ICdhY2NlcHQtcHJpdmFjeScsXG4gICAgdHlwZTogJ0Jvb2wnLFxuICAgIHZhbGlkYXRpb25zOiB7fSxcbiAgfSxcbiAge1xuICAgIGlkOiAnYWNjZXB0Q29tbXVuaWNhdGlvbnMnLFxuICAgIG5hbWU6ICdBY2NlcHQgY29tbXVuaWNhdGlvbnMnLFxuICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICBzbHVnOiAnYWNjZXB0LWNvbW11bmljYXRpb25zJyxcbiAgICB0eXBlOiAnQm9vbCcsXG4gICAgdmFsaWRhdGlvbnM6IHt9LFxuICB9LFxuXSBhcyBjb25zdDtcblxuLy8gQ29udGFpbnMgdGhlIGtleXMgdGhhdCB1c3lzU2V0dGluZ3Mgc3RvcmVzXG5leHBvcnQgY29uc3QgU0VUVVBfR1VJREVfS0VZUyA9IHtcbiAgaGFzVmlzaXRlZEFjY2Vzc0RlbmllZFBhZ2U6ICdoYXNWaXNpdGVkQWNjZXNzRGVuaWVkUGFnZScsXG4gIGhhc1Zpc2l0ZWRMb2dpblBhZ2U6ICdoYXNWaXNpdGVkTG9naW5QYWdlJyxcbiAgaGFzVmlzaXRlZFNpZ25VcFBhZ2U6ICdoYXNWaXNpdGVkU2lnblVwUGFnZScsXG4gIGhhc1Zpc2l0ZWRVc2VyQWNjb3VudFNldHRpbmdzOiAnaGFzVmlzaXRlZFVzZXJBY2NvdW50U2V0dGluZ3MnLFxuICBoYXNWaXNpdGVkVXNlckFjY291bnRQYWdlOiAnaGFzVmlzaXRlZFVzZXJBY2NvdW50UGFnZScsXG59IGFzIGNvbnN0O1xuXG4vLyBDb250YWlucyBhbGwgdGhlIHNldHVwIGd1aWRlIGtleXMsIHNlcnZlciBhbmQgZnJvbnRlbmQtb25seVxuZXhwb3J0IGNvbnN0IFNFVFVQX0dVSURFX0FMTF9LRVlTID0ge1xuICAuLi5TRVRVUF9HVUlERV9LRVlTLFxuICBoYXNIb3N0aW5nUGxhbjogJ2hhc0hvc3RpbmdQbGFuJyxcbiAgaGFzRWNvbW1lcmNlOiAnaGFzRWNvbW1lcmNlJyxcbiAgaGFzRW5hYmxlZFNTTDogJ2hhc0VuYWJsZWRTU0wnLFxuICBoYXNVc2VyczogJ2hhc1VzZXJzJyxcbiAgaGFzQWNjZXNzR3JvdXBzOiAnaGFzQWNjZXNzR3JvdXBzJyxcbiAgaGFzUmVzdHJpY3RlZENvbnRlbnQ6ICdoYXNSZXN0cmljdGVkQ29udGVudCcsXG4gIGhhc1Jlc3RyaWN0ZWRQcm9kdWN0czogJ2hhc1Jlc3RyaWN0ZWRQcm9kdWN0cycsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgY29uc3QgTUFYX1VTRVJfREFUQV9GSUVMRFMgPSAyMDtcblxuLy8gYG5hbWVgIGFuZCBgYWNjZXB0LWNvbW11bmljYXRpb25zYCBjb21tb24gZmllbGRzIGNhbiBhbHNvIGJlIHVwZGF0ZWRcbi8vIGFsb25nIHdpdGggY3VzdG9tIGZpZWxkcyBjdXJyZW50bHlcbmV4cG9ydCBjb25zdCBNQVhfVVBEQVRFX1VTRVJfREFUQV9GSUVMRFMgPSBNQVhfVVNFUl9EQVRBX0ZJRUxEUyArIDI7XG5cbmV4cG9ydCBjb25zdCBVU1lTX0ZJRUxEX1BBVEg6IEV4cHJlc3Npb25QYXRoID0gW1xuICB7aW46ICdSZWNvcmQnLCBhdDogJ3VzZXJzJ30sXG4gIHtpbjogJ1JlY29yZCcsIGF0OiAnZmllbGQnfSxcbl07XG5cbmV4cG9ydCBjb25zdCBVU1lTX0NPTlRFWFRfUEFUSDogRXhwcmVzc2lvblBhdGggPSBbXG4gIHtpbjogJ1JlY29yZCcsIGF0OiAndXNlcnMnfSxcbiAge2luOiAnUmVjb3JkJywgYXQ6ICdjb250ZXh0J30sXG5dO1xuXG5jb25zdCBURU1QX1BBVEg6IEV4cHJlc3Npb25QYXRoID0gW3tpbjogJ1JlY29yZCcsIGF0OiAndGVtcCd9XTtcbmV4cG9ydCBjb25zdCBURU1QX1NUQVRFX1BBVEg6IEV4cHJlc3Npb25QYXRoID0gW1xuICAuLi5URU1QX1BBVEgsXG4gIHtpbjogJ1JlY29yZCcsIGF0OiAnc3RhdGUnfSxcbl07XG5cbmV4cG9ydCBjb25zdCBVU0VSX0FDQ0VTU19NRVRBX09QVElPTlM6IFVzZXJBY2Nlc3NNZXRhID0gW1xuICBVU1lTX0FDQ0VTU19UWVBFUy5MT0dHRURfSU4sXG5dO1xuXG5leHBvcnQgY29uc3QgRVhDRUVEU19NQVhfRklMRV9TSVpFX0VSUk9SID1cbiAgJ01heGltdW0gc2l6ZSBhbGxvd2VkIGZvciBhIGZpbGUgdXBsb2FkIGlzIDEwMDAwa2IgLyAxMG1iLic7XG5leHBvcnQgY29uc3QgRVhDRUVEU19NQVhfSU1BR0VfU0laRV9FUlJPUiA9XG4gICdNYXhpbXVtIHNpemUgYWxsb3dlZCBmb3IgYSBpbWFnZSB1cGxvYWQgaXMgNDAwMGtiIC8gNG1iLic7XG5leHBvcnQgY29uc3QgTk9fUkVRVUlSRURfQVRUUklCVVRFID0gWydGaWxlUmVmJywgJ0Jvb2wnXSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IFVTRVJfU1RBVFVTRVMgPSB7XG4gIGludml0ZWQ6ICdJbnZpdGVkJyxcbiAgdmVyaWZpZWQ6ICdWZXJpZmllZCcsXG4gIHVudmVyaWZpZWQ6ICdVbnZlcmlmaWVkJyxcbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCBjb25zdCBVU0VSX1BBR0VfU0laRSA9IDEwMDtcblxuLy8gVXNlciBDU1YgSW1wb3J0IGNvbnN0YW50c1xuY29uc3QgVVNFUl9DU1ZfSU1QT1JUX1NUQVRVU19QT0xMSU5HX1RJTUVPVVQgPSAyMCAqIDYwICogMTAwMDtcbmV4cG9ydCBjb25zdCBVU0VSX0NTVl9JTVBPUlRfU1RBVFVTX1BPTExJTkdfSU5URVJWQUwgPSA1MDAwO1xuZXhwb3J0IGNvbnN0IFVTRVJfQ1NWX0lNUE9SVF9TVEFUVVNfTUFYX1RSSUVTID0gTWF0aC5mbG9vcihcbiAgVVNFUl9DU1ZfSU1QT1JUX1NUQVRVU19QT0xMSU5HX1RJTUVPVVQgL1xuICAgIFVTRVJfQ1NWX0lNUE9SVF9TVEFUVVNfUE9MTElOR19JTlRFUlZBTFxuKTtcbiJdLCJuYW1lcyI6WyJBQ0NFU1NfR1JPVVBfQURNSVNTSU9OX1RZUEUiLCJBQ0NFU1NfR1JPVVBfRlJFRV9UWVBFIiwiQUNDRVNTX0dST1VQX0lOTElORV9QUk9EVUNUX0ZJRUxEX1NMVUciLCJCQVNJQ19NQVhfTlVNX1VTRVJTIiwiQlVTSU5FU1NfTUFYX05VTV9VU0VSUyIsIkNPTkZJUk1fVU5TQVZFRF9DSEFOR0VTX0NPUFkiLCJERUZBVUxUX1NFU1NJT05fRFVSQVRJT05fSU5fTVMiLCJERUZBVUxUX1NFU1NJT05fVE9LRU5fRFVSQVRJT05fSU5fTVMiLCJERUZBVUxUX1NUWUxFUyIsIkRFRkFVTFRfVE9LRU5fQUdFX01TIiwiREVGQVVMVF9VU0VSX0ZJRUxEUyIsIkVDT01NX1BMVVNfTUFYX05VTV9VU0VSUyIsIkVDT01NX1NUQU5EQVJEX01BWF9OVU1fVVNFUlMiLCJFTUFJTF9URU1QTEFURV9UWVBFUyIsIkVYQ0VFRFNfTUFYX0ZJTEVfU0laRV9FUlJPUiIsIkVYQ0VFRFNfTUFYX0lNQUdFX1NJWkVfRVJST1IiLCJIQVJEX0xJTUlUX01BWF9OVU1fVVNFUlMiLCJLRVlfRlJPTV9SRVNFUlZFRF9VU0VSX0ZJRUxEIiwiTE9HR0VESU5fQ09PS0lFX05BTUUiLCJNQVhfR1JPVVBfSURfTEVOR1RIIiwiTUFYX05VTV9HUk9VUFMiLCJNQVhfVVBEQVRFX1VTRVJfREFUQV9GSUVMRFMiLCJNQVhfVVNFUl9EQVRBX0ZJRUxEUyIsIk1FTUJFUlNISVBTX0VNQUlMX0tFWVMiLCJNSU5fR1JPVVBfSURfTEVOR1RIIiwiTkFNRVNfRlJPTV9VU0VSX0ZJRUxEUyIsIk5FV19VU0VSX0ZJRUxEX0lEIiwiTk9fUkVRVUlSRURfQVRUUklCVVRFIiwiUEFTU1dPUkRfTUFYX0xFTkdUSCIsIlBBU1NXT1JEX01JTl9MRU5HVEgiLCJSRVNFUlZFRF9VU0VSX0ZJRUxEUyIsIlJFU0VSVkVEX1VTRVJfUFJFRklYIiwiU0VTU0lPTl9DT09LSUVfTkFNRSIsIlNFVFVQX0dVSURFX0FMTF9LRVlTIiwiU0VUVVBfR1VJREVfS0VZUyIsIlNUQVJURVJfTUFYX05VTV9VU0VSUyIsIlNVQlNDUklQVElPTl9FTUFJTF9UWVBFUyIsIlNVQlNDUklQVElPTl9VU0VSX0xJTUlUUyIsIlRFTVBfU1RBVEVfUEFUSCIsIlRFWFRfSU5QVVRfVFlQRV9UT19GSUVMRF9UWVBFIiwiVVNFUl9BQ0NFU1NfTUVUQV9PUFRJT05TIiwiVVNFUl9DU1ZfSU1QT1JUX1NUQVRVU19NQVhfVFJJRVMiLCJVU0VSX0NTVl9JTVBPUlRfU1RBVFVTX1BPTExJTkdfSU5URVJWQUwiLCJVU0VSX0ZJRUxEX0RFRkFVTFRTIiwiVVNFUl9GSUVMRF9GT1JNX0lEIiwiVVNFUl9QQUdFX1NJWkUiLCJVU0VSX1NUQVRVU0VTIiwiVVNZU19DT05URVhUX1BBVEgiLCJVU1lTX0RBVEFfQVRUUlMiLCJVU1lTX0RPTV9DTEFTU19OQU1FUyIsIlVTWVNfRklFTERfUEFUSCIsIlVTWVNfRk9STV9UWVBFUyIsIlVTWVNfSU5QVVRfU0lHTl9VUF9JRFMiLCJVU1lTX0lOUFVUX1RZUEVTIiwiVVNZU19QQUdFX1NFVFRJTkdTIiwiVVNZU19QQUdFX1VUSUxfS0VZUyIsIlVTWVNfUkVTRVJWRURfU0xVR1MiLCJVU1lTX1RPS0VOX1RZUEVTIiwiVVNZU19VU0VSX1NUQVRFUyIsIlVTWVNfVVRJTElUWV9LRVlTIiwibmFtZSIsImFjY2VwdFByaXZhY3kiLCJhY2NlcHRDb21tdW5pY2F0aW9ucyIsIlBSSVZBQ1lfUE9MSUNZIiwiUEFTU1dPUkQiLCJFTUFJTCIsInRleHQiLCJwYXNzd29yZCIsImVtYWlsIiwibnVtYmVyIiwidGVsIiwiZm9ybVR5cGUiLCJpbnB1dFR5cGUiLCJsb2dvdXQiLCJsb2dpbiIsImZvcm1FcnJvciIsInJlZGlyZWN0VXJsIiwiZm9ybVZlcmlmaWNhdGlvbiIsInVzZXJTdWJzY3JpcHRpb25zIiwidXNlclN1YnNjcmlwdGlvbnNFbXB0eVN0YXRlIiwidXNlckFjY291bnQiLCJzdWJzY3JpcHRpb25DYW5jZWwiLCJ1c2VySWQiLCJmaWVsZCIsImZpZWxkVHlwZSIsImZpbGVVcGxvYWRLZXkiLCJ1bnNhdmVkRmlsZVVwbG9hZEtleSIsImZvcm1TdWNjZXNzIiwiZm9ybVZlcmZpY2F0aW9uIiwic2lnbnVwIiwidXBkYXRlUGFzc3dvcmQiLCJyZXNldFBhc3N3b3JkIiwiYWNjb3VudCIsImxvZ2dlZEluIiwibG9nZ2VkT3V0IiwicGFyZW50Iiwic29ydFBvcyIsInV0aWxLZXkiLCJzbHVnIiwidGl0bGUiLCJhY2Nlc3NEZW5pZWQiLCJ2YWx1ZXMiLCJtYXAiLCJwYWdlU2V0dGluZ3MiLCJhY2NlbnRDb2xvciIsImJnQ29sb3IiLCJpbmNsdWRlV2ZCcmFuZCIsIlNFQ09ORCIsIk1JTlVURSIsIkhPVVIiLCJEQVkiLCJmcmVlIiwic3RhdGljIiwiY21zIiwiYnVzaW5lc3MiLCJlY29tbWVyY2Vfc3RhbmRhcmQiLCJlY29tbWVyY2VfcGx1cyIsImVjb21tZXJjZV9hZHZhbmNlZCIsImVudGVycHJpc2UiLCJlbnRlcnByaXNlX2xpdGUiLCJpbnZpdGVVc2VyIiwidmVyaWZ5RW1haWwiLCJwYWlkIiwiYWxsIiwiYWRtaW4iLCJQQVlNRU5UX0ZBSUxFRCIsIlBBWU1FTlRfU1VDQ0VTU0ZVTCIsIlNVQlNDUklQVElPTl9DQU5DRUxFRCIsIlZFUklGWV9QQVlNRU5UIiwiaW52aXRlIiwidXBkYXRlZFBhc3N3b3JkIiwid2VsY29tZSIsInZlcmlmeSIsImNvbnRlbnQiLCJpY29uVHlwZSIsInN1Ym1pdCIsImxhYmVsIiwiaW50ZW50IiwiY2FuY2VsIiwiUGxhaW5UZXh0IiwiaWQiLCJyZXF1aXJlZCIsInR5cGUiLCJ2YWxpZGF0aW9ucyIsIkVtYWlsIiwiQm9vbCIsIkZpbGVSZWYiLCJPcHRpb24iLCJvcHRpb25zIiwiUGFzc3dvcmQiLCJOdW1iZXIiLCJtaW4iLCJzdGVwIiwiTGluayIsImhhc1Zpc2l0ZWRBY2Nlc3NEZW5pZWRQYWdlIiwiaGFzVmlzaXRlZExvZ2luUGFnZSIsImhhc1Zpc2l0ZWRTaWduVXBQYWdlIiwiaGFzVmlzaXRlZFVzZXJBY2NvdW50U2V0dGluZ3MiLCJoYXNWaXNpdGVkVXNlckFjY291bnRQYWdlIiwiaGFzSG9zdGluZ1BsYW4iLCJoYXNFY29tbWVyY2UiLCJoYXNFbmFibGVkU1NMIiwiaGFzVXNlcnMiLCJoYXNBY2Nlc3NHcm91cHMiLCJoYXNSZXN0cmljdGVkQ29udGVudCIsImhhc1Jlc3RyaWN0ZWRQcm9kdWN0cyIsImluIiwiYXQiLCJURU1QX1BBVEgiLCJVU1lTX0FDQ0VTU19UWVBFUyIsIkxPR0dFRF9JTiIsImludml0ZWQiLCJ2ZXJpZmllZCIsInVudmVyaWZpZWQiLCJVU0VSX0NTVl9JTVBPUlRfU1RBVFVTX1BPTExJTkdfVElNRU9VVCIsIk1hdGgiLCJmbG9vciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFvUGFBLDJCQUEyQjtlQUEzQkE7O0lBS0FDLHNCQUFzQjtlQUF0QkE7O0lBUkFDLHNDQUFzQztlQUF0Q0E7O0lBOUNBQyxtQkFBbUI7ZUFBbkJBOztJQUNBQyxzQkFBc0I7ZUFBdEJBOztJQW1GQUMsNEJBQTRCO2VBQTVCQTs7SUEzRkFDLDhCQUE4QjtlQUE5QkE7O0lBQ0FDLG9DQUFvQztlQUFwQ0E7O0lBcEJBQyxjQUFjO2VBQWRBOztJQXFCQUMsb0JBQW9CO2VBQXBCQTs7SUErS0FDLG1CQUFtQjtlQUFuQkE7O0lBdktBQyx3QkFBd0I7ZUFBeEJBOztJQURBQyw0QkFBNEI7ZUFBNUJBOztJQTBFQUMsb0JBQW9CO2VBQXBCQTs7SUF3TEFDLDJCQUEyQjtlQUEzQkE7O0lBRUFDLDRCQUE0QjtlQUE1QkE7O0lBOVBBQyx3QkFBd0I7ZUFBeEJBOztJQTlLQUMsNEJBQTRCO2VBQTVCQTs7SUE4SkFDLG9CQUFvQjtlQUFwQkE7O0lBOENBQyxtQkFBbUI7ZUFBbkJBOztJQUZBQyxjQUFjO2VBQWRBOztJQTBNQUMsMkJBQTJCO2VBQTNCQTs7SUFKQUMsb0JBQW9CO2VBQXBCQTs7SUF0S0FDLHNCQUFzQjtlQUF0QkE7O0lBL0JBQyxtQkFBbUI7ZUFBbkJBOztJQXJNQUMsc0JBQXNCO2VBQXRCQTs7SUFnUUFDLGlCQUFpQjtlQUFqQkE7O0lBd0tBQyxxQkFBcUI7ZUFBckJBOztJQXpSQUMsbUJBQW1CO2VBQW5CQTs7SUFEQUMsbUJBQW1CO2VBQW5CQTs7SUExSkFDLG9CQUFvQjtlQUFwQkE7O0lBRkFDLG9CQUFvQjtlQUFwQkE7O0lBcUtBQyxtQkFBbUI7ZUFBbkJBOztJQXdPQUMsb0JBQW9CO2VBQXBCQTs7SUFUQUMsZ0JBQWdCO2VBQWhCQTs7SUF2TkFDLHFCQUFxQjtlQUFyQkE7O0lBOERBQyx3QkFBd0I7ZUFBeEJBOztJQXJDQUMsd0JBQXdCO2VBQXhCQTs7SUFtT0FDLGVBQWU7ZUFBZkE7O0lBbFpBQyw2QkFBNkI7ZUFBN0JBOztJQXVaQUMsd0JBQXdCO2VBQXhCQTs7SUFxQkFDLGdDQUFnQztlQUFoQ0E7O0lBREFDLHVDQUF1QztlQUF2Q0E7O0lBbExBQyxtQkFBbUI7ZUFBbkJBOztJQUpBQyxrQkFBa0I7ZUFBbEJBOztJQWtMQUMsY0FBYztlQUFkQTs7SUFOQUMsYUFBYTtlQUFiQTs7SUFyQkFDLGlCQUFpQjtlQUFqQkE7O0lBM1hBQyxlQUFlO2VBQWZBOztJQW1CQUMsb0JBQW9CO2VBQXBCQTs7SUFtV0FDLGVBQWU7ZUFBZkE7O0lBN1ZBQyxlQUFlO2VBQWZBOztJQWVBQyxzQkFBc0I7ZUFBdEJBOztJQVBBQyxnQkFBZ0I7ZUFBaEJBOztJQXFCQUMsa0JBQWtCO2VBQWxCQTs7SUFpREFDLG1CQUFtQjtlQUFuQkE7O0lBSkFDLG1CQUFtQjtlQUFuQkE7O0lBMkVBQyxnQkFBZ0I7ZUFBaEJBOztJQTlIQUMsZ0JBQWdCO2VBQWhCQTs7SUF6REFDLGlCQUFpQjtlQUFqQkE7Ozt1QkFuRFE7b0NBQ2dDO3FCQUV2Qzs7Ozs7Ozs7Ozs7Ozs7QUFpQlAsTUFBTTVCLHVCQUF1QjtBQUU3QixNQUFNRCx1QkFBdUI7SUFDbEM4QixNQUFNN0IsdUJBQXVCO0lBQzdCOEIsZUFBZTlCLHVCQUF1QjtJQUN0QytCLHNCQUFzQi9CLHVCQUF1QjtBQUMvQztBQUVPLE1BQU1kLCtCQUErQjtJQUMxQyxDQUFDYyx1QkFBdUIsT0FBTyxFQUFFO0lBQ2pDLENBQUNBLHVCQUF1QixpQkFBaUIsRUFBRTtJQUMzQyxDQUFDQSx1QkFBdUIsd0JBQXdCLEVBQUU7QUFDcEQ7QUFFTyxNQUFNTix5QkFBeUI7SUFDcEMsQ0FBQ00sdUJBQXVCLE9BQU8sRUFBRTtJQUNqQyxDQUFDQSx1QkFBdUIsaUJBQWlCLEVBQUU7SUFDM0MsQ0FBQ0EsdUJBQXVCLHdCQUF3QixFQUFFO0lBQ2xEZ0MsZ0JBQWdCO0lBQ2hCQyxVQUFVO0lBQ1ZDLE9BQU87QUFDVDtBQUVPLE1BQU0xQixnQ0FBZ0M7SUFDM0MyQixNQUFNO0lBQ05DLFVBQVU7SUFDVkMsT0FBTztJQUNQQyxRQUFRO0lBQ1JDLEtBQUs7QUFDUDtBQUVPLE1BQU1YLG9CQUFvQjtJQUMvQixlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLHVCQUF1QjtJQUN2Qix3QkFBd0I7SUFDeEIsc0JBQXNCO0lBQ3RCLHFCQUFxQjtBQUN2QjtBQUVPLE1BQU1YLGtCQUFrQjtJQUM3QnVCLFVBQVU7SUFDVkMsV0FBVztJQUNYQyxRQUFRO0lBQ1JDLE9BQU87SUFDUEMsV0FBVztJQUNYQyxhQUFhO0lBQ2JDLGtCQUFrQjtJQUNsQkMsbUJBQW1CO0lBQ25CQyw2QkFBNkI7SUFDN0JDLGFBQWE7SUFDYkMsb0JBQW9CO0lBQ3BCQyxRQUFRO0lBQ1JDLE9BQU87SUFDUEMsV0FBVztJQUNYQyxlQUFlO0lBQ2ZDLHNCQUFzQjtBQUN4QjtBQUVPLE1BQU1yQyx1QkFBdUI7SUFDbENzQyxhQUFhO0lBQ2JDLGlCQUFpQjtJQUNqQmIsV0FBVztBQUNiO0FBRU8sTUFBTXhCLGtCQUFrQjtJQUM3QnVCLE9BQU87SUFDUGUsUUFBUTtJQUNSQyxnQkFBZ0I7SUFDaEJDLGVBQWU7SUFDZkMsU0FBUztBQUNYO0FBRU8sTUFBTXZDLG1CQUFtQjtJQUM5QmUsT0FBTztJQUNQUixNQUFNO0lBQ05PLFVBQVU7SUFDVk4sZUFBZTtBQUNqQjtBQUVPLE1BQU1ULHlCQUF5QjtJQUNwQ2dCLE9BQU87SUFDUFIsTUFBTTtJQUNOTyxVQUFVO0lBQ1ZOLGVBQWU7SUFDZkMsc0JBQXNCO0FBQ3hCO0FBRU8sTUFBTUosbUJBQW1CO0lBQzlCbUMsVUFBVTtJQUNWQyxXQUFXO0FBQ2I7QUFHTyxNQUFNeEMscUJBQXFCO0lBQ2hDb0IsT0FBTztRQUNMcUIsUUFBUTtRQUNSQyxTQUFTO1FBQ1RDLFNBQVM7UUFDVEMsTUFBTTtRQUNOQyxPQUFPO0lBQ1Q7SUFDQVYsUUFBUTtRQUNOTSxRQUFRO1FBQ1JDLFNBQVM7UUFDVEMsU0FBUztRQUNUQyxNQUFNO1FBQ05DLE9BQU87SUFDVDtJQUNBUixlQUFlO1FBQ2JJLFFBQVE7UUFDUkMsU0FBUztRQUNUQyxTQUFTO1FBQ1RDLE1BQU07UUFDTkMsT0FBTztJQUNUO0lBQ0FULGdCQUFnQjtRQUNkSyxRQUFRO1FBQ1JDLFNBQVM7UUFDVEMsU0FBUztRQUNUQyxNQUFNO1FBQ05DLE9BQU87SUFDVDtJQUNBQyxjQUFjO1FBQ1pMLFFBQVE7UUFDUkMsU0FBUztRQUNUQyxTQUFTO1FBQ1RDLE1BQU07UUFDTkMsT0FBTztJQUNUO0lBQ0FuQixhQUFhO1FBQ1hlLFFBQVE7UUFDUkMsU0FBUztRQUNUQyxTQUFTO1FBQ1RDLE1BQU07UUFDTkMsT0FBTztJQUNUO0FBQ0Y7QUFFTyxNQUFNM0Msc0JBQXNCNkMsSUFBQUEsYUFBTSxFQUFDL0Msb0JBQW9CZ0QsR0FBRyxDQUMvRCxDQUFDQyxlQUFpQkEsYUFBYUwsSUFBSTtBQUc5QixNQUFNM0Msc0JBQXNCOEMsSUFBQUEsYUFBTSxFQUFDL0Msb0JBQW9CZ0QsR0FBRyxDQUMvRCxDQUFDQyxlQUFpQkEsYUFBYU4sT0FBTztBQUlqQyxNQUFNekYsaUJBQWlCO0lBQzVCZ0csYUFBYTtJQUNiQyxTQUFTO0lBQ1RDLGdCQUFnQjtBQUNsQjtBQUlPLE1BQU03RSxzQkFBc0I7QUFDNUIsTUFBTUQsc0JBQXNCO0FBRW5DLG9CQUFvQjtBQUNwQixNQUFNK0UsU0FBUztBQUNmLE1BQU1DLFNBQVMsS0FBS0Q7QUFDcEIsTUFBTUUsT0FBTyxLQUFLRDtBQUNsQixNQUFNRSxNQUFNLEtBQUtEO0FBRVYsTUFBTTdFLHNCQUFzQjtBQUM1QixNQUFNZCx1QkFBdUI7QUFDN0IsTUFBTVosaUNBQWlDLElBQUl3RztBQUMzQyxNQUFNdkcsdUNBQXVDLElBQUlzRztBQUNqRCxNQUFNcEcsdUJBQXVCb0c7QUFJN0IsTUFBTTFFLHdCQUF3QjtBQUM5QixNQUFNaEMsc0JBQXNCO0FBQzVCLE1BQU1DLHlCQUF5QjtBQUMvQixNQUFNUSwrQkFBK0I7QUFDckMsTUFBTUQsMkJBQTJCO0FBS2pDLE1BQU1LLDJCQUEyQixNQUFNO0FBZ0J2QyxNQUFNcUIsMkJBQW1EO0lBQzlEMEUsTUFBTTVFO0lBQ042RSxRQUFRN0c7SUFDUjhHLEtBQUs3RztJQUNMOEcsVUFBVTlHO0lBQ1YrRyxvQkFBb0J2RztJQUNwQndHLGdCQUFnQnpHO0lBQ2hCMEcsb0JBQW9Cakg7SUFDcEJrSCxZQUFZbEg7SUFDWm1ILGlCQUFpQm5IO0FBQ25CO0FBRU8sTUFBTWdCLGlCQUFpQjtBQUN2QixNQUFNSSxzQkFBc0I7QUFDNUIsTUFBTUwsc0JBQXNCO0FBRTVCLE1BQU1zQyxtQkFBbUI7SUFDOUIrRCxZQUFZO0lBQ1o3QixlQUFlO0lBQ2Y4QixhQUFhO0FBQ2Y7QUFFTyxNQUFNdkgseUNBQ1g7QUFFSyxNQUFNRiw4QkFBOEI7SUFDekMrRyxNQUFNO0lBQ05XLE1BQU07QUFDUjtBQUVPLE1BQU16SCx5QkFBeUI7SUFDcEMwSCxLQUFLO0lBQ0xDLE9BQU87QUFDVDtBQUlPLE1BQU14RiwyQkFBMkI7SUFDdEN5RixnQkFBZ0I7SUFDaEJDLG9CQUFvQjtJQUNwQkMsdUJBQXVCO0lBQ3ZCQyxnQkFBZ0I7QUFDbEI7QUFFTyxNQUFNekcseUJBQXlCO0lBQ3BDMEcsUUFBUTtJQUNSdEMsZUFBZTtJQUNmdUMsaUJBQWlCO0lBQ2pCQyxTQUFTO0lBQ1RDLFFBQVE7QUFDVjtBQUVPLE1BQU12SCx1QkFBdUI7SUFDbENvSCxRQUFRO0lBQ1J0QyxlQUFlO0lBQ2Z1QyxpQkFBaUI7SUFDakJFLFFBQVE7SUFDUkQsU0FBUztBQUNYO0FBRU8sTUFBTTlILCtCQUErQjtJQUMxQzhGLE9BQU87SUFDUGtDLFNBQVM7SUFDVEMsVUFBVTtJQUNWQyxRQUFRO1FBQUNDLE9BQU87UUFBWUMsUUFBUTtJQUFRO0lBQzVDQyxRQUFRO1FBQUNGLE9BQU87UUFBVUMsUUFBUTtJQUFTO0FBQzdDO0FBSU8sTUFBTTdGLHFCQUFxQjtBQUUzQixNQUFNbEIsb0JBQW9CO0FBRTFCLE1BQU1pQixzQkFBc0I7SUFDakNnRyxXQUFXO1FBQ1RDLElBQUlsSDtRQUNKa0MsTUFBTTtRQUNOc0MsTUFBTTtRQUNOMkMsVUFBVTtRQUNWQyxNQUFNO1FBQ05DLGFBQWEsQ0FBQztJQUNoQjtJQUNBQyxPQUFPO1FBQ0xKLElBQUlsSDtRQUNKa0MsTUFBTTtRQUNOc0MsTUFBTTtRQUNOMkMsVUFBVTtRQUNWQyxNQUFNO1FBQ05DLGFBQWEsQ0FBQztJQUNoQjtJQUNBRSxNQUFNO1FBQ0pMLElBQUlsSDtRQUNKa0MsTUFBTTtRQUNOc0MsTUFBTTtRQUNOMkMsVUFBVTtRQUNWQyxNQUFNO1FBQ05DLGFBQWEsQ0FBQztJQUNoQjtJQUNBRyxTQUFTO1FBQ1BOLElBQUlsSDtRQUNKa0MsTUFBTTtRQUNOc0MsTUFBTTtRQUNOMkMsVUFBVTtRQUNWQyxNQUFNO1FBQ05DLGFBQWEsQ0FBQztJQUNoQjtJQUNBSSxRQUFRO1FBQ05QLElBQUlsSDtRQUNKa0MsTUFBTTtRQUNOc0MsTUFBTTtRQUNOMkMsVUFBVTtRQUNWQyxNQUFNO1FBQ05DLGFBQWE7WUFDWEssU0FBUyxFQUFFO1FBQ2I7SUFDRjtJQUNBQyxVQUFVO1FBQ1JULElBQUlsSDtRQUNKa0MsTUFBTTtRQUNOc0MsTUFBTTtRQUNOMkMsVUFBVTtRQUNWQyxNQUFNO1FBQ05DLGFBQWEsQ0FBQztJQUNoQjtJQUNBTyxRQUFRO1FBQ05WLElBQUlsSDtRQUNKa0MsTUFBTTtRQUNOc0MsTUFBTTtRQUNOMkMsVUFBVTtRQUNWQyxNQUFNO1FBQ05DLGFBQWE7WUFDWFEsS0FBSztZQUNMQyxNQUFNO1FBQ1I7SUFDRjtJQUNBQyxNQUFNO1FBQ0piLElBQUlsSDtRQUNKa0MsTUFBTTtRQUNOc0MsTUFBTTtRQUNOMkMsVUFBVTtRQUNWQyxNQUFNO1FBQ05DLGFBQWEsQ0FBQztJQUNoQjtBQUNGO0FBRU8sTUFBTXJJLHNCQUFzQjtJQUNqQztRQUNFa0ksSUFBSTtRQUNKaEYsTUFBTTtRQUNOaUYsVUFBVTtRQUNWM0MsTUFBTTtRQUNONEMsTUFBTTtRQUNOQyxhQUFhLENBQUM7SUFDaEI7SUFDQTtRQUNFSCxJQUFJO1FBQ0poRixNQUFNO1FBQ05pRixVQUFVO1FBQ1YzQyxNQUFNO1FBQ040QyxNQUFNO1FBQ05DLGFBQWEsQ0FBQztJQUNoQjtJQUNBO1FBQ0VILElBQUk7UUFDSmhGLE1BQU07UUFDTmlGLFVBQVU7UUFDVjNDLE1BQU07UUFDTjRDLE1BQU07UUFDTkMsYUFBYSxDQUFDO0lBQ2hCO0lBQ0E7UUFDRUgsSUFBSTtRQUNKaEYsTUFBTTtRQUNOaUYsVUFBVTtRQUNWM0MsTUFBTTtRQUNONEMsTUFBTTtRQUNOQyxhQUFhLENBQUM7SUFDaEI7SUFDQTtRQUNFSCxJQUFJO1FBQ0poRixNQUFNO1FBQ05pRixVQUFVO1FBQ1YzQyxNQUFNO1FBQ040QyxNQUFNO1FBQ05DLGFBQWEsQ0FBQztJQUNoQjtDQUNEO0FBR00sTUFBTTdHLG1CQUFtQjtJQUM5QndILDRCQUE0QjtJQUM1QkMscUJBQXFCO0lBQ3JCQyxzQkFBc0I7SUFDdEJDLCtCQUErQjtJQUMvQkMsMkJBQTJCO0FBQzdCO0FBR08sTUFBTTdILHVCQUF1QjtJQUNsQyxHQUFHQyxnQkFBZ0I7SUFDbkI2SCxnQkFBZ0I7SUFDaEJDLGNBQWM7SUFDZEMsZUFBZTtJQUNmQyxVQUFVO0lBQ1ZDLGlCQUFpQjtJQUNqQkMsc0JBQXNCO0lBQ3RCQyx1QkFBdUI7QUFDekI7QUFFTyxNQUFNL0ksdUJBQXVCO0FBSTdCLE1BQU1ELDhCQUE4QkMsdUJBQXVCO0FBRTNELE1BQU00QixrQkFBa0M7SUFDN0M7UUFBQ29ILElBQUk7UUFBVUMsSUFBSTtJQUFPO0lBQzFCO1FBQUNELElBQUk7UUFBVUMsSUFBSTtJQUFPO0NBQzNCO0FBRU0sTUFBTXhILG9CQUFvQztJQUMvQztRQUFDdUgsSUFBSTtRQUFVQyxJQUFJO0lBQU87SUFDMUI7UUFBQ0QsSUFBSTtRQUFVQyxJQUFJO0lBQVM7Q0FDN0I7QUFFRCxNQUFNQyxZQUE0QjtJQUFDO1FBQUNGLElBQUk7UUFBVUMsSUFBSTtJQUFNO0NBQUU7QUFDdkQsTUFBTWpJLGtCQUFrQztPQUMxQ2tJO0lBQ0g7UUFBQ0YsSUFBSTtRQUFVQyxJQUFJO0lBQU87Q0FDM0I7QUFFTSxNQUFNL0gsMkJBQTJDO0lBQ3REaUksd0JBQWlCLENBQUNDLFNBQVM7Q0FDNUI7QUFFTSxNQUFNNUosOEJBQ1g7QUFDSyxNQUFNQywrQkFDWDtBQUNLLE1BQU1ZLHdCQUF3QjtJQUFDO0lBQVc7Q0FBTztBQUVqRCxNQUFNbUIsZ0JBQWdCO0lBQzNCNkgsU0FBUztJQUNUQyxVQUFVO0lBQ1ZDLFlBQVk7QUFDZDtBQUVPLE1BQU1oSSxpQkFBaUI7QUFFOUIsNEJBQTRCO0FBQzVCLE1BQU1pSSx5Q0FBeUMsS0FBSyxLQUFLO0FBQ2xELE1BQU1wSSwwQ0FBMEM7QUFDaEQsTUFBTUQsbUNBQW1Dc0ksS0FBS0MsS0FBSyxDQUN4REYseUNBQ0VwSSJ9

}),
29089: (function (__unused_webpack_module, exports) {
"use strict";
// Server email configuration

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "USYS_ACCESS_TYPES", ({
    enumerable: true,
    get: function() {
        return USYS_ACCESS_TYPES;
    }
}));
const USYS_ACCESS_TYPES = {
    LOGGED_IN: 'LOGGED_IN',
    ADMIN_ALWAYS_VISIBLE: 'ADMIN_ALWAYS_VISIBLE'
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR5cGVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNlcnZlciBlbWFpbCBjb25maWd1cmF0aW9uXG5leHBvcnQgdHlwZSBNZW1iZXJzaGlwc0RlZmF1bHRFbWFpbEZpZWxkc1R5cGUgPSB7XG4gIHN1YmplY3Q6IHN0cmluZztcbiAgaGVhZGluZzogc3RyaW5nO1xuICBtYWluOiBzdHJpbmc7XG4gIGZpbmVwcmludDogc3RyaW5nO1xuICBhbHRlcm5hdGVFeHBsYWluZXI/OiBzdHJpbmc7XG4gIGNyZWF0ZUFjY291bnRCdXR0b24/OiBzdHJpbmc7XG4gIHJlc2V0QnV0dG9uPzogc3RyaW5nO1xuICBzaXRlUmVkaXJlY3RCdXR0b24/OiBzdHJpbmc7XG4gIHZlcmlmeUJ1dHRvbj86IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIE1lbWJlcnNoaXBzUmVzZXRQYXNzd29yZEVtYWlsRmllbGRzVHlwZSA9XG4gIE1lbWJlcnNoaXBzRGVmYXVsdEVtYWlsRmllbGRzVHlwZSAmIHtcbiAgICBhbHRlcm5hdGVFeHBsYWluZXI6IHN0cmluZztcbiAgICByZXNldEJ1dHRvbjogc3RyaW5nO1xuICB9O1xuXG5leHBvcnQgdHlwZSBNZW1iZXJzaGlwc1dlbGNvbWVFbWFpbEZpZWxkc1R5cGUgPVxuICBNZW1iZXJzaGlwc0RlZmF1bHRFbWFpbEZpZWxkc1R5cGUgJiB7XG4gICAgYWx0ZXJuYXRlRXhwbGFpbmVyOiBzdHJpbmc7XG4gICAgc2l0ZVJlZGlyZWN0QnV0dG9uOiBzdHJpbmc7XG4gIH07XG5cbmV4cG9ydCB0eXBlIE1lbWJlcnNoaXBzVmVyaWZ5RW1haWxGaWVsZHNUeXBlID1cbiAgTWVtYmVyc2hpcHNEZWZhdWx0RW1haWxGaWVsZHNUeXBlICYge1xuICAgIGFsdGVybmF0ZUV4cGxhaW5lcjogc3RyaW5nO1xuICAgIHZlcmlmeUJ1dHRvbjogc3RyaW5nO1xuICB9O1xuXG5leHBvcnQgdHlwZSBNZW1iZXJzaGlwc0ludml0ZUVtYWlsRmllbGRzVHlwZSA9XG4gIE1lbWJlcnNoaXBzRGVmYXVsdEVtYWlsRmllbGRzVHlwZSAmIHtcbiAgICBhbHRlcm5hdGVFeHBsYWluZXI6IHN0cmluZztcbiAgICBjcmVhdGVBY2NvdW50QnV0dG9uOiBzdHJpbmc7XG4gIH07XG5cbmV4cG9ydCB0eXBlIFVzeXNFbWFpbFR5cGUgPSB7XG4gIHJlc2V0UGFzc3dvcmQ6IE1lbWJlcnNoaXBzUmVzZXRQYXNzd29yZEVtYWlsRmllbGRzVHlwZTtcbiAgd2VsY29tZTogTWVtYmVyc2hpcHNXZWxjb21lRW1haWxGaWVsZHNUeXBlO1xuICBpbnZpdGU6IE1lbWJlcnNoaXBzSW52aXRlRW1haWxGaWVsZHNUeXBlO1xuICB1cGRhdGVkUGFzc3dvcmQ6IE1lbWJlcnNoaXBzRGVmYXVsdEVtYWlsRmllbGRzVHlwZTtcbiAgdmVyaWZ5OiBNZW1iZXJzaGlwc1ZlcmlmeUVtYWlsRmllbGRzVHlwZTtcbn07XG5cbi8vIFRlbXBsYXRlIGZpZWxkcyBjb25maWd1cmF0aW9uXG5leHBvcnQgdHlwZSBNZW1iZXJzaGlwc0RlZmF1bHRUZW1wbGF0ZUZpZWxkc1R5cGUgPSB7XG4gIGN1cnJlbnRGaWVsZDogc3RyaW5nO1xuICBzaXRlTmFtZTogc3RyaW5nO1xuICB1c2VyRW1haWw6IHN0cmluZztcbiAgYmdDb2xvcjogc3RyaW5nO1xuICBhY2NlbnRDb2xvcjogc3RyaW5nO1xuICBsaW5rQ29udHJhc3Q6IHN0cmluZztcbiAgYmFja2dyb3VuZENvbnRyYXN0OiBzdHJpbmc7XG4gIGluY2x1ZGVXZkJyYW5kOiBib29sZWFuO1xuICBsb2dvPzogUmVjb3JkPGFueSwgYW55Pjtcbn07XG5cbmV4cG9ydCB0eXBlIE1lbWJlcnNoaXBzRXh0cmFUZW1wbGF0ZUZpZWxkc1R5cGUgPSB7XG4gIHJlc2V0UGFzc3dvcmRMaW5rPzogc3RyaW5nO1xuICBjcmVhdGVBY2NvdW50TGluaz86IHN0cmluZztcbiAgdmVyaWZ5TGluaz86IHN0cmluZztcbiAgc2l0ZVJlZGlyZWN0TGluaz86IHN0cmluZztcbiAgdXNlck5hbWU/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBNZW1iZXJzaGlwc0VtYWlsVGVtcGxhdGVGaWVsZHNUeXBlID1cbiAgTWVtYmVyc2hpcHNEZWZhdWx0VGVtcGxhdGVGaWVsZHNUeXBlICZcbiAgICBNZW1iZXJzaGlwc0RlZmF1bHRFbWFpbEZpZWxkc1R5cGUgJlxuICAgIE1lbWJlcnNoaXBzRXh0cmFUZW1wbGF0ZUZpZWxkc1R5cGU7XG5cbmV4cG9ydCB0eXBlIE1lbWJlcnNoaXBzQnJhbmRpbmdUeXBlID0ge1xuICBsb2dvOiBzdHJpbmc7XG4gIGFjY2VudENvbG9yOiBzdHJpbmc7XG4gIGJnQ29sb3I6IHN0cmluZztcbiAgaW5jbHVkZVdmQnJhbmQ6IGJvb2xlYW47XG59O1xuZXhwb3J0IHR5cGUgVXNlcnNTZXR1cEd1aWRlVHlwZSA9IHtcbiAgaGFzVmlzaXRlZEFjY2Vzc0RlbmllZFBhZ2U6IGJvb2xlYW47XG4gIGhhc1Zpc2l0ZWRMb2dpblBhZ2U6IGJvb2xlYW47XG4gIGhhc1Zpc2l0ZWRTaWduVXBQYWdlOiBib29sZWFuO1xuICBoYXNWaXNpdGVkVXNlckFjY291bnRTZXR0aW5nczogYm9vbGVhbjtcbiAgaGFzVmlzaXRlZFVzZXJBY2NvdW50UGFnZTogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCB0eXBlIE1vY2tVc3lzVXNlciA9IHtcbiAgY29tbW9uRmllbGRzOiB7XG4gICAgZW1haWw6IHN0cmluZztcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBVU1lTX0FDQ0VTU19UWVBFUyA9IHtcbiAgTE9HR0VEX0lOOiAnTE9HR0VEX0lOJyxcbiAgQURNSU5fQUxXQVlTX1ZJU0lCTEU6ICdBRE1JTl9BTFdBWVNfVklTSUJMRScsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgdHlwZSBVc2VyQWNlc3NNZXRhT3B0aW9uID0ga2V5b2YgdHlwZW9mIFVTWVNfQUNDRVNTX1RZUEVTO1xuZXhwb3J0IHR5cGUgVXNlckFjY2Vzc01ldGEgPSBVc2VyQWNlc3NNZXRhT3B0aW9uW107XG5leHBvcnQgdHlwZSBVc3lzQ2FwdGNoYSA9IHtzaXRlS2V5OiBzdHJpbmc7IG1vZGU6IHN0cmluZ30gfCB1bmRlZmluZWQ7XG4iXSwibmFtZXMiOlsiVVNZU19BQ0NFU1NfVFlQRVMiLCJMT0dHRURfSU4iLCJBRE1JTl9BTFdBWVNfVklTSUJMRSJdLCJtYXBwaW5ncyI6IkFBQUEsNkJBQTZCOzs7OzsrQkEyRmhCQTs7O2VBQUFBOzs7QUFBTixNQUFNQSxvQkFBb0I7SUFDL0JDLFdBQVc7SUFDWEMsc0JBQXNCO0FBQ3hCIn0=

}),
30916: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/*
  globals
  document
  window
  HTMLFormElement
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    handleUserAccount: function() {
        return handleUserAccount;
    },
    handleUserSubscriptionLists: function() {
        return handleUserSubscriptionLists;
    }
});
const _constants = __webpack_require__(7462);
const _constants1 = __webpack_require__(10873);
const _RenderingUtils = __webpack_require__(86078);
const _utils = __webpack_require__(56897);
const _queries = __webpack_require__(3671);
const _mutations = __webpack_require__(13197);
const _rendering = __webpack_require__(85513);
const _fields = __webpack_require__(18457);
function asyncGetUserSubscriptions() {
    return _utils.userSystemsRequestClient.query({
        query: _queries.getUserSubscriptions
    });
}
function asyncGetUser(dataFields) {
    return _utils.userSystemsRequestClient.query({
        query: (0, _queries.buildGetLoggedInUserQuery)(dataFields)
    });
}
function asyncSubmitUserData(dataFields) {
    // get variables in correct shape
    const data = (0, _fields.getFieldsAsTypeKeys)(dataFields);
    return _utils.userSystemsRequestClient.mutate({
        mutation: (0, _mutations.buildUpdateUsysUserDataMutation)(dataFields),
        variables: {
            data
        }
    });
}
const subscriptionListSelector = `[${_constants.USYS_DATA_ATTRS.userSubscriptions}]`;
const EmptyStateSelector = `[${_constants.USYS_DATA_ATTRS.userSubscriptionsEmptyState}]`;
const templateSelector = `script[type='${_constants1.WF_TEMPLATE_TYPE}']`;
function getUserSubscriptionLists() {
    const subscriptionLists = document.querySelectorAll(subscriptionListSelector);
    return Array.from(subscriptionLists);
}
const userAccountFormQuerySelector = `form[${_constants.USYS_DATA_ATTRS.formType}="${_constants.USYS_FORM_TYPES.account}"]`;
function getUserAccountForms() {
    const accountForms = document.querySelectorAll(userAccountFormQuerySelector);
    return Array.prototype.slice.call(accountForms).filter((accountForm)=>accountForm instanceof HTMLFormElement);
}
function handleUserSubscriptionLists(domParser) {
    if (window.Webflow.env('design') || window.Webflow.env('preview')) {
        // The usys Apollo client does not work in the Designer and will error out.
        // We are using mocked data in the Designer and Preview mode instead.
        return;
    }
    const subscriptionLists = getUserSubscriptionLists();
    // If we have a list to render, query for the data
    if (subscriptionLists.length > 0) {
        asyncGetUserSubscriptions().then((response)=>{
            const userSubscriptions = response?.data?.database?.userSubscriptions;
            const noUserSubscriptions = userSubscriptions.length === 0;
            if (noUserSubscriptions) return renderEmptySubscriptionList(subscriptionLists);
            renderUserSubscriptionLists(subscriptionLists, domParser, userSubscriptions);
        }).catch((error)=>{
            const graphQLErrors = error?.graphQLErrors || [];
            const errorsHandled = graphQLErrors.reduce(// @ts-expect-error - TS7006 - Parameter 'hasUnhandledError' implicitly has an 'any' type. | TS7006 - Parameter 'graphQLError' implicitly has an 'any' type.
            (hasUnhandledError, graphQLError)=>{
                if (graphQLError?.code === 'NoCommerceCustomerFound') {
                    renderEmptySubscriptionList(subscriptionLists);
                    return hasUnhandledError;
                }
                return false;
            }, graphQLErrors.length > 0);
            if (!errorsHandled) throw error;
        });
    }
}
function renderEmptySubscriptionList(subscriptionListElements) {
    subscriptionListElements.forEach((subscriptionListElement)=>{
        const EmptyStateElement = subscriptionListElement.querySelector(EmptyStateSelector);
        (0, _utils.showElement)(EmptyStateElement);
    });
}
function renderUserSubscriptionLists(subscriptionListElements, domParser, userSubscriptions = []) {
    subscriptionListElements.forEach((subscriptionListElement)=>{
        const EmptyStateElement = subscriptionListElement.querySelector(EmptyStateSelector);
        (0, _utils.hideElement)(EmptyStateElement);
        const templateScript = subscriptionListElement.querySelector(templateSelector);
        if (!templateScript) {
            return;
        }
        const templateId = templateScript.getAttribute('id');
        if (!templateId) {
            return;
        }
        const listWrapperElement = document.querySelector(`[${_constants1.WF_TEMPLATE_ID_DATA_KEY}='${templateId}']`);
        if (!(listWrapperElement instanceof Element)) {
            // If we don't have a wrapper to append items to, return
            return;
        }
        const templateElement = domParser.getHtmlFromString(templateScript.innerHTML);
        if (!(templateElement instanceof Element)) {
            // If there is no template content present, return
            return;
        }
        userSubscriptions.forEach((subscription)=>{
            const templateClone = templateElement.cloneNode(true);
            listWrapperElement.appendChild(templateClone);
            // @ts-expect-error - TS2345 - Argument of type 'Node' is not assignable to parameter of type 'Element'.
            (0, _RenderingUtils.walkDOM)(templateClone, (node)=>{
                (0, _rendering.applyBindingsAndConditionalVisibility)(node, subscription);
                // Add handler for cancel subscription button. Done here since we have access to subscription id.
                if (node.hasAttribute(_constants.USYS_DATA_ATTRS.subscriptionCancel)) {
                    // @ts-expect-error - TS2339 - Property '_id' does not exist on type 'never'.
                    addCancelButtonEventListener(node, subscription._id);
                }
            });
        });
    });
}
function addCancelButtonEventListener(node, subscriptionId) {
    node.addEventListener('click', function() {
        _utils.userSystemsRequestClient.mutate({
            mutation: _mutations.cancelSubscriptionMutation,
            variables: {
                subscriptionId
            }
        }).then(()=>{
            // Refresh so can refetch and rerender with updated status of subscription after cancelation
            // Ultimately we should probably do a re fetch adn re render render, but will require replacing existing nodes
            window.location.reload();
        });
    });
}
function handleUserAccount() {
    // UserAccountWrapper
    const userAccount = document.querySelector(`[${_constants.USYS_DATA_ATTRS.userAccount}]`);
    if (!userAccount || window.Webflow.env('design') || window.Webflow.env('preview')) {
        return;
    }
    const successMessage = userAccount.querySelector('.' + _constants.USYS_DOM_CLASS_NAMES.formSuccess);
    const errorMessage = userAccount.querySelector('.' + _constants.USYS_DOM_CLASS_NAMES.formError);
    const userAccountForms = getUserAccountForms();
    if (userAccountForms.length > 0) {
        const fields = (0, _fields.getFieldsForFetch)(userAccountForms);
        asyncGetUser(fields).then((response)=>{
            const siteUser = response?.data?.site?.siteUser;
            if (!siteUser) return;
            const userData = siteUser.data;
            userAccountForms.forEach((accountForm)=>{
                (0, _RenderingUtils.walkDOM)(userAccount, (node)=>{
                    (0, _rendering.applyUserAccountData)(node, userData);
                });
                if (!(accountForm instanceof HTMLFormElement)) return;
                const submit = accountForm.querySelector('input[type="submit"]');
                accountForm.addEventListener('submit', (event)=>{
                    event.preventDefault();
                    const form = event.currentTarget;
                    if (!(form instanceof HTMLFormElement)) {
                        return;
                    }
                    // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
                    (0, _utils.hideElement)(successMessage);
                    // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
                    (0, _utils.hideElement)(errorMessage);
                    const submitText = (0, _utils.disableSubmit)(submit);
                    const commonFields = (0, _fields.getCommonFields)(form, [
                        'name',
                        'accept-communications'
                    ]);
                    const customFields = (0, _fields.getCustomFields)(form);
                    asyncSubmitUserData([
                        ...commonFields,
                        ...customFields
                    ]).then((res)=>{
                        const newUserData = res && res.data && res.data.usysUpdateUserData && res.data.usysUpdateUserData.data;
                        if (newUserData) {
                            // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                            addResetEventListener(accountForm, userAccount, newUserData);
                        }
                        // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                        successMessage && (0, _utils.showAndFocusElement)(successMessage);
                    })// @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null'.
                    .catch((0, _utils.userFormError)(form, errorMessage, 'ACCOUNT_UPDATE')).finally(()=>{
                        (0, _utils.resetSubmit)(submit, submitText);
                    });
                });
                accountForm.querySelectorAll('input').forEach((input)=>input.addEventListener('input', ()=>{
                        // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
                        (0, _utils.hideElement)(successMessage);
                        // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
                        (0, _utils.hideElement)(errorMessage);
                    }));
                // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                addResetEventListener(accountForm, userAccount, userData);
            });
        });
    }
}
const addResetEventListener = (accountForm, userAccount, userData)=>{
    accountForm.addEventListener('reset', (event)=>{
        event.preventDefault();
        const form = event.currentTarget;
        if (!(form instanceof HTMLFormElement)) return;
        if (userData) {
            // apply saved user account data
            (0, _RenderingUtils.walkDOM)(userAccount, (node)=>{
                (0, _rendering.applyUserAccountData)(node, userData);
            });
        }
    });
};

//# sourceMappingURL=data:application/json;base64,

}),
18457: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/*
  globals
  HTMLInputElement
  HTMLSelectElement
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    commonFields: function() {
        return commonFields;
    },
    getCommonFields: function() {
        return getCommonFields;
    },
    getCustomFields: function() {
        return getCustomFields;
    },
    getFieldValueById: function() {
        return getFieldValueById;
    },
    getFieldsAsTypeKeys: function() {
        return getFieldsAsTypeKeys;
    },
    getFieldsForFetch: function() {
        return getFieldsForFetch;
    }
});
const _constants = __webpack_require__(7462);
const _universalUtils = __webpack_require__(62467);
const getTextInput = (element)=>element instanceof HTMLInputElement ? element.value : '';
const typeGetter = {
    PlainText: getTextInput,
    Email: getTextInput,
    Bool: (element)=>element instanceof HTMLInputElement ? element.checked : false,
    Number: getTextInput,
    Option: (element)=>element instanceof HTMLSelectElement ? element.value : '',
    Link: getTextInput,
    FileRef: (element)=>{
        const fileKey = (0, _universalUtils.getUserFileKey)(element);
        const tempFileKey = (0, _universalUtils.getTempUserFileKey)(element);
        if (tempFileKey) {
            // change file
            return {
                key: tempFileKey
            };
        }
        if (fileKey === 'DELETE') {
            // delete file
            return null;
        }
        if (fileKey) {
            // preserve existing file
            return {
                _id: fileKey
            };
        }
    }
};
const customFieldTypes = [
    'PlainText',
    'Bool',
    'Email',
    'Number',
    'Option',
    'Link',
    'FileRef'
];
const commonFields = [
    {
        type: 'Email',
        slug: 'email',
        selector: (container)=>container.querySelector(`input[${_constants.USYS_DATA_ATTRS.inputType}="${_constants.USYS_INPUT_TYPES.email}"]`)
    },
    {
        type: 'PlainText',
        slug: 'name',
        selector: (container)=>container.querySelector(`input[${_constants.USYS_DATA_ATTRS.field}="${_constants.RESERVED_USER_FIELDS.name}"]`) || container.querySelector(`input[${_constants.USYS_DATA_ATTRS.inputType}="${_constants.USYS_INPUT_TYPES.name}"]`)
    },
    {
        type: 'PlainText',
        slug: 'password',
        selector: (container)=>container.querySelector(`input[${_constants.USYS_DATA_ATTRS.inputType}="${_constants.USYS_INPUT_TYPES.password}"]`)
    },
    {
        type: 'Bool',
        slug: 'accept-privacy',
        selector: (container)=>container.querySelector(`input[${_constants.USYS_DATA_ATTRS.field}="${_constants.RESERVED_USER_FIELDS.acceptPrivacy}"]`) || container.querySelector(`input[${_constants.USYS_DATA_ATTRS.inputType}="${_constants.USYS_INPUT_TYPES.acceptPrivacy}"]`)
    },
    {
        type: 'Bool',
        slug: 'accept-communications',
        selector: (container)=>container.querySelector(`input[${_constants.USYS_DATA_ATTRS.field}="${_constants.RESERVED_USER_FIELDS.acceptCommunications}"]`)
    }
];
const toCamelCase = (str)=>{
    // Handle kebab-case to PascalCase
    const pascalCase = str.split('-').map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join('');
    // return camelCase
    return pascalCase.charAt(0).toLowerCase() + pascalCase.slice(1);
};
const getCommonFields = (form, requestedFields)=>{
    const payload = [];
    commonFields.forEach((field)=>{
        if (requestedFields && !requestedFields.includes(field.slug)) return;
        const ele = field.selector(form);
        if (!ele || !typeGetter[field.type]) return;
        payload.push({
            key: toCamelCase(field.slug),
            type: toCamelCase(field.type),
            id: field.slug,
            value: typeGetter[field.type](ele, field.id)
        });
    });
    return payload;
};
const getCustomFields = (form, includeValue = true)=>{
    const payload = [];
    customFieldTypes.forEach((fieldType)=>{
        const camelFieldType = toCamelCase(fieldType);
        const inputEles = form.querySelectorAll(`input[${_constants.USYS_DATA_ATTRS.fieldType}="${fieldType}"], select[${_constants.USYS_DATA_ATTRS.fieldType}="${fieldType}"]`);
        if (inputEles.length === 0 || !typeGetter[fieldType]) return;
        inputEles.forEach((ele)=>{
            const id = ele.getAttribute(_constants.USYS_DATA_ATTRS.field);
            if (!id) return;
            const elementData = {
                key: `f_${id}`,
                type: camelFieldType,
                id
            };
            if (includeValue) {
                const value = typeGetter[fieldType](ele, id);
                if (value === '') {
                    elementData.value = null;
                } else {
                    elementData.value = value;
                }
            }
            payload.push(elementData);
        });
    });
    return payload;
};
const getFieldsForFetch = (forms)=>{
    const custom = [];
    const nested = [];
    const alreadyFound = (customField)=>{
        return custom.find((item)=>item.id === customField.id);
    };
    forms.forEach((form)=>{
        nested.push([
            ...getCommonFields(form),
            ...getCustomFields(form, false)
        ]);
    });
    nested.forEach((getCustomFieldRes)=>{
        getCustomFieldRes.forEach((customField)=>{
            if (!alreadyFound(customField)) {
                custom.push(customField);
            }
        });
    });
    return custom;
};
function getFieldValueById(id, fieldsArray) {
    const match = fieldsArray.find((field)=>field.id === id);
    if (!match) return null;
    return match.value;
}
function getFieldsAsTypeKeys(fieldsArray) {
    const memo = {};
    fieldsArray.forEach((field)=>{
        const { key, type, value } = field;
        if (!memo[type]) memo[type] = [];
        memo[type].push({
            id: key.replace('f_', ''),
            value
        });
    });
    return memo;
}

//# sourceMappingURL=data:application/json;base64,

}),
66551: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    usysFormBundle: function() {
        return usysFormBundle;
    },
    usysSiteBundle: function() {
        return usysSiteBundle;
    }
});
__webpack_require__(52897);
__webpack_require__(233);
__webpack_require__(49754);
__webpack_require__(30971);
__webpack_require__(62374);
__webpack_require__(55152);
__webpack_require__(35273);
__webpack_require__(30172);
__webpack_require__(67304);
__webpack_require__(14362);
const _login = __webpack_require__(69263);
const _signup = __webpack_require__(54284);
const _logout = __webpack_require__(87021);
const _resetPassword = __webpack_require__(63245);
const _updatePassword = __webpack_require__(10104);
const _account = __webpack_require__(30916);
const _utils = _export_star(__webpack_require__(56897), exports);
const _usysForm = __webpack_require__(65438);
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
const usysSiteBundle = ()=>{
    function init() {
        const domParser = (0, _utils.getDomParser)();
        (0, _login.handleLogInForms)();
        (0, _login.handleLoginRedirects)();
        (0, _signup.handleSignUpForms)();
        (0, _logout.handleLogInLogOutButton)();
        (0, _resetPassword.handleResetPasswordForms)();
        (0, _updatePassword.handleUpdatePasswordForms)();
        (0, _account.handleUserAccount)();
        (0, _account.handleUserSubscriptionLists)(domParser);
    }
    const ready = init;
    const design = init;
    const preview = init;
    return {
        init,
        ready,
        design,
        preview
    };
};
const usysFormBundle = function(env) {
    function init() {
        if (env('design')) return;
        (0, _usysForm.handleFields)();
    }
    return {
        init,
        ready: init,
        preview: init
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAncHJvbWlzZS1wb2x5ZmlsbC9zcmMvcG9seWZpbGwnO1xuaW1wb3J0ICd1bmZldGNoL3BvbHlmaWxsJztcbi8vIElFMTEgY3Jhc2hlcyB3aGVtIFVSTFNlYXJjaFBhcmFtcyBpcyB1c2VkXG5pbXBvcnQgJ2NvcmUtanMvd2ViL3VybC1zZWFyY2gtcGFyYW1zJztcbi8vIEF0IGEgbWluaW11bSwgd2UgbmVlZCBgQXJyYXkuZnJvbWAgc3VwcG9ydCBpbiBJRTExXG5pbXBvcnQgJ2NvcmUtanMvZmVhdHVyZXMvYXJyYXknO1xuXG5pbXBvcnQge2hhbmRsZUxvZ0luRm9ybXMsIGhhbmRsZUxvZ2luUmVkaXJlY3RzfSBmcm9tICcuL2xvZ2luJztcbmltcG9ydCB7aGFuZGxlU2lnblVwRm9ybXN9IGZyb20gJy4vc2lnbnVwJztcbmltcG9ydCB7aGFuZGxlTG9nSW5Mb2dPdXRCdXR0b259IGZyb20gJy4vbG9nb3V0JztcbmltcG9ydCB7aGFuZGxlUmVzZXRQYXNzd29yZEZvcm1zfSBmcm9tICcuL3Jlc2V0UGFzc3dvcmQnO1xuaW1wb3J0IHtoYW5kbGVVcGRhdGVQYXNzd29yZEZvcm1zfSBmcm9tICcuL3VwZGF0ZVBhc3N3b3JkJztcbmltcG9ydCB7aGFuZGxlVXNlckFjY291bnQsIGhhbmRsZVVzZXJTdWJzY3JpcHRpb25MaXN0c30gZnJvbSAnLi9hY2NvdW50JztcbmltcG9ydCB7Z2V0RG9tUGFyc2VyfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7aGFuZGxlRmllbGRzfSBmcm9tICcuL3VzeXNGb3JtJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgY29uc3QgdXN5c1NpdGVCdW5kbGUgPSAoKSA9PiB7XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgY29uc3QgZG9tUGFyc2VyID0gZ2V0RG9tUGFyc2VyKCk7XG4gICAgaGFuZGxlTG9nSW5Gb3JtcygpO1xuICAgIGhhbmRsZUxvZ2luUmVkaXJlY3RzKCk7XG4gICAgaGFuZGxlU2lnblVwRm9ybXMoKTtcbiAgICBoYW5kbGVMb2dJbkxvZ091dEJ1dHRvbigpO1xuICAgIGhhbmRsZVJlc2V0UGFzc3dvcmRGb3JtcygpO1xuICAgIGhhbmRsZVVwZGF0ZVBhc3N3b3JkRm9ybXMoKTtcbiAgICBoYW5kbGVVc2VyQWNjb3VudCgpO1xuICAgIGhhbmRsZVVzZXJTdWJzY3JpcHRpb25MaXN0cyhkb21QYXJzZXIpO1xuICB9XG5cbiAgY29uc3QgcmVhZHkgPSBpbml0O1xuICBjb25zdCBkZXNpZ24gPSBpbml0O1xuICBjb25zdCBwcmV2aWV3ID0gaW5pdDtcblxuICByZXR1cm4ge1xuICAgIGluaXQsXG4gICAgcmVhZHksXG4gICAgZGVzaWduLFxuICAgIHByZXZpZXcsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgdXN5c0Zvcm1CdW5kbGUgPSBmdW5jdGlvbiAoZW52KSB7XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgaWYgKGVudignZGVzaWduJykpIHJldHVybjtcbiAgICBoYW5kbGVGaWVsZHMoKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGluaXQsXG4gICAgcmVhZHk6IGluaXQsXG4gICAgcHJldmlldzogaW5pdCxcbiAgfTtcbn07XG4iXSwibmFtZXMiOlsidXN5c0Zvcm1CdW5kbGUiLCJ1c3lzU2l0ZUJ1bmRsZSIsImluaXQiLCJkb21QYXJzZXIiLCJnZXREb21QYXJzZXIiLCJoYW5kbGVMb2dJbkZvcm1zIiwiaGFuZGxlTG9naW5SZWRpcmVjdHMiLCJoYW5kbGVTaWduVXBGb3JtcyIsImhhbmRsZUxvZ0luTG9nT3V0QnV0dG9uIiwiaGFuZGxlUmVzZXRQYXNzd29yZEZvcm1zIiwiaGFuZGxlVXBkYXRlUGFzc3dvcmRGb3JtcyIsImhhbmRsZVVzZXJBY2NvdW50IiwiaGFuZGxlVXNlclN1YnNjcmlwdGlvbkxpc3RzIiwicmVhZHkiLCJkZXNpZ24iLCJwcmV2aWV3IiwiZW52IiwiaGFuZGxlRmllbGRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQTBDYUEsY0FBYztlQUFkQTs7SUF6QkFDLGNBQWM7ZUFBZEE7Ozs7Ozs7Ozs7O1FBakJOO1FBQ0E7dUJBTThDO3dCQUNyQjt3QkFDTTsrQkFDQztnQ0FDQzt5QkFDcUI7b0NBQ2xDOzBCQUNBOzs7Ozs7Ozs7Ozs7OztBQUdwQixNQUFNQSxpQkFBaUI7SUFDNUIsU0FBU0M7UUFDUCxNQUFNQyxZQUFZQyxJQUFBQSxtQkFBWTtRQUM5QkMsSUFBQUEsdUJBQWdCO1FBQ2hCQyxJQUFBQSwyQkFBb0I7UUFDcEJDLElBQUFBLHlCQUFpQjtRQUNqQkMsSUFBQUEsK0JBQXVCO1FBQ3ZCQyxJQUFBQSx1Q0FBd0I7UUFDeEJDLElBQUFBLHlDQUF5QjtRQUN6QkMsSUFBQUEsMEJBQWlCO1FBQ2pCQyxJQUFBQSxvQ0FBMkIsRUFBQ1Q7SUFDOUI7SUFFQSxNQUFNVSxRQUFRWDtJQUNkLE1BQU1ZLFNBQVNaO0lBQ2YsTUFBTWEsVUFBVWI7SUFFaEIsT0FBTztRQUNMQTtRQUNBVztRQUNBQztRQUNBQztJQUNGO0FBQ0Y7QUFFTyxNQUFNZixpQkFBaUIsU0FBVWdCLEdBQUc7SUFDekMsU0FBU2Q7UUFDUCxJQUFJYyxJQUFJLFdBQVc7UUFDbkJDLElBQUFBLHNCQUFZO0lBQ2Q7SUFDQSxPQUFPO1FBQ0xmO1FBQ0FXLE9BQU9YO1FBQ1BhLFNBQVNiO0lBQ1g7QUFDRiJ9

}),
69263: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/*
  globals
  document,
  window,
  HTMLFormElement,
  HTMLInputElement
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    asyncLogInUser: function() {
        return asyncLogInUser;
    },
    handleLogInForms: function() {
        return handleLogInForms;
    },
    handleLoginRedirects: function() {
        return handleLoginRedirects;
    }
});
const _utils = __webpack_require__(56897);
const _constants = __webpack_require__(7462);
const _mutations = __webpack_require__(13197);
function getLoginLinks() {
    return Array.prototype.slice.call(document.links).filter((link)=>link.getAttribute('href') === '/log-in');
}
function handleLoginRedirects() {
    getLoginLinks().forEach((link)=>{
        const queryString = window.location.search;
        const redirectParam = queryString.match(/\?usredir=([^&]+)/g);
        if (redirectParam) {
            link.href = link.href.concat(redirectParam[0]);
        }
    });
}
const loginFormQuerySelector = `form[${_constants.USYS_DATA_ATTRS.formType}="${_constants.USYS_FORM_TYPES.login}"]`;
// error handling
const errorState = document.querySelector(`[${_constants.USYS_DATA_ATTRS.formError}]`);
const defaultErrorCopy = // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
_constants.logInErrorStates[_constants.LOGIN_UI_ERROR_CODES.GENERAL_ERROR].copy;
const errorMsgNode = document.querySelector(`.${_constants.ERROR_MSG_CLASS}`);
const getLogInErrorCode = (error)=>{
    let errorCode;
    switch(error){
        case 'UsysInvalidCredentials':
            errorCode = _constants.LOGIN_UI_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD;
            break;
        default:
            errorCode = _constants.LOGIN_UI_ERROR_CODES.GENERAL_ERROR;
    }
    return errorCode;
};
function getLoginForms() {
    const loginForms = document.querySelectorAll(loginFormQuerySelector);
    return Array.prototype.slice.call(loginForms).filter((loginForm)=>loginForm instanceof HTMLFormElement);
}
function handleLogInForms() {
    getLoginForms().forEach((loginForm)=>{
        loginForm.addEventListener('submit', (event)=>{
            event.preventDefault();
            const form = event.currentTarget;
            if (!(form instanceof HTMLFormElement)) {
                return;
            }
            const submit = form.querySelector('input[type="submit"]');
            const submitText = (0, _utils.disableSubmit)(submit);
            // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
            (0, _utils.hideElement)(errorState);
            const emailInput = form.querySelector(`input[${_constants.USYS_DATA_ATTRS.inputType}="${_constants.USYS_INPUT_TYPES.email}"]`);
            const passwordInput = form.querySelector(`input[${_constants.USYS_DATA_ATTRS.inputType}="${_constants.USYS_INPUT_TYPES.password}"]`);
            if (!(emailInput instanceof HTMLInputElement) || !(passwordInput instanceof HTMLInputElement)) {
                return;
            }
            const onSuccessRedirectUrl = form.getAttribute(_constants.USYS_DATA_ATTRS.redirectUrl);
            asyncLogInUser(emailInput.value, passwordInput.value).then(()=>{
                // If there is a redirect param, redirect to that href after log-in.
                (0, _utils.handleRedirect)(onSuccessRedirectUrl);
            }).catch((error)=>{
                // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null'.
                (0, _utils.resetSubmit)(submit, submitText);
                if (errorState) {
                    // if there isn't an error code, send an empty string so a generic error message appears
                    const elementErrorCode = error?.graphQLErrors?.[0]?.code ?? '';
                    const errorCode = getLogInErrorCode(elementErrorCode);
                    (0, _utils.handleErrorNode)(errorMsgNode, // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                    errorState, errorCode, _constants.ERROR_ATTRIBUTE_PREFIX.LOGIN, defaultErrorCopy);
                }
            });
        });
    });
}
function asyncLogInUser(email, password) {
    return _utils.userSystemsRequestClient.mutate({
        mutation: _mutations.loginMutation,
        variables: {
            email,
            authPassword: password
        }
    });
}

//# sourceMappingURL=data:application/json;base64,

}),
87021: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/*
  globals
  window,
  document,
  HTMLButtonElement
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    asyncLogOutUser: function() {
        return asyncLogOutUser;
    },
    handleLogInLogOutButton: function() {
        return handleLogInLogOutButton;
    }
});
const _utils = __webpack_require__(56897);
const _constants = __webpack_require__(7462);
const _mutations = __webpack_require__(13197);
const logoutButtonQuerySelector = `[${_constants.USYS_DATA_ATTRS.logout}]`;
function getLogoutButtons() {
    const logoutButtons = document.querySelectorAll(logoutButtonQuerySelector);
    return Array.prototype.slice.call(logoutButtons).filter((logoutButton)=>logoutButton instanceof HTMLButtonElement);
}
function handleGoToLoginClick() {
    if (window.Webflow.env('preview')) {
        return;
    }
    // @ts-expect-error - TS2322 - Type 'string' is not assignable to type 'Location | (string & Location)'.
    window.location = '/log-in';
}
function handleLogOutButtonClick(event) {
    event.preventDefault();
    asyncLogOutUser().then(()=>{
        // @ts-expect-error - TS2339 - Property 'Webflow' does not exist on type 'Window & typeof globalThis'.
        window.Webflow.location('/');
    });
}
function handleLogInLogOutButton() {
    getLogoutButtons().forEach((logoutButton)=>{
        if (document.cookie.split(';').some((cookie)=>cookie.indexOf(_constants.LOGGEDIN_COOKIE_NAME) > -1)) {
            logoutButton.innerHTML = logoutButton.getAttribute(_constants.USYS_DATA_ATTRS.logout) || 'Log out';
            logoutButton.removeEventListener('click', handleGoToLoginClick);
            logoutButton.addEventListener('click', handleLogOutButtonClick);
        } else if (!window.Webflow.env('design')) {
            logoutButton.innerHTML = logoutButton.getAttribute(_constants.USYS_DATA_ATTRS.login) || 'Log in';
            logoutButton.removeEventListener('click', handleLogOutButtonClick);
            logoutButton.addEventListener('click', handleGoToLoginClick);
        }
    });
}
function asyncLogOutUser() {
    return _utils.userSystemsRequestClient.mutate({
        mutation: _mutations.logoutMutation
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ291dC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICBnbG9iYWxzXG4gIHdpbmRvdyxcbiAgZG9jdW1lbnQsXG4gIEhUTUxCdXR0b25FbGVtZW50XG4qL1xuXG5pbXBvcnQge3VzZXJTeXN0ZW1zUmVxdWVzdENsaWVudH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQge1xuICBVU1lTX0RBVEFfQVRUUlMsXG4gIExPR0dFRElOX0NPT0tJRV9OQU1FLFxufSBmcm9tICdAcGFja2FnZXMvc3lzdGVtcy91c2Vycy9jb25zdGFudHMnO1xuaW1wb3J0IHtsb2dvdXRNdXRhdGlvbn0gZnJvbSAnLi9tdXRhdGlvbnMnO1xuXG5jb25zdCBsb2dvdXRCdXR0b25RdWVyeVNlbGVjdG9yID0gYFske1VTWVNfREFUQV9BVFRSUy5sb2dvdXR9XWA7XG5cbmZ1bmN0aW9uIGdldExvZ291dEJ1dHRvbnMoKSB7XG4gIGNvbnN0IGxvZ291dEJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGxvZ291dEJ1dHRvblF1ZXJ5U2VsZWN0b3IpO1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlXG4gICAgLmNhbGwobG9nb3V0QnV0dG9ucylcbiAgICAuZmlsdGVyKChsb2dvdXRCdXR0b24pID0+IGxvZ291dEJ1dHRvbiBpbnN0YW5jZW9mIEhUTUxCdXR0b25FbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlR29Ub0xvZ2luQ2xpY2soKSB7XG4gIGlmICh3aW5kb3cuV2ViZmxvdy5lbnYoJ3ByZXZpZXcnKSkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMyMzIyIC0gVHlwZSAnc3RyaW5nJyBpcyBub3QgYXNzaWduYWJsZSB0byB0eXBlICdMb2NhdGlvbiB8IChzdHJpbmcgJiBMb2NhdGlvbiknLlxuICB3aW5kb3cubG9jYXRpb24gPSAnL2xvZy1pbic7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUxvZ091dEJ1dHRvbkNsaWNrKGV2ZW50OiBFdmVudCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gIGFzeW5jTG9nT3V0VXNlcigpLnRoZW4oKCkgPT4ge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzIzMzkgLSBQcm9wZXJ0eSAnV2ViZmxvdycgZG9lcyBub3QgZXhpc3Qgb24gdHlwZSAnV2luZG93ICYgdHlwZW9mIGdsb2JhbFRoaXMnLlxuICAgIHdpbmRvdy5XZWJmbG93LmxvY2F0aW9uKCcvJyk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlTG9nSW5Mb2dPdXRCdXR0b24oKSB7XG4gIGdldExvZ291dEJ1dHRvbnMoKS5mb3JFYWNoKChsb2dvdXRCdXR0b24pID0+IHtcbiAgICBpZiAoXG4gICAgICBkb2N1bWVudC5jb29raWVcbiAgICAgICAgLnNwbGl0KCc7JylcbiAgICAgICAgLnNvbWUoKGNvb2tpZSkgPT4gY29va2llLmluZGV4T2YoTE9HR0VESU5fQ09PS0lFX05BTUUpID4gLTEpXG4gICAgKSB7XG4gICAgICBsb2dvdXRCdXR0b24uaW5uZXJIVE1MID1cbiAgICAgICAgbG9nb3V0QnV0dG9uLmdldEF0dHJpYnV0ZShVU1lTX0RBVEFfQVRUUlMubG9nb3V0KSB8fCAnTG9nIG91dCc7XG4gICAgICBsb2dvdXRCdXR0b24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVHb1RvTG9naW5DbGljayk7XG4gICAgICBsb2dvdXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVMb2dPdXRCdXR0b25DbGljayk7XG4gICAgfSBlbHNlIGlmICghd2luZG93LldlYmZsb3cuZW52KCdkZXNpZ24nKSkge1xuICAgICAgbG9nb3V0QnV0dG9uLmlubmVySFRNTCA9XG4gICAgICAgIGxvZ291dEJ1dHRvbi5nZXRBdHRyaWJ1dGUoVVNZU19EQVRBX0FUVFJTLmxvZ2luKSB8fCAnTG9nIGluJztcbiAgICAgIGxvZ291dEJ1dHRvbi5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUxvZ091dEJ1dHRvbkNsaWNrKTtcbiAgICAgIGxvZ291dEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUdvVG9Mb2dpbkNsaWNrKTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXN5bmNMb2dPdXRVc2VyKCkge1xuICByZXR1cm4gdXNlclN5c3RlbXNSZXF1ZXN0Q2xpZW50Lm11dGF0ZSh7XG4gICAgbXV0YXRpb246IGxvZ291dE11dGF0aW9uLFxuICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJhc3luY0xvZ091dFVzZXIiLCJoYW5kbGVMb2dJbkxvZ091dEJ1dHRvbiIsImxvZ291dEJ1dHRvblF1ZXJ5U2VsZWN0b3IiLCJVU1lTX0RBVEFfQVRUUlMiLCJsb2dvdXQiLCJnZXRMb2dvdXRCdXR0b25zIiwibG9nb3V0QnV0dG9ucyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiZmlsdGVyIiwibG9nb3V0QnV0dG9uIiwiSFRNTEJ1dHRvbkVsZW1lbnQiLCJoYW5kbGVHb1RvTG9naW5DbGljayIsIndpbmRvdyIsIldlYmZsb3ciLCJlbnYiLCJsb2NhdGlvbiIsImhhbmRsZUxvZ091dEJ1dHRvbkNsaWNrIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInRoZW4iLCJmb3JFYWNoIiwiY29va2llIiwic3BsaXQiLCJzb21lIiwiaW5kZXhPZiIsIkxPR0dFRElOX0NPT0tJRV9OQU1FIiwiaW5uZXJIVE1MIiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJsb2dpbiIsInVzZXJTeXN0ZW1zUmVxdWVzdENsaWVudCIsIm11dGF0ZSIsIm11dGF0aW9uIiwibG9nb3V0TXV0YXRpb24iXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUtBOzs7Ozs7Ozs7OztJQXVEZ0JBLGVBQWU7ZUFBZkE7O0lBcEJBQyx1QkFBdUI7ZUFBdkJBOzs7dUJBakN1QjsyQkFJaEM7MkJBQ3NCO0FBRTdCLE1BQU1DLDRCQUE0QixDQUFDLENBQUMsRUFBRUMsMEJBQWUsQ0FBQ0MsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUUvRCxTQUFTQztJQUNQLE1BQU1DLGdCQUFnQkMsU0FBU0MsZ0JBQWdCLENBQUNOO0lBQ2hELE9BQU9PLE1BQU1DLFNBQVMsQ0FBQ0MsS0FBSyxDQUN6QkMsSUFBSSxDQUFDTixlQUNMTyxNQUFNLENBQUMsQ0FBQ0MsZUFBaUJBLHdCQUF3QkM7QUFDdEQ7QUFFQSxTQUFTQztJQUNQLElBQUlDLE9BQU9DLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFlBQVk7UUFDakM7SUFDRjtJQUNBLHdHQUF3RztJQUN4R0YsT0FBT0csUUFBUSxHQUFHO0FBQ3BCO0FBRUEsU0FBU0Msd0JBQXdCQyxLQUFZO0lBQzNDQSxNQUFNQyxjQUFjO0lBRXBCdkIsa0JBQWtCd0IsSUFBSSxDQUFDO1FBQ3JCLHNHQUFzRztRQUN0R1AsT0FBT0MsT0FBTyxDQUFDRSxRQUFRLENBQUM7SUFDMUI7QUFDRjtBQUVPLFNBQVNuQjtJQUNkSSxtQkFBbUJvQixPQUFPLENBQUMsQ0FBQ1g7UUFDMUIsSUFDRVAsU0FBU21CLE1BQU0sQ0FDWkMsS0FBSyxDQUFDLEtBQ05DLElBQUksQ0FBQyxDQUFDRixTQUFXQSxPQUFPRyxPQUFPLENBQUNDLCtCQUFvQixJQUFJLENBQUMsSUFDNUQ7WUFDQWhCLGFBQWFpQixTQUFTLEdBQ3BCakIsYUFBYWtCLFlBQVksQ0FBQzdCLDBCQUFlLENBQUNDLE1BQU0sS0FBSztZQUN2RFUsYUFBYW1CLG1CQUFtQixDQUFDLFNBQVNqQjtZQUMxQ0YsYUFBYW9CLGdCQUFnQixDQUFDLFNBQVNiO1FBQ3pDLE9BQU8sSUFBSSxDQUFDSixPQUFPQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxXQUFXO1lBQ3hDTCxhQUFhaUIsU0FBUyxHQUNwQmpCLGFBQWFrQixZQUFZLENBQUM3QiwwQkFBZSxDQUFDZ0MsS0FBSyxLQUFLO1lBQ3REckIsYUFBYW1CLG1CQUFtQixDQUFDLFNBQVNaO1lBQzFDUCxhQUFhb0IsZ0JBQWdCLENBQUMsU0FBU2xCO1FBQ3pDO0lBQ0Y7QUFDRjtBQUVPLFNBQVNoQjtJQUNkLE9BQU9vQywrQkFBd0IsQ0FBQ0MsTUFBTSxDQUFDO1FBQ3JDQyxVQUFVQyx5QkFBYztJQUMxQjtBQUNGIn0=

}),
13197: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    buildUpdateUsysUserDataMutation: function() {
        return buildUpdateUsysUserDataMutation;
    },
    cancelSubscriptionMutation: function() {
        return cancelSubscriptionMutation;
    },
    getUploadURLMutation: function() {
        return getUploadURLMutation;
    },
    loginMutation: function() {
        return loginMutation;
    },
    logoutMutation: function() {
        return logoutMutation;
    },
    resetPasswordMutation: function() {
        return resetPasswordMutation;
    },
    signupMutation: function() {
        return signupMutation;
    },
    updatePasswordMutation: function() {
        return updatePasswordMutation;
    },
    verifyEmailMutation: function() {
        return verifyEmailMutation;
    }
});
const _graphqltag = /*#__PURE__*/ _interop_require_default(__webpack_require__(28160));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const loginMutation = (0, _graphqltag.default)`
  mutation UserLoginRequest($email: String!, $authPassword: String!) {
    usysCreateSession(email: $email, authPassword: $authPassword) {
      user {
        id
        email
        createdOn
        emailVerified
      }
    }
  }
`;
function buildUpdateUsysUserDataMutation(dataFields) {
    return (0, _graphqltag.default)`
    mutation UpdateUsysUserData(
      $data: usys_update_user_data!
    ) {
      usysUpdateUserData(
        data: $data
    ) {
      data {
      ${dataFields.map((field)=>{
        const base = `${field.key}: ${field.type}(id: "${field.id}")`;
        if (field.type === 'option') {
            return base + '{\n slug \n}';
        }
        if (field.type === 'fileRef') {
            return base + '{\n id \n}';
        }
        return base;
    }).join('\n')}
        }
      }
    }
  `;
}
const signupMutation = (0, _graphqltag.default)`
  mutation UserSignupRequest(
    $email: String!
    $name: String!
    $acceptPrivacy: Boolean
    $acceptCommunications: Boolean
    $authPassword: String!
    $inviteToken: String
    $captchaToken: String
    $redirectPath: String
    $data: usys_update_user_data
  ) {
    usysCreateUser(
      email: $email
      name: $name
      acceptPrivacy: $acceptPrivacy
      acceptCommunications: $acceptCommunications
      authPassword: $authPassword
      inviteToken: $inviteToken
      captchaToken: $captchaToken
      redirectPath: $redirectPath
      data: $data
    ) {
      user {
        id
        email
        name
        createdOn
        emailVerified
      }
    }
  }
`;
const logoutMutation = (0, _graphqltag.default)`
  mutation UserLogoutRequest {
    usysDestroySession {
      ok
    }
  }
`;
const resetPasswordMutation = (0, _graphqltag.default)`
  mutation UserResetPasswordRequest($email: String!) {
    usysResetPassword(email: $email) {
      ok
    }
  }
`;
const updatePasswordMutation = (0, _graphqltag.default)`
  mutation UserUpdatePasswordRequest($authPassword: String!, $token: String!) {
    usysUpdatePassword(authPassword: $authPassword, token: $token) {
      ok
    }
  }
`;
const verifyEmailMutation = (0, _graphqltag.default)`
  mutation UserVerifyEmail($verifyToken: String!, $redirectPath: String) {
    usysVerifyEmail(verifyToken: $verifyToken, redirectPath: $redirectPath) {
      ok
    }
  }
`;
const cancelSubscriptionMutation = (0, _graphqltag.default)`
  mutation CancelSiteUserSubscription($subscriptionId: String!) {
    ecommerceCancelSubscriptionForSiteUser(subscriptionId: $subscriptionId) {
      ok
    }
  }
`;
const getUploadURLMutation = (0, _graphqltag.default)`
  mutation getUploadURL($fieldId: String!, $filename: String!) {
    usysGetUploadURL(fieldId: $fieldId, filename: $filename) {
      presignedPOST {
        url
        fields {
          key
          value
        }
      }
      key
    }
  }
`;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm11dGF0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ3FsIGZyb20gJ2dyYXBocWwtdGFnJztcblxuZXhwb3J0IGNvbnN0IGxvZ2luTXV0YXRpb24gPSBncWxgXG4gIG11dGF0aW9uIFVzZXJMb2dpblJlcXVlc3QoJGVtYWlsOiBTdHJpbmchLCAkYXV0aFBhc3N3b3JkOiBTdHJpbmchKSB7XG4gICAgdXN5c0NyZWF0ZVNlc3Npb24oZW1haWw6ICRlbWFpbCwgYXV0aFBhc3N3b3JkOiAkYXV0aFBhc3N3b3JkKSB7XG4gICAgICB1c2VyIHtcbiAgICAgICAgaWRcbiAgICAgICAgZW1haWxcbiAgICAgICAgY3JlYXRlZE9uXG4gICAgICAgIGVtYWlsVmVyaWZpZWRcbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZFVwZGF0ZVVzeXNVc2VyRGF0YU11dGF0aW9uKFxuICBkYXRhRmllbGRzOiBBcnJheTx7XG4gICAga2V5OiBzdHJpbmc7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIGlkOiBzdHJpbmc7XG4gIH0+XG4pIHtcbiAgcmV0dXJuIGdxbGBcbiAgICBtdXRhdGlvbiBVcGRhdGVVc3lzVXNlckRhdGEoXG4gICAgICAkZGF0YTogdXN5c191cGRhdGVfdXNlcl9kYXRhIVxuICAgICkge1xuICAgICAgdXN5c1VwZGF0ZVVzZXJEYXRhKFxuICAgICAgICBkYXRhOiAkZGF0YVxuICAgICkge1xuICAgICAgZGF0YSB7XG4gICAgICAke2RhdGFGaWVsZHNcbiAgICAgICAgLm1hcCgoZmllbGQpID0+IHtcbiAgICAgICAgICBjb25zdCBiYXNlID0gYCR7ZmllbGQua2V5fTogJHtmaWVsZC50eXBlfShpZDogXCIke2ZpZWxkLmlkfVwiKWA7XG4gICAgICAgICAgaWYgKGZpZWxkLnR5cGUgPT09ICdvcHRpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gYmFzZSArICd7XFxuIHNsdWcgXFxufSc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChmaWVsZC50eXBlID09PSAnZmlsZVJlZicpIHtcbiAgICAgICAgICAgIHJldHVybiBiYXNlICsgJ3tcXG4gaWQgXFxufSc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBiYXNlO1xuICAgICAgICB9KVxuICAgICAgICAuam9pbignXFxuJyl9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIGA7XG59XG5cbmV4cG9ydCBjb25zdCBzaWdudXBNdXRhdGlvbiA9IGdxbGBcbiAgbXV0YXRpb24gVXNlclNpZ251cFJlcXVlc3QoXG4gICAgJGVtYWlsOiBTdHJpbmchXG4gICAgJG5hbWU6IFN0cmluZyFcbiAgICAkYWNjZXB0UHJpdmFjeTogQm9vbGVhblxuICAgICRhY2NlcHRDb21tdW5pY2F0aW9uczogQm9vbGVhblxuICAgICRhdXRoUGFzc3dvcmQ6IFN0cmluZyFcbiAgICAkaW52aXRlVG9rZW46IFN0cmluZ1xuICAgICRjYXB0Y2hhVG9rZW46IFN0cmluZ1xuICAgICRyZWRpcmVjdFBhdGg6IFN0cmluZ1xuICAgICRkYXRhOiB1c3lzX3VwZGF0ZV91c2VyX2RhdGFcbiAgKSB7XG4gICAgdXN5c0NyZWF0ZVVzZXIoXG4gICAgICBlbWFpbDogJGVtYWlsXG4gICAgICBuYW1lOiAkbmFtZVxuICAgICAgYWNjZXB0UHJpdmFjeTogJGFjY2VwdFByaXZhY3lcbiAgICAgIGFjY2VwdENvbW11bmljYXRpb25zOiAkYWNjZXB0Q29tbXVuaWNhdGlvbnNcbiAgICAgIGF1dGhQYXNzd29yZDogJGF1dGhQYXNzd29yZFxuICAgICAgaW52aXRlVG9rZW46ICRpbnZpdGVUb2tlblxuICAgICAgY2FwdGNoYVRva2VuOiAkY2FwdGNoYVRva2VuXG4gICAgICByZWRpcmVjdFBhdGg6ICRyZWRpcmVjdFBhdGhcbiAgICAgIGRhdGE6ICRkYXRhXG4gICAgKSB7XG4gICAgICB1c2VyIHtcbiAgICAgICAgaWRcbiAgICAgICAgZW1haWxcbiAgICAgICAgbmFtZVxuICAgICAgICBjcmVhdGVkT25cbiAgICAgICAgZW1haWxWZXJpZmllZFxuICAgICAgfVxuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IGxvZ291dE11dGF0aW9uID0gZ3FsYFxuICBtdXRhdGlvbiBVc2VyTG9nb3V0UmVxdWVzdCB7XG4gICAgdXN5c0Rlc3Ryb3lTZXNzaW9uIHtcbiAgICAgIG9rXG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgcmVzZXRQYXNzd29yZE11dGF0aW9uID0gZ3FsYFxuICBtdXRhdGlvbiBVc2VyUmVzZXRQYXNzd29yZFJlcXVlc3QoJGVtYWlsOiBTdHJpbmchKSB7XG4gICAgdXN5c1Jlc2V0UGFzc3dvcmQoZW1haWw6ICRlbWFpbCkge1xuICAgICAgb2tcbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVQYXNzd29yZE11dGF0aW9uID0gZ3FsYFxuICBtdXRhdGlvbiBVc2VyVXBkYXRlUGFzc3dvcmRSZXF1ZXN0KCRhdXRoUGFzc3dvcmQ6IFN0cmluZyEsICR0b2tlbjogU3RyaW5nISkge1xuICAgIHVzeXNVcGRhdGVQYXNzd29yZChhdXRoUGFzc3dvcmQ6ICRhdXRoUGFzc3dvcmQsIHRva2VuOiAkdG9rZW4pIHtcbiAgICAgIG9rXG4gICAgfVxuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgdmVyaWZ5RW1haWxNdXRhdGlvbiA9IGdxbGBcbiAgbXV0YXRpb24gVXNlclZlcmlmeUVtYWlsKCR2ZXJpZnlUb2tlbjogU3RyaW5nISwgJHJlZGlyZWN0UGF0aDogU3RyaW5nKSB7XG4gICAgdXN5c1ZlcmlmeUVtYWlsKHZlcmlmeVRva2VuOiAkdmVyaWZ5VG9rZW4sIHJlZGlyZWN0UGF0aDogJHJlZGlyZWN0UGF0aCkge1xuICAgICAgb2tcbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBjYW5jZWxTdWJzY3JpcHRpb25NdXRhdGlvbiA9IGdxbGBcbiAgbXV0YXRpb24gQ2FuY2VsU2l0ZVVzZXJTdWJzY3JpcHRpb24oJHN1YnNjcmlwdGlvbklkOiBTdHJpbmchKSB7XG4gICAgZWNvbW1lcmNlQ2FuY2VsU3Vic2NyaXB0aW9uRm9yU2l0ZVVzZXIoc3Vic2NyaXB0aW9uSWQ6ICRzdWJzY3JpcHRpb25JZCkge1xuICAgICAgb2tcbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBnZXRVcGxvYWRVUkxNdXRhdGlvbiA9IGdxbGBcbiAgbXV0YXRpb24gZ2V0VXBsb2FkVVJMKCRmaWVsZElkOiBTdHJpbmchLCAkZmlsZW5hbWU6IFN0cmluZyEpIHtcbiAgICB1c3lzR2V0VXBsb2FkVVJMKGZpZWxkSWQ6ICRmaWVsZElkLCBmaWxlbmFtZTogJGZpbGVuYW1lKSB7XG4gICAgICBwcmVzaWduZWRQT1NUIHtcbiAgICAgICAgdXJsXG4gICAgICAgIGZpZWxkcyB7XG4gICAgICAgICAga2V5XG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAga2V5XG4gICAgfVxuICB9XG5gO1xuIl0sIm5hbWVzIjpbImJ1aWxkVXBkYXRlVXN5c1VzZXJEYXRhTXV0YXRpb24iLCJjYW5jZWxTdWJzY3JpcHRpb25NdXRhdGlvbiIsImdldFVwbG9hZFVSTE11dGF0aW9uIiwibG9naW5NdXRhdGlvbiIsImxvZ291dE11dGF0aW9uIiwicmVzZXRQYXNzd29yZE11dGF0aW9uIiwic2lnbnVwTXV0YXRpb24iLCJ1cGRhdGVQYXNzd29yZE11dGF0aW9uIiwidmVyaWZ5RW1haWxNdXRhdGlvbiIsImdxbCIsImRhdGFGaWVsZHMiLCJtYXAiLCJmaWVsZCIsImJhc2UiLCJrZXkiLCJ0eXBlIiwiaWQiLCJqb2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQWVnQkEsK0JBQStCO2VBQS9CQTs7SUFtR0hDLDBCQUEwQjtlQUExQkE7O0lBUUFDLG9CQUFvQjtlQUFwQkE7O0lBeEhBQyxhQUFhO2VBQWJBOztJQWdGQUMsY0FBYztlQUFkQTs7SUFRQUMscUJBQXFCO2VBQXJCQTs7SUExQ0FDLGNBQWM7ZUFBZEE7O0lBa0RBQyxzQkFBc0I7ZUFBdEJBOztJQVFBQyxtQkFBbUI7ZUFBbkJBOzs7bUVBMUdHOzs7Ozs7QUFFVCxNQUFNTCxnQkFBZ0JNLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7Ozs7Ozs7QUFXakMsQ0FBQztBQUVNLFNBQVNULGdDQUNkVSxVQUlFO0lBRUYsT0FBT0QsSUFBQUEsbUJBQUcsQ0FBQSxDQUFDOzs7Ozs7OztNQVFQLEVBQUVDLFdBQ0NDLEdBQUcsQ0FBQyxDQUFDQztRQUNKLE1BQU1DLE9BQU8sQ0FBQyxFQUFFRCxNQUFNRSxHQUFHLENBQUMsRUFBRSxFQUFFRixNQUFNRyxJQUFJLENBQUMsTUFBTSxFQUFFSCxNQUFNSSxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQzdELElBQUlKLE1BQU1HLElBQUksS0FBSyxVQUFVO1lBQzNCLE9BQU9GLE9BQU87UUFDaEI7UUFDQSxJQUFJRCxNQUFNRyxJQUFJLEtBQUssV0FBVztZQUM1QixPQUFPRixPQUFPO1FBQ2hCO1FBQ0EsT0FBT0E7SUFDVCxHQUNDSSxJQUFJLENBQUMsTUFBTTs7OztFQUlsQixDQUFDO0FBQ0g7QUFFTyxNQUFNWCxpQkFBaUJHLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQ2xDLENBQUM7QUFFTSxNQUFNTCxpQkFBaUJLLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7O0FBTWxDLENBQUM7QUFFTSxNQUFNSix3QkFBd0JJLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7O0FBTXpDLENBQUM7QUFFTSxNQUFNRix5QkFBeUJFLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7O0FBTTFDLENBQUM7QUFFTSxNQUFNRCxzQkFBc0JDLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7O0FBTXZDLENBQUM7QUFFTSxNQUFNUiw2QkFBNkJRLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7O0FBTTlDLENBQUM7QUFFTSxNQUFNUCx1QkFBdUJPLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7Ozs7Ozs7OztBQWF4QyxDQUFDIn0=

}),
3671: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    buildGetLoggedInUserQuery: function() {
        return buildGetLoggedInUserQuery;
    },
    getFieldValidations: function() {
        return getFieldValidations;
    },
    getUserSubscriptions: function() {
        return getUserSubscriptions;
    }
});
const _graphqltag = /*#__PURE__*/ _interop_require_default(__webpack_require__(28160));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const getUserSubscriptions = (0, _graphqltag.default)`
  query FetchSubscriptions {
    database {
      id
      userSubscriptions {
        _id
        productName
        variantPrice {
          string
          unit
          value
        }
        variantImage {
          url
          alt
        }
        status
        lastInvoiced
        periodEnd
        subCreatedOn
        canceledOn
        billingAddressAddressee
        billingAddressLine1
        billingAddressLine2
        billingAddressCity
        billingAddressState
        billingAddressPostalCode
        billingAddressCountry
        cardLast4
        cardExpiresMonth
        cardExpiresYear
      }
    }
  }
`;
function buildGetLoggedInUserQuery(dataFields = []) {
    return (0, _graphqltag.default)`
    query FetchUser {
        site {
          id
          siteUser {
            id
            createdOn
            ${dataFields.length > 0 ? `
            data {
              ${dataFields.map((field)=>{
        const base = `${field.key}: ${field.type}(id: "${field.id}")`;
        if (field.type === 'option') {
            return base + '{\n slug \n}';
        }
        if (field.type === 'fileRef') {
            return base + '{\n url \n \n id \n}';
        }
        return base;
    }).join('\n')}
            }` : ''}
        }
      }
    }
  `;
}
const getFieldValidations = (0, _graphqltag.default)`
  query GetFieldValidations {
    site {
      id
      usysFieldSchema {
        id
        required
        validations {
          minLength
          maxLength
          min
          max
          step
          extensions
          options {
            slug
            name
          }
        }
      }
    }
  }
`;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInF1ZXJpZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdxbCBmcm9tICdncmFwaHFsLXRhZyc7XG5cbmV4cG9ydCBjb25zdCBnZXRVc2VyU3Vic2NyaXB0aW9ucyA9IGdxbGBcbiAgcXVlcnkgRmV0Y2hTdWJzY3JpcHRpb25zIHtcbiAgICBkYXRhYmFzZSB7XG4gICAgICBpZFxuICAgICAgdXNlclN1YnNjcmlwdGlvbnMge1xuICAgICAgICBfaWRcbiAgICAgICAgcHJvZHVjdE5hbWVcbiAgICAgICAgdmFyaWFudFByaWNlIHtcbiAgICAgICAgICBzdHJpbmdcbiAgICAgICAgICB1bml0XG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfVxuICAgICAgICB2YXJpYW50SW1hZ2Uge1xuICAgICAgICAgIHVybFxuICAgICAgICAgIGFsdFxuICAgICAgICB9XG4gICAgICAgIHN0YXR1c1xuICAgICAgICBsYXN0SW52b2ljZWRcbiAgICAgICAgcGVyaW9kRW5kXG4gICAgICAgIHN1YkNyZWF0ZWRPblxuICAgICAgICBjYW5jZWxlZE9uXG4gICAgICAgIGJpbGxpbmdBZGRyZXNzQWRkcmVzc2VlXG4gICAgICAgIGJpbGxpbmdBZGRyZXNzTGluZTFcbiAgICAgICAgYmlsbGluZ0FkZHJlc3NMaW5lMlxuICAgICAgICBiaWxsaW5nQWRkcmVzc0NpdHlcbiAgICAgICAgYmlsbGluZ0FkZHJlc3NTdGF0ZVxuICAgICAgICBiaWxsaW5nQWRkcmVzc1Bvc3RhbENvZGVcbiAgICAgICAgYmlsbGluZ0FkZHJlc3NDb3VudHJ5XG4gICAgICAgIGNhcmRMYXN0NFxuICAgICAgICBjYXJkRXhwaXJlc01vbnRoXG4gICAgICAgIGNhcmRFeHBpcmVzWWVhclxuICAgICAgfVxuICAgIH1cbiAgfVxuYDtcblxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkR2V0TG9nZ2VkSW5Vc2VyUXVlcnkoXG4gIGRhdGFGaWVsZHM6IEFycmF5PHtcbiAgICBrZXk6IHN0cmluZztcbiAgICB0eXBlOiBzdHJpbmc7XG4gICAgaWQ6IHN0cmluZztcbiAgfT4gPSBbXVxuKSB7XG4gIHJldHVybiBncWxgXG4gICAgcXVlcnkgRmV0Y2hVc2VyIHtcbiAgICAgICAgc2l0ZSB7XG4gICAgICAgICAgaWRcbiAgICAgICAgICBzaXRlVXNlciB7XG4gICAgICAgICAgICBpZFxuICAgICAgICAgICAgY3JlYXRlZE9uXG4gICAgICAgICAgICAke1xuICAgICAgICAgICAgICBkYXRhRmllbGRzLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICA/IGBcbiAgICAgICAgICAgIGRhdGEge1xuICAgICAgICAgICAgICAke2RhdGFGaWVsZHNcbiAgICAgICAgICAgICAgICAubWFwKChmaWVsZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZSA9IGAke2ZpZWxkLmtleX06ICR7ZmllbGQudHlwZX0oaWQ6IFwiJHtmaWVsZC5pZH1cIilgO1xuICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkLnR5cGUgPT09ICdvcHRpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiYXNlICsgJ3tcXG4gc2x1ZyBcXG59JztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChmaWVsZC50eXBlID09PSAnZmlsZVJlZicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJhc2UgKyAne1xcbiB1cmwgXFxuIFxcbiBpZCBcXG59JztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBiYXNlO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmpvaW4oJ1xcbicpfVxuICAgICAgICAgICAgfWBcbiAgICAgICAgICAgICAgICA6ICcnXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIGA7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRGaWVsZFZhbGlkYXRpb25zID0gZ3FsYFxuICBxdWVyeSBHZXRGaWVsZFZhbGlkYXRpb25zIHtcbiAgICBzaXRlIHtcbiAgICAgIGlkXG4gICAgICB1c3lzRmllbGRTY2hlbWEge1xuICAgICAgICBpZFxuICAgICAgICByZXF1aXJlZFxuICAgICAgICB2YWxpZGF0aW9ucyB7XG4gICAgICAgICAgbWluTGVuZ3RoXG4gICAgICAgICAgbWF4TGVuZ3RoXG4gICAgICAgICAgbWluXG4gICAgICAgICAgbWF4XG4gICAgICAgICAgc3RlcFxuICAgICAgICAgIGV4dGVuc2lvbnNcbiAgICAgICAgICBvcHRpb25zIHtcbiAgICAgICAgICAgIHNsdWdcbiAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbmA7XG4iXSwibmFtZXMiOlsiYnVpbGRHZXRMb2dnZWRJblVzZXJRdWVyeSIsImdldEZpZWxkVmFsaWRhdGlvbnMiLCJnZXRVc2VyU3Vic2NyaXB0aW9ucyIsImdxbCIsImRhdGFGaWVsZHMiLCJsZW5ndGgiLCJtYXAiLCJmaWVsZCIsImJhc2UiLCJrZXkiLCJ0eXBlIiwiaWQiLCJqb2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQXNDZ0JBLHlCQUF5QjtlQUF6QkE7O0lBdUNIQyxtQkFBbUI7ZUFBbkJBOztJQTNFQUMsb0JBQW9CO2VBQXBCQTs7O21FQUZHOzs7Ozs7QUFFVCxNQUFNQSx1QkFBdUJDLElBQUFBLG1CQUFHLENBQUEsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtDeEMsQ0FBQztBQUVNLFNBQVNILDBCQUNkSSxhQUlLLEVBQUU7SUFFUCxPQUFPRCxJQUFBQSxtQkFBRyxDQUFBLENBQUM7Ozs7Ozs7WUFPRCxFQUNFQyxXQUFXQyxNQUFNLEdBQUcsSUFDaEIsQ0FBQzs7Y0FFTCxFQUFFRCxXQUNDRSxHQUFHLENBQUMsQ0FBQ0M7UUFDSixNQUFNQyxPQUFPLENBQUMsRUFBRUQsTUFBTUUsR0FBRyxDQUFDLEVBQUUsRUFBRUYsTUFBTUcsSUFBSSxDQUFDLE1BQU0sRUFBRUgsTUFBTUksRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUM3RCxJQUFJSixNQUFNRyxJQUFJLEtBQUssVUFBVTtZQUMzQixPQUFPRixPQUFPO1FBQ2hCO1FBQ0EsSUFBSUQsTUFBTUcsSUFBSSxLQUFLLFdBQVc7WUFDNUIsT0FBT0YsT0FBTztRQUNoQjtRQUNBLE9BQU9BO0lBQ1QsR0FDQ0ksSUFBSSxDQUFDLE1BQU07YUFDZixDQUFDLEdBQ0ksR0FDTDs7OztFQUlYLENBQUM7QUFDSDtBQUVPLE1BQU1YLHNCQUFzQkUsSUFBQUEsbUJBQUcsQ0FBQSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0J2QyxDQUFDIn0=

}),
85513: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/* globals
 window
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    applyBindingsAndConditionalVisibility: function() {
        return applyBindingsAndConditionalVisibility;
    },
    applyUserAccountData: function() {
        return applyUserAccountData;
    }
});
const _escape = /*#__PURE__*/ _interop_require_default(__webpack_require__(28929));
const _get = /*#__PURE__*/ _interop_require_default(__webpack_require__(24738));
const _Transformers = __webpack_require__(61649);
const _RenderingUtils = __webpack_require__(86078);
const _constants = __webpack_require__(29197);
const _constants1 = __webpack_require__(10873);
const _constants2 = __webpack_require__(7462);
const _universalUtils = __webpack_require__(62467);
const _utils = __webpack_require__(56897);
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const getPropertyMutator = (bindingProperty)=>{
    if (typeof mutators[bindingProperty] === 'function') {
        return mutators[bindingProperty];
    }
    return null;
};
const mutators = {
    innerHTML: (node, type, value)=>{
        const valueString = value != null ? String(value) : '';
        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ PlainText: string; HighlightedText: string; RichText: string; Number: string; Video: string; Option: string; Date: string; Phone: string; Email: string; CommercePrice: string; Link: string; ImageRef: boolean; FileRef: boolean; ItemRef: boolean; CommercePropValues: string; }'.
        if (_constants.SHARED_ALLOWED_FIELD_TYPES.innerHTML[type] === 'innerHTML') {
            node.innerHTML = valueString;
        // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ PlainText: string; HighlightedText: string; RichText: string; Number: string; Video: string; Option: string; Date: string; Phone: string; Email: string; CommercePrice: string; Link: string; ImageRef: boolean; FileRef: boolean; ItemRef: boolean; CommercePropValues: string; }'.
        } else if (_constants.SHARED_ALLOWED_FIELD_TYPES.innerHTML[type] === 'innerText') {
            node.innerHTML = (0, _escape.default)(valueString);
        }
        if (node.innerHTML) {
            node.classList.remove('w-dyn-bind-empty');
        }
    },
    src: (node, type, value)=>{
        if (value && value.url) {
            node.setAttribute('src', value.url);
        }
        node.classList.remove('w-dyn-bind-empty');
    }
};
const bindDataToNode = (node, data, bindings)=>{
    bindings.forEach((binding)=>{
        Object.keys(binding).forEach((bindingProperty)=>{
            // @ts-expect-error - TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<"innerHTML" | "src", Binding>>'.
            const bindingValue = binding[bindingProperty];
            const { dataPath, filter, timezone, type } = bindingValue;
            const rawValue = (0, _get.default)(data, dataPath);
            const transformedValue = (0, _Transformers.transformers)(rawValue, filter, {
                timezone,
                collectionSlugMap: {},
                // @ts-expect-error - TS2339 - Property '__WEBFLOW_CURRENCY_SETTINGS' does not exist on type 'Window & typeof globalThis'.
                currencySettings: window.__WEBFLOW_CURRENCY_SETTINGS
            });
            // @ts-expect-error - TS2345 - Argument of type 'string' is not assignable to parameter of type '"innerHTML" | "src"'.
            const propertyMutator = getPropertyMutator(bindingProperty);
            if (propertyMutator) {
                propertyMutator(node, type, transformedValue);
            }
        });
    });
};
function applyBindingsAndConditionalVisibility(node, data) {
    // Apply bindings
    if (node.hasAttribute(_constants1.WF_BINDING_DATA_KEY)) {
        const bindingsStr = node.getAttribute(_constants1.WF_BINDING_DATA_KEY) || '';
        const bindings = JSON.parse(decodeURIComponent(bindingsStr));
        if (bindings) {
            bindDataToNode(node, data, bindings);
        }
    }
    // Apply conditional visibility
    if (node.hasAttribute(_constants1.WF_CONDITION_DATA_KEY)) {
        const conditionsStr = node.getAttribute(_constants1.WF_CONDITION_DATA_KEY) || '';
        const conditionData = JSON.parse(decodeURIComponent(conditionsStr));
        if (conditionData) {
            (0, _RenderingUtils.applyConditionToNode)(node, data, conditionData);
        }
    }
}
function getFirstAncestor(element, pred) {
    if (element.parentNode === null) {
        return null;
    }
    // @ts-expect-error - TS2345 - Argument of type 'ElementWithInputProperties' is not assignable to parameter of type 'never'.
    if (pred(element)) {
        return element;
    }
    // @ts-expect-error - TS2345 - Argument of type 'ParentNode' is not assignable to parameter of type 'ElementWithInputProperties'.
    return getFirstAncestor(element.parentNode, pred);
}
function hasFormFileUploadWrapperClass(element) {
    return element.classList.contains('w-file-upload');
}
function setFileUploadValue(node, fileId) {
    if (!fileId) return;
    (0, _universalUtils.setUserFileKey)(node, fileId);
    const formFileUploadWrapper = getFirstAncestor(node, // @ts-expect-error - TS2345 - Argument of type '(element: any) => any' is not assignable to parameter of type '(element: never) => never'.
    hasFormFileUploadWrapperClass);
    if (formFileUploadWrapper === null) return;
    const formFileDefault = formFileUploadWrapper.querySelector('.w-file-upload-default');
    const formFileSuccess = formFileUploadWrapper.querySelector('.w-file-upload-success');
    const formFileError = formFileUploadWrapper.querySelector('.w-file-upload-error');
    const formFileUploading = formFileUploadWrapper.querySelector('.w-file-upload-uploading');
    // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null'.
    (0, _utils.addHiddenClass)(formFileDefault);
    // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null'.
    (0, _utils.addHiddenClass)(formFileError);
    // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null'.
    (0, _utils.addHiddenClass)(formFileUploading);
    // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null'.
    (0, _utils.removeHiddenClass)(formFileSuccess);
}
function applyUserAccountData(node, userData) {
    // Apply user name, checkbox, and custom fields
    if (node.hasAttribute(_constants2.USYS_DATA_ATTRS.field)) {
        const field = node.getAttribute(_constants2.USYS_DATA_ATTRS.field) || '';
        const fieldType = node.getAttribute(_constants2.USYS_DATA_ATTRS.fieldType) || '';
        if (fieldType === 'Option') {
            node.value = (0, _get.default)(userData, [
                `f_${field}`,
                'slug'
            ], '');
            return;
        }
        if (fieldType === 'FileRef') {
            setFileUploadValue(node, (0, _get.default)(userData, [
                `f_${field}`,
                'id'
            ], ''));
            return;
        }
        const dataPath = field && field.includes(_constants2.RESERVED_USER_PREFIX) ? _constants2.KEY_FROM_RESERVED_USER_FIELD[field] : `f_${field}`;
        // @ts-expect-error - TS2769 - No overload matches this call.
        const value = (0, _get.default)(userData, [
            dataPath
        ], '');
        if (node.type === 'checkbox' && node.checked !== Boolean(value) && node.click) {
            // Set the checkbox to the right `checked` value, but also trigger the onChange event
            node.click();
            return;
        }
        node.value = value;
    }
    // Apply user email, if not empty
    if (node.hasAttribute(_constants2.USYS_DATA_ATTRS.inputType)) {
        const dataPath = node.getAttribute(_constants2.USYS_DATA_ATTRS.inputType) || '';
        const value = (0, _get.default)(userData, [
            dataPath
        ], '');
        if (value) {
            node.value = value;
        }
    }
}

//# sourceMappingURL=data:application/json;base64,

}),
63245: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/*
  globals
  document,
  HTMLFormElement,
  HTMLInputElement
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    asyncRequestResetPassword: function() {
        return asyncRequestResetPassword;
    },
    handleResetPasswordForms: function() {
        return handleResetPasswordForms;
    }
});
const _utils = __webpack_require__(56897);
const _constants = __webpack_require__(7462);
const _mutations = __webpack_require__(13197);
const resetPasswordFormQuerySelector = `form[${_constants.USYS_DATA_ATTRS.formType}="${_constants.USYS_FORM_TYPES.resetPassword}"]`;
// error handling
const errorState = document.querySelector(`[${_constants.USYS_DATA_ATTRS.formError}]`);
const defaultErrorCopy = // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
_constants.resetPasswordErrorStates[_constants.RESET_PASSWORD_UI_ERROR_CODES.GENERAL_ERROR].copy;
const errorMsgNode = document.querySelector(`.${_constants.ERROR_MSG_CLASS}`);
const getResetPasswordErrorCode = (error)=>{
    // right now we only have one error, this is for when add more
    let errorCode;
    switch(error){
        default:
            errorCode = _constants.RESET_PASSWORD_UI_ERROR_CODES.GENERAL_ERROR;
    }
    return errorCode;
};
function getResetPasswordForms() {
    const resetPasswordForms = document.querySelectorAll(resetPasswordFormQuerySelector);
    return Array.prototype.slice.call(resetPasswordForms).filter((resetPasswordForm)=>resetPasswordForm instanceof HTMLFormElement);
}
function handleResetPasswordForms() {
    getResetPasswordForms().forEach((resetPasswordForm)=>{
        resetPasswordForm.addEventListener('submit', (event)=>{
            event.preventDefault();
            const form = event.currentTarget;
            const successMessage = document.querySelector(`.${_constants.USYS_DOM_CLASS_NAMES.formSuccess}`);
            if (!(form instanceof HTMLFormElement)) {
                return;
            }
            // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
            (0, _utils.hideElement)(errorState);
            const emailInput = form.querySelector(`input[${_constants.USYS_DATA_ATTRS.inputType}="${_constants.USYS_INPUT_TYPES.email}"]`);
            if (!(emailInput instanceof HTMLInputElement)) {
                return;
            }
            asyncRequestResetPassword(emailInput.value).then(()=>{
                (0, _utils.hideElement)(form);
                // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
                (0, _utils.showAndFocusElement)(successMessage);
            }).catch((error)=>{
                if (errorState) {
                    // if there isn't an error code, send an empty string so a generic error message appears
                    const elementErrorCode = error?.graphQLErrors?.[0]?.code ?? '';
                    const errorCode = getResetPasswordErrorCode(elementErrorCode);
                    (0, _utils.handleErrorNode)(errorMsgNode, // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                    errorState, errorCode, _constants.ERROR_ATTRIBUTE_PREFIX.RESET_PASSWORD, defaultErrorCopy);
                }
            });
        });
    });
}
function asyncRequestResetPassword(email) {
    return _utils.userSystemsRequestClient.mutate({
        mutation: _mutations.resetPasswordMutation,
        variables: {
            email
        }
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc2V0UGFzc3dvcmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAgZ2xvYmFsc1xuICBkb2N1bWVudCxcbiAgSFRNTEZvcm1FbGVtZW50LFxuICBIVE1MSW5wdXRFbGVtZW50XG4qL1xuXG5pbXBvcnQge1xuICB1c2VyU3lzdGVtc1JlcXVlc3RDbGllbnQsXG4gIHNob3dBbmRGb2N1c0VsZW1lbnQsXG4gIGhpZGVFbGVtZW50LFxuICBoYW5kbGVFcnJvck5vZGUsXG59IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHtcbiAgVVNZU19EQVRBX0FUVFJTLFxuICBVU1lTX0RPTV9DTEFTU19OQU1FUyxcbiAgVVNZU19GT1JNX1RZUEVTLFxuICBVU1lTX0lOUFVUX1RZUEVTLFxuICBSRVNFVF9QQVNTV09SRF9VSV9FUlJPUl9DT0RFUyxcbiAgcmVzZXRQYXNzd29yZEVycm9yU3RhdGVzLFxuICBFUlJPUl9NU0dfQ0xBU1MsXG4gIEVSUk9SX0FUVFJJQlVURV9QUkVGSVgsXG59IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL3VzZXJzL2NvbnN0YW50cyc7XG5pbXBvcnQge3Jlc2V0UGFzc3dvcmRNdXRhdGlvbn0gZnJvbSAnLi9tdXRhdGlvbnMnO1xuXG5jb25zdCByZXNldFBhc3N3b3JkRm9ybVF1ZXJ5U2VsZWN0b3IgPSBgZm9ybVske1VTWVNfREFUQV9BVFRSUy5mb3JtVHlwZX09XCIke1VTWVNfRk9STV9UWVBFUy5yZXNldFBhc3N3b3JkfVwiXWA7XG5cbi8vIGVycm9yIGhhbmRsaW5nXG5jb25zdCBlcnJvclN0YXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgWyR7VVNZU19EQVRBX0FUVFJTLmZvcm1FcnJvcn1dYCk7XG5jb25zdCBkZWZhdWx0RXJyb3JDb3B5ID1cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTMjUzMiAtIE9iamVjdCBpcyBwb3NzaWJseSAndW5kZWZpbmVkJy5cbiAgcmVzZXRQYXNzd29yZEVycm9yU3RhdGVzW1JFU0VUX1BBU1NXT1JEX1VJX0VSUk9SX0NPREVTLkdFTkVSQUxfRVJST1JdLmNvcHk7XG5jb25zdCBlcnJvck1zZ05vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuJHtFUlJPUl9NU0dfQ0xBU1N9YCk7XG5cbmNvbnN0IGdldFJlc2V0UGFzc3dvcmRFcnJvckNvZGUgPSAoZXJyb3I6IHN0cmluZykgPT4ge1xuICAvLyByaWdodCBub3cgd2Ugb25seSBoYXZlIG9uZSBlcnJvciwgdGhpcyBpcyBmb3Igd2hlbiBhZGQgbW9yZVxuICBsZXQgZXJyb3JDb2RlO1xuICBzd2l0Y2ggKGVycm9yKSB7XG4gICAgZGVmYXVsdDpcbiAgICAgIGVycm9yQ29kZSA9IFJFU0VUX1BBU1NXT1JEX1VJX0VSUk9SX0NPREVTLkdFTkVSQUxfRVJST1I7XG4gIH1cbiAgcmV0dXJuIGVycm9yQ29kZTtcbn07XG5cbmZ1bmN0aW9uIGdldFJlc2V0UGFzc3dvcmRGb3JtcygpIHtcbiAgY29uc3QgcmVzZXRQYXNzd29yZEZvcm1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICByZXNldFBhc3N3b3JkRm9ybVF1ZXJ5U2VsZWN0b3JcbiAgKTtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZVxuICAgIC5jYWxsKHJlc2V0UGFzc3dvcmRGb3JtcylcbiAgICAuZmlsdGVyKFxuICAgICAgKHJlc2V0UGFzc3dvcmRGb3JtKSA9PiByZXNldFBhc3N3b3JkRm9ybSBpbnN0YW5jZW9mIEhUTUxGb3JtRWxlbWVudFxuICAgICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVSZXNldFBhc3N3b3JkRm9ybXMoKSB7XG4gIGdldFJlc2V0UGFzc3dvcmRGb3JtcygpLmZvckVhY2goKHJlc2V0UGFzc3dvcmRGb3JtKSA9PiB7XG4gICAgcmVzZXRQYXNzd29yZEZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgY29uc3QgZm9ybSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gICAgICBjb25zdCBzdWNjZXNzTWVzc2FnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgIGAuJHtVU1lTX0RPTV9DTEFTU19OQU1FUy5mb3JtU3VjY2Vzc31gXG4gICAgICApO1xuXG4gICAgICBpZiAoIShmb3JtIGluc3RhbmNlb2YgSFRNTEZvcm1FbGVtZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzIzNDUgLSBBcmd1bWVudCBvZiB0eXBlICdFbGVtZW50IHwgbnVsbCcgaXMgbm90IGFzc2lnbmFibGUgdG8gcGFyYW1ldGVyIG9mIHR5cGUgJ0hUTUxFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZCcuXG4gICAgICBoaWRlRWxlbWVudChlcnJvclN0YXRlKTtcblxuICAgICAgY29uc3QgZW1haWxJbnB1dCA9IGZvcm0ucXVlcnlTZWxlY3RvcihcbiAgICAgICAgYGlucHV0WyR7VVNZU19EQVRBX0FUVFJTLmlucHV0VHlwZX09XCIke1VTWVNfSU5QVVRfVFlQRVMuZW1haWx9XCJdYFxuICAgICAgKTtcblxuICAgICAgaWYgKCEoZW1haWxJbnB1dCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXN5bmNSZXF1ZXN0UmVzZXRQYXNzd29yZChlbWFpbElucHV0LnZhbHVlKVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgaGlkZUVsZW1lbnQoZm9ybSk7XG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTMjM0NSAtIEFyZ3VtZW50IG9mIHR5cGUgJ0VsZW1lbnQgfCBudWxsJyBpcyBub3QgYXNzaWduYWJsZSB0byBwYXJhbWV0ZXIgb2YgdHlwZSAnSFRNTEVsZW1lbnQgfCBudWxsIHwgdW5kZWZpbmVkJy5cbiAgICAgICAgICBzaG93QW5kRm9jdXNFbGVtZW50KHN1Y2Nlc3NNZXNzYWdlKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgIGlmIChlcnJvclN0YXRlKSB7XG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBpc24ndCBhbiBlcnJvciBjb2RlLCBzZW5kIGFuIGVtcHR5IHN0cmluZyBzbyBhIGdlbmVyaWMgZXJyb3IgbWVzc2FnZSBhcHBlYXJzXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50RXJyb3JDb2RlID0gZXJyb3I/LmdyYXBoUUxFcnJvcnM/LlswXT8uY29kZSA/PyAnJztcbiAgICAgICAgICAgIGNvbnN0IGVycm9yQ29kZSA9IGdldFJlc2V0UGFzc3dvcmRFcnJvckNvZGUoZWxlbWVudEVycm9yQ29kZSk7XG4gICAgICAgICAgICBoYW5kbGVFcnJvck5vZGUoXG4gICAgICAgICAgICAgIGVycm9yTXNnTm9kZSxcbiAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTMjM0NSAtIEFyZ3VtZW50IG9mIHR5cGUgJ0VsZW1lbnQnIGlzIG5vdCBhc3NpZ25hYmxlIHRvIHBhcmFtZXRlciBvZiB0eXBlICdIVE1MRWxlbWVudCcuXG4gICAgICAgICAgICAgIGVycm9yU3RhdGUsXG4gICAgICAgICAgICAgIGVycm9yQ29kZSxcbiAgICAgICAgICAgICAgRVJST1JfQVRUUklCVVRFX1BSRUZJWC5SRVNFVF9QQVNTV09SRCxcbiAgICAgICAgICAgICAgZGVmYXVsdEVycm9yQ29weVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzeW5jUmVxdWVzdFJlc2V0UGFzc3dvcmQoZW1haWw6IHN0cmluZykge1xuICByZXR1cm4gdXNlclN5c3RlbXNSZXF1ZXN0Q2xpZW50Lm11dGF0ZSh7XG4gICAgbXV0YXRpb246IHJlc2V0UGFzc3dvcmRNdXRhdGlvbixcbiAgICB2YXJpYWJsZXM6IHtcbiAgICAgIGVtYWlsLFxuICAgIH0sXG4gIH0pO1xufVxuIl0sIm5hbWVzIjpbImFzeW5jUmVxdWVzdFJlc2V0UGFzc3dvcmQiLCJoYW5kbGVSZXNldFBhc3N3b3JkRm9ybXMiLCJyZXNldFBhc3N3b3JkRm9ybVF1ZXJ5U2VsZWN0b3IiLCJVU1lTX0RBVEFfQVRUUlMiLCJmb3JtVHlwZSIsIlVTWVNfRk9STV9UWVBFUyIsInJlc2V0UGFzc3dvcmQiLCJlcnJvclN0YXRlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZm9ybUVycm9yIiwiZGVmYXVsdEVycm9yQ29weSIsInJlc2V0UGFzc3dvcmRFcnJvclN0YXRlcyIsIlJFU0VUX1BBU1NXT1JEX1VJX0VSUk9SX0NPREVTIiwiR0VORVJBTF9FUlJPUiIsImNvcHkiLCJlcnJvck1zZ05vZGUiLCJFUlJPUl9NU0dfQ0xBU1MiLCJnZXRSZXNldFBhc3N3b3JkRXJyb3JDb2RlIiwiZXJyb3IiLCJlcnJvckNvZGUiLCJnZXRSZXNldFBhc3N3b3JkRm9ybXMiLCJyZXNldFBhc3N3b3JkRm9ybXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJmaWx0ZXIiLCJyZXNldFBhc3N3b3JkRm9ybSIsIkhUTUxGb3JtRWxlbWVudCIsImZvckVhY2giLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImZvcm0iLCJjdXJyZW50VGFyZ2V0Iiwic3VjY2Vzc01lc3NhZ2UiLCJVU1lTX0RPTV9DTEFTU19OQU1FUyIsImZvcm1TdWNjZXNzIiwiaGlkZUVsZW1lbnQiLCJlbWFpbElucHV0IiwiaW5wdXRUeXBlIiwiVVNZU19JTlBVVF9UWVBFUyIsImVtYWlsIiwiSFRNTElucHV0RWxlbWVudCIsInZhbHVlIiwidGhlbiIsInNob3dBbmRGb2N1c0VsZW1lbnQiLCJjYXRjaCIsImVsZW1lbnRFcnJvckNvZGUiLCJncmFwaFFMRXJyb3JzIiwiY29kZSIsImhhbmRsZUVycm9yTm9kZSIsIkVSUk9SX0FUVFJJQlVURV9QUkVGSVgiLCJSRVNFVF9QQVNTV09SRCIsInVzZXJTeXN0ZW1zUmVxdWVzdENsaWVudCIsIm11dGF0ZSIsIm11dGF0aW9uIiwicmVzZXRQYXNzd29yZE11dGF0aW9uIiwidmFyaWFibGVzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7SUFvR2dCQSx5QkFBeUI7ZUFBekJBOztJQWxEQUMsd0JBQXdCO2VBQXhCQTs7O3VCQTNDVDsyQkFVQTsyQkFDNkI7QUFFcEMsTUFBTUMsaUNBQWlDLENBQUMsS0FBSyxFQUFFQywwQkFBZSxDQUFDQyxRQUFRLENBQUMsRUFBRSxFQUFFQywwQkFBZSxDQUFDQyxhQUFhLENBQUMsRUFBRSxDQUFDO0FBRTdHLGlCQUFpQjtBQUNqQixNQUFNQyxhQUFhQyxTQUFTQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUVOLDBCQUFlLENBQUNPLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDMUUsTUFBTUMsbUJBQ0osOERBQThEO0FBQzlEQyxtQ0FBd0IsQ0FBQ0Msd0NBQTZCLENBQUNDLGFBQWEsQ0FBQyxDQUFDQyxJQUFJO0FBQzVFLE1BQU1DLGVBQWVSLFNBQVNDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRVEsMEJBQWUsQ0FBQyxDQUFDO0FBRWpFLE1BQU1DLDRCQUE0QixDQUFDQztJQUNqQyw4REFBOEQ7SUFDOUQsSUFBSUM7SUFDSixPQUFRRDtRQUNOO1lBQ0VDLFlBQVlQLHdDQUE2QixDQUFDQyxhQUFhO0lBQzNEO0lBQ0EsT0FBT007QUFDVDtBQUVBLFNBQVNDO0lBQ1AsTUFBTUMscUJBQXFCZCxTQUFTZSxnQkFBZ0IsQ0FDbERyQjtJQUVGLE9BQU9zQixNQUFNQyxTQUFTLENBQUNDLEtBQUssQ0FDekJDLElBQUksQ0FBQ0wsb0JBQ0xNLE1BQU0sQ0FDTCxDQUFDQyxvQkFBc0JBLDZCQUE2QkM7QUFFMUQ7QUFFTyxTQUFTN0I7SUFDZG9CLHdCQUF3QlUsT0FBTyxDQUFDLENBQUNGO1FBQy9CQSxrQkFBa0JHLGdCQUFnQixDQUFDLFVBQVUsQ0FBQ0M7WUFDNUNBLE1BQU1DLGNBQWM7WUFFcEIsTUFBTUMsT0FBT0YsTUFBTUcsYUFBYTtZQUNoQyxNQUFNQyxpQkFBaUI3QixTQUFTQyxhQUFhLENBQzNDLENBQUMsQ0FBQyxFQUFFNkIsK0JBQW9CLENBQUNDLFdBQVcsQ0FBQyxDQUFDO1lBR3hDLElBQUksQ0FBRUosQ0FBQUEsZ0JBQWdCTCxlQUFjLEdBQUk7Z0JBQ3RDO1lBQ0Y7WUFFQSx5SUFBeUk7WUFDeklVLElBQUFBLGtCQUFXLEVBQUNqQztZQUVaLE1BQU1rQyxhQUFhTixLQUFLMUIsYUFBYSxDQUNuQyxDQUFDLE1BQU0sRUFBRU4sMEJBQWUsQ0FBQ3VDLFNBQVMsQ0FBQyxFQUFFLEVBQUVDLDJCQUFnQixDQUFDQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBR25FLElBQUksQ0FBRUgsQ0FBQUEsc0JBQXNCSSxnQkFBZSxHQUFJO2dCQUM3QztZQUNGO1lBRUE3QywwQkFBMEJ5QyxXQUFXSyxLQUFLLEVBQ3ZDQyxJQUFJLENBQUM7Z0JBQ0pQLElBQUFBLGtCQUFXLEVBQUNMO2dCQUNaLHlJQUF5STtnQkFDeklhLElBQUFBLDBCQUFtQixFQUFDWDtZQUN0QixHQUNDWSxLQUFLLENBQUMsQ0FBQzlCO2dCQUNOLElBQUlaLFlBQVk7b0JBQ2Qsd0ZBQXdGO29CQUN4RixNQUFNMkMsbUJBQW1CL0IsT0FBT2dDLGVBQWUsQ0FBQyxFQUFFLEVBQUVDLFFBQVE7b0JBQzVELE1BQU1oQyxZQUFZRiwwQkFBMEJnQztvQkFDNUNHLElBQUFBLHNCQUFlLEVBQ2JyQyxjQUNBLCtHQUErRztvQkFDL0dULFlBQ0FhLFdBQ0FrQyxpQ0FBc0IsQ0FBQ0MsY0FBYyxFQUNyQzVDO2dCQUVKO1lBQ0Y7UUFDSjtJQUNGO0FBQ0Y7QUFFTyxTQUFTWCwwQkFBMEI0QyxLQUFhO0lBQ3JELE9BQU9ZLCtCQUF3QixDQUFDQyxNQUFNLENBQUM7UUFDckNDLFVBQVVDLGdDQUFxQjtRQUMvQkMsV0FBVztZQUNUaEI7UUFDRjtJQUNGO0FBQ0YifQ==

}),
54284: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/*
  globals
  document,
  HTMLFormElement,
  HTMLInputElement,
  window
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    asyncSignUpUser: function() {
        return asyncSignUpUser;
    },
    handleSignUpForms: function() {
        return handleSignUpForms;
    }
});
const _utils = __webpack_require__(56897);
const _constants = __webpack_require__(7462);
const _mutations = __webpack_require__(13197);
const _fields = __webpack_require__(18457);
const _turnstileCaptcha = __webpack_require__(88432);
const signupFormQuerySelector = `form[${_constants.USYS_DATA_ATTRS.formType}="${_constants.USYS_FORM_TYPES.signup}"]`;
const verificationMessage = document.querySelector(`.${_constants.USYS_DOM_CLASS_NAMES.formVerfication}`);
function getSignupForms() {
    const signupForms = document.querySelectorAll(signupFormQuerySelector);
    return Array.prototype.slice.call(signupForms).filter((signupForm)=>signupForm instanceof HTMLFormElement);
}
function handleUserInvite(email) {
    // email is for DISPLAY use ONLY for security reasons
    const form = document.querySelector(signupFormQuerySelector);
    if (!(form instanceof HTMLFormElement)) {
        return;
    }
    const emailInput = form.querySelector(`input[${_constants.USYS_DATA_ATTRS.inputType}="${_constants.USYS_INPUT_TYPES.email}"]`);
    if (!(emailInput instanceof HTMLInputElement)) {
        return;
    }
    // disable email input
    emailInput.disabled = true;
    emailInput.classList.add('w-input-disabled');
    // and set the value to the user's email
    emailInput.value = email;
}
// users are sent to the sign up page to complete verification
function handleEmailVerification(token, errorState) {
    const form = document.querySelector(signupFormQuerySelector);
    // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
    (0, _utils.hideElement)(form);
    asyncVerifyEmailToken(token).then(()=>{
        const successMessage = document.querySelector(`.${_constants.USYS_DOM_CLASS_NAMES.formSuccess}`);
        const redirectAnchor = document.querySelector(`[${_constants.USYS_DATA_ATTRS.redirectUrl}] a`);
        const redirectPath = (0, _utils.getRedirectPath)();
        // If redirect param exists, use that path for the redirect anchor href
        if (redirectPath && redirectAnchor) {
            redirectAnchor.setAttribute('href', encodeURIComponent(redirectPath));
        }
        // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
        (0, _utils.showElement)(successMessage);
        // If redirect anchor exists, use that as default redirect path
        (0, _utils.handleRedirect)(redirectAnchor?.getAttribute('href') ?? '/', true);
    }).catch((error)=>{
        // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
        (0, _utils.showElement)(verificationMessage);
        // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null'.
        (0, _utils.userFormError)(form, errorState, 'SIGNUP')(error);
    });
}
function handleSignUpForms() {
    // we will check to see if there is a token in the link to initiate the verification flow
    // otherwise, the regular sign-up form will be shown
    const params = new URLSearchParams(window.location.search);
    const inviteToken = params.get('inviteToken') || '';
    const verifyToken = params.get('verifyToken') || '';
    const errorState = document.querySelector(`[${_constants.USYS_DATA_ATTRS.formError}]`);
    let turnstileScript = null;
    getSignupForms().forEach((signupForm)=>{
        const submitButton = signupForm.querySelector('input[type="submit"]');
        const sendSubmitData = (captchaToken)=>{
            const submitText = (0, _utils.disableSubmit)(submitButton);
            const commonFields = (0, _fields.getCommonFields)(signupForm);
            const customFields = (0, _fields.getCustomFields)(signupForm);
            // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
            (0, _utils.hideElement)(errorState);
            asyncSignUpUser((0, _fields.getFieldValueById)('email', commonFields) || '', (0, _fields.getFieldValueById)('name', commonFields) || '', (0, _fields.getFieldValueById)('password', commonFields) || '', (0, _fields.getFieldValueById)('accept-privacy', commonFields) || false, (0, _fields.getFieldValueById)('accept-communications', commonFields) || false, customFields, inviteToken, captchaToken).then(()=>{
                if (inviteToken) {
                    // @ts-expect-error - TS2322 - Type 'string' is not assignable to type 'Location | (string & Location)'.
                    window.location = '/log-in';
                } else {
                    (0, _utils.hideElement)(signupForm);
                    // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
                    (0, _utils.showAndFocusElement)(verificationMessage);
                }
            })// @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null'.
            .catch((0, _utils.userFormError)(signupForm, errorState, 'SIGNUP')).finally(()=>{
                // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null'.
                (0, _utils.resetSubmit)(submitButton, submitText);
            });
        };
        const captchaSiteKey = signupForm.getAttribute('wf-captcha-site-key');
        const captchaMode = signupForm.getAttribute('wf-captcha-mode');
        if (captchaSiteKey && captchaMode && !turnstileScript) {
            // @ts-expect-error - TS18047 - 'submitButton' is possibly 'null'.
            submitButton.setAttribute('disabled', 'true');
            turnstileScript = document.createElement('script');
            turnstileScript.src = 'https://challenges.cloudflare.com/turnstile/v0/api.js';
            document.head.appendChild(turnstileScript);
            turnstileScript.onload = ()=>{
                signupForm.addEventListener('submit', (e)=>{
                    e.preventDefault();
                    (0, _turnstileCaptcha.renderTurnstileCaptcha)(captchaSiteKey, captchaMode, sendSubmitData);
                });
                // @ts-expect-error - TS18047 - 'submitButton' is possibly 'null'.
                submitButton.removeAttribute('disabled');
            };
        } else {
            signupForm.addEventListener('submit', (e)=>{
                e.preventDefault();
                sendSubmitData(null);
            });
        }
        if (inviteToken) {
            const email = params.get('email') || '';
            handleUserInvite(email);
        }
        if (verifyToken) {
            // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null'.
            handleEmailVerification(verifyToken, errorState);
        }
    });
}
function asyncSignUpUser(email, name = '', password, acceptPrivacy, acceptCommunications, customFields, inviteToken, captchaToken) {
    const variables = {
        email,
        name,
        acceptPrivacy,
        acceptCommunications,
        authPassword: password,
        data: (0, _fields.getFieldsAsTypeKeys)(customFields),
        inviteToken: inviteToken || undefined,
        captchaToken: captchaToken || undefined,
        redirectPath: (0, _utils.getRedirectPath)()
    };
    return _utils.userSystemsRequestClient.mutate({
        mutation: _mutations.signupMutation,
        variables
    });
}
function asyncVerifyEmailToken(verifyToken) {
    return _utils.userSystemsRequestClient.mutate({
        mutation: _mutations.verifyEmailMutation,
        variables: {
            verifyToken,
            redirectPath: (0, _utils.getRedirectPath)()
        }
    });
}

//# sourceMappingURL=data:application/json;base64,

}),
88432: (function (__unused_webpack_module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "renderTurnstileCaptcha", ({
    enumerable: true,
    get: function() {
        return renderTurnstileCaptcha;
    }
}));
function setSplashScreenStyles(element) {
    element.style.display = 'flex';
    element.style.position = 'fixed';
    element.style.top = '0';
    element.style.left = '0';
    element.style.width = '100%';
    element.style.height = '100%';
    element.style.background = 'rgba(255, 255, 255, 0.8)';
    element.style.justifyContent = 'center';
    element.style.alignItems = 'center';
    element.style.textAlign = 'center';
    element.style.zIndex = '1000';
    element.style.opacity = '0';
    element.style.transition = 'opacity 1s ease-in-out';
}
const addSplashScreen = ()=>{
    const splashScreen = document.createElement('div');
    setSplashScreenStyles(splashScreen);
    const captchaContainer = document.createElement('div');
    splashScreen.appendChild(captchaContainer);
    document.body.appendChild(splashScreen);
    setTimeout(()=>{
        splashScreen.style.opacity = '1';
    }, 10);
    return splashScreen;
};
const renderTurnstileCaptcha = (captchaSiteKey, captchaMode, cb)=>{
    let splashScreen;
    if (captchaMode !== 'invisible') {
        splashScreen = addSplashScreen();
    }
    const captchaContainer = document.createElement('div');
    if (splashScreen) {
        splashScreen.appendChild(captchaContainer);
    } else {
        document.body.appendChild(captchaContainer);
    }
    // Render the captcha
    // @ts-expect-error - TS2304: Cannot find name 'turnstile'.
    turnstile.render(captchaContainer, {
        sitekey: captchaSiteKey,
        callback: function(token) {
            setTimeout(function() {
                if (splashScreen) {
                    splashScreen.remove();
                }
            }, 1000);
            return cb(token);
        }
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR1cm5zdGlsZUNhcHRjaGEudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gc2V0U3BsYXNoU2NyZWVuU3R5bGVzKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gIGVsZW1lbnQuc3R5bGUudG9wID0gJzAnO1xuICBlbGVtZW50LnN0eWxlLmxlZnQgPSAnMCc7XG4gIGVsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICBlbGVtZW50LnN0eWxlLmJhY2tncm91bmQgPSAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpJztcbiAgZWxlbWVudC5zdHlsZS5qdXN0aWZ5Q29udGVudCA9ICdjZW50ZXInO1xuICBlbGVtZW50LnN0eWxlLmFsaWduSXRlbXMgPSAnY2VudGVyJztcbiAgZWxlbWVudC5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgZWxlbWVudC5zdHlsZS56SW5kZXggPSAnMTAwMCc7XG4gIGVsZW1lbnQuc3R5bGUub3BhY2l0eSA9ICcwJztcbiAgZWxlbWVudC5zdHlsZS50cmFuc2l0aW9uID0gJ29wYWNpdHkgMXMgZWFzZS1pbi1vdXQnO1xufVxuXG5jb25zdCBhZGRTcGxhc2hTY3JlZW4gPSAoKSA9PiB7XG4gIGNvbnN0IHNwbGFzaFNjcmVlbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBzZXRTcGxhc2hTY3JlZW5TdHlsZXMoc3BsYXNoU2NyZWVuKTtcblxuICBjb25zdCBjYXB0Y2hhQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHNwbGFzaFNjcmVlbi5hcHBlbmRDaGlsZChjYXB0Y2hhQ29udGFpbmVyKTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzcGxhc2hTY3JlZW4pO1xuXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIHNwbGFzaFNjcmVlbi5zdHlsZS5vcGFjaXR5ID0gJzEnO1xuICB9LCAxMCk7XG4gIHJldHVybiBzcGxhc2hTY3JlZW47XG59O1xuXG5leHBvcnQgY29uc3QgcmVuZGVyVHVybnN0aWxlQ2FwdGNoYSA9IChcbiAgY2FwdGNoYVNpdGVLZXk6IHN0cmluZyxcbiAgY2FwdGNoYU1vZGU6IHN0cmluZyxcbiAgY2I6IGFueVxuKSA9PiB7XG4gIGxldCBzcGxhc2hTY3JlZW46IEhUTUxEaXZFbGVtZW50IHwgdW5kZWZpbmVkO1xuICBpZiAoY2FwdGNoYU1vZGUgIT09ICdpbnZpc2libGUnKSB7XG4gICAgc3BsYXNoU2NyZWVuID0gYWRkU3BsYXNoU2NyZWVuKCk7XG4gIH1cblxuICBjb25zdCBjYXB0Y2hhQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGlmIChzcGxhc2hTY3JlZW4pIHtcbiAgICBzcGxhc2hTY3JlZW4uYXBwZW5kQ2hpbGQoY2FwdGNoYUNvbnRhaW5lcik7XG4gIH0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYXB0Y2hhQ29udGFpbmVyKTtcbiAgfVxuXG4gIC8vIFJlbmRlciB0aGUgY2FwdGNoYVxuICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMyMzA0OiBDYW5ub3QgZmluZCBuYW1lICd0dXJuc3RpbGUnLlxuICB0dXJuc3RpbGUucmVuZGVyKGNhcHRjaGFDb250YWluZXIsIHtcbiAgICBzaXRla2V5OiBjYXB0Y2hhU2l0ZUtleSxcbiAgICBjYWxsYmFjazogZnVuY3Rpb24gKHRva2VuOiBzdHJpbmcpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc3BsYXNoU2NyZWVuKSB7XG4gICAgICAgICAgc3BsYXNoU2NyZWVuLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9LCAxMDAwKTtcbiAgICAgIHJldHVybiBjYih0b2tlbik7XG4gICAgfSxcbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbInJlbmRlclR1cm5zdGlsZUNhcHRjaGEiLCJzZXRTcGxhc2hTY3JlZW5TdHlsZXMiLCJlbGVtZW50Iiwic3R5bGUiLCJkaXNwbGF5IiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0Iiwid2lkdGgiLCJoZWlnaHQiLCJiYWNrZ3JvdW5kIiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwidGV4dEFsaWduIiwiekluZGV4Iiwib3BhY2l0eSIsInRyYW5zaXRpb24iLCJhZGRTcGxhc2hTY3JlZW4iLCJzcGxhc2hTY3JlZW4iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjYXB0Y2hhQ29udGFpbmVyIiwiYXBwZW5kQ2hpbGQiLCJib2R5Iiwic2V0VGltZW91dCIsImNhcHRjaGFTaXRlS2V5IiwiY2FwdGNoYU1vZGUiLCJjYiIsInR1cm5zdGlsZSIsInJlbmRlciIsInNpdGVrZXkiLCJjYWxsYmFjayIsInRva2VuIiwicmVtb3ZlIl0sIm1hcHBpbmdzIjoiOzs7OytCQThCYUE7OztlQUFBQTs7O0FBOUJiLFNBQVNDLHNCQUFzQkMsT0FBb0I7SUFDakRBLFFBQVFDLEtBQUssQ0FBQ0MsT0FBTyxHQUFHO0lBQ3hCRixRQUFRQyxLQUFLLENBQUNFLFFBQVEsR0FBRztJQUN6QkgsUUFBUUMsS0FBSyxDQUFDRyxHQUFHLEdBQUc7SUFDcEJKLFFBQVFDLEtBQUssQ0FBQ0ksSUFBSSxHQUFHO0lBQ3JCTCxRQUFRQyxLQUFLLENBQUNLLEtBQUssR0FBRztJQUN0Qk4sUUFBUUMsS0FBSyxDQUFDTSxNQUFNLEdBQUc7SUFDdkJQLFFBQVFDLEtBQUssQ0FBQ08sVUFBVSxHQUFHO0lBQzNCUixRQUFRQyxLQUFLLENBQUNRLGNBQWMsR0FBRztJQUMvQlQsUUFBUUMsS0FBSyxDQUFDUyxVQUFVLEdBQUc7SUFDM0JWLFFBQVFDLEtBQUssQ0FBQ1UsU0FBUyxHQUFHO0lBQzFCWCxRQUFRQyxLQUFLLENBQUNXLE1BQU0sR0FBRztJQUN2QlosUUFBUUMsS0FBSyxDQUFDWSxPQUFPLEdBQUc7SUFDeEJiLFFBQVFDLEtBQUssQ0FBQ2EsVUFBVSxHQUFHO0FBQzdCO0FBRUEsTUFBTUMsa0JBQWtCO0lBQ3RCLE1BQU1DLGVBQWVDLFNBQVNDLGFBQWEsQ0FBQztJQUM1Q25CLHNCQUFzQmlCO0lBRXRCLE1BQU1HLG1CQUFtQkYsU0FBU0MsYUFBYSxDQUFDO0lBQ2hERixhQUFhSSxXQUFXLENBQUNEO0lBQ3pCRixTQUFTSSxJQUFJLENBQUNELFdBQVcsQ0FBQ0o7SUFFMUJNLFdBQVc7UUFDVE4sYUFBYWYsS0FBSyxDQUFDWSxPQUFPLEdBQUc7SUFDL0IsR0FBRztJQUNILE9BQU9HO0FBQ1Q7QUFFTyxNQUFNbEIseUJBQXlCLENBQ3BDeUIsZ0JBQ0FDLGFBQ0FDO0lBRUEsSUFBSVQ7SUFDSixJQUFJUSxnQkFBZ0IsYUFBYTtRQUMvQlIsZUFBZUQ7SUFDakI7SUFFQSxNQUFNSSxtQkFBbUJGLFNBQVNDLGFBQWEsQ0FBQztJQUNoRCxJQUFJRixjQUFjO1FBQ2hCQSxhQUFhSSxXQUFXLENBQUNEO0lBQzNCLE9BQU87UUFDTEYsU0FBU0ksSUFBSSxDQUFDRCxXQUFXLENBQUNEO0lBQzVCO0lBRUEscUJBQXFCO0lBQ3JCLDJEQUEyRDtJQUMzRE8sVUFBVUMsTUFBTSxDQUFDUixrQkFBa0I7UUFDakNTLFNBQVNMO1FBQ1RNLFVBQVUsU0FBVUMsS0FBYTtZQUMvQlIsV0FBVztnQkFDVCxJQUFJTixjQUFjO29CQUNoQkEsYUFBYWUsTUFBTTtnQkFDckI7WUFDRixHQUFHO1lBQ0gsT0FBT04sR0FBR0s7UUFDWjtJQUNGO0FBQ0YifQ==

}),
10104: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/*
  globals
  document,
  HTMLFormElement,
  HTMLInputElement,
  window
*/ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    asyncRequestUpdatePassword: function() {
        return asyncRequestUpdatePassword;
    },
    handleUpdatePasswordForms: function() {
        return handleUpdatePasswordForms;
    }
});
const _utils = __webpack_require__(56897);
const _constants = __webpack_require__(7462);
const _mutations = __webpack_require__(13197);
const updatePasswordFormQuerySelector = `form[${_constants.USYS_DATA_ATTRS.formType}="${_constants.USYS_FORM_TYPES.updatePassword}"]`;
// error handling
const errorState = document.querySelector(`[${_constants.USYS_DATA_ATTRS.formError}]`);
const defaultErrorCopy = // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
_constants.updatePasswordErrorStates[_constants.UPDATE_PASSWORD_UI_ERROR_CODES.GENERAL_ERROR].copy;
const errorMsgNode = document.querySelector(`.${_constants.ERROR_MSG_CLASS}`);
const getUpdatePasswordErrorCode = (error)=>{
    let errorCode;
    switch(error){
        case 'UsysInvalidPassword':
            errorCode = _constants.UPDATE_PASSWORD_UI_ERROR_CODES.WEAK_PASSWORD;
            break;
        default:
            errorCode = _constants.UPDATE_PASSWORD_UI_ERROR_CODES.GENERAL_ERROR;
    }
    return errorCode;
};
function getUpdatePasswordForms() {
    const updatePasswordForms = document.querySelectorAll(updatePasswordFormQuerySelector);
    return Array.prototype.slice.call(updatePasswordForms).filter((updatePasswordForm)=>updatePasswordForm instanceof HTMLFormElement);
}
function handleUpdatePasswordForms() {
    getUpdatePasswordForms().forEach((updatePasswordForm)=>{
        updatePasswordForm.addEventListener('submit', (event)=>{
            event.preventDefault();
            const form = event.currentTarget;
            const successMessage = document.querySelector(`.${_constants.USYS_DOM_CLASS_NAMES.formSuccess}`);
            if (!(form instanceof HTMLFormElement)) {
                return;
            }
            const errorElement = document.querySelector(`[${_constants.USYS_DATA_ATTRS.formError}]`);
            // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
            (0, _utils.hideElement)(errorElement);
            const passwordInput = form.querySelector(`input[${_constants.USYS_DATA_ATTRS.inputType}="${_constants.USYS_INPUT_TYPES.password}"]`);
            if (!(passwordInput instanceof HTMLInputElement)) {
                return;
            }
            const params = new URLSearchParams(window.location.search);
            const token = params.get('token') || '';
            asyncRequestUpdatePassword(passwordInput.value, token).then(()=>{
                (0, _utils.hideElement)(form);
                // @ts-expect-error - TS2345 - Argument of type 'Element | null' is not assignable to parameter of type 'HTMLElement | null | undefined'.
                (0, _utils.showAndFocusElement)(successMessage);
            }).catch((error)=>{
                if (errorState) {
                    // if there isn't an error code, send an empty string so a generic error message appears
                    const elementErrorCode = error?.graphQLErrors?.[0]?.code ?? '';
                    const errorCode = getUpdatePasswordErrorCode(elementErrorCode);
                    (0, _utils.handleErrorNode)(errorMsgNode, // @ts-expect-error - TS2345 - Argument of type 'Element' is not assignable to parameter of type 'HTMLElement'.
                    errorState, errorCode, _constants.ERROR_ATTRIBUTE_PREFIX.UPDATE_PASSWORD, defaultErrorCopy);
                }
            });
        });
    });
}
function asyncRequestUpdatePassword(authPassword, token) {
    return _utils.userSystemsRequestClient.mutate({
        mutation: _mutations.updatePasswordMutation,
        variables: {
            authPassword,
            token
        }
    });
}

//# sourceMappingURL=data:application/json;base64,

}),
65438: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
Object.defineProperty(exports, "handleFields", ({
    enumerable: true,
    get: function() {
        return handleFields;
    }
}));
const _utils = __webpack_require__(56897);
const _queries = __webpack_require__(3671);
const _constants = __webpack_require__(7462);
const _universalUtils = __webpack_require__(62467);
const _mutations = __webpack_require__(13197);
/* global window, HTMLInputElement, HTMLSelectElement, document */ function asyncGetFieldValidations() {
    return _utils.userSystemsRequestClient.query({
        query: _queries.getFieldValidations
    });
}
function signFile(file, { fieldId }) {
    return _utils.userSystemsRequestClient.mutate({
        mutation: _mutations.getUploadURLMutation,
        variables: {
            fieldId,
            filename: file.name
        }
    });
}
function setRequired(input, userField) {
    if (userField.required == null) return;
    input.required = userField.required;
}
const inputAttributeMap = {
    minLength: 'minlength',
    maxLength: 'maxlength',
    min: 'min',
    max: 'max',
    step: 'step',
    extensions: 'accept'
};
const formatValueMap = {
    extensions: function accept(value) {
        return value.join(',');
    }
};
function convertToStr(value) {
    return String(value);
}
function setValidations(input, userField) {
    if (userField.validations == null) return;
    Object.keys(userField.validations).map((attr)=>{
        const val = userField.validations[attr];
        if (attr === 'options' && Array.isArray(val) && input instanceof HTMLSelectElement) {
            val.forEach((option)=>{
                if (option.slug && option.name) {
                    const opt = document.createElement('option');
                    opt.value = option.slug;
                    opt.innerHTML = option.name;
                    input.appendChild(opt);
                }
            });
        }
        if (val !== null && inputAttributeMap[attr]) {
            let formatValue;
            if (formatValueMap[attr]) {
                formatValue = formatValueMap[attr];
            } else {
                formatValue = convertToStr;
            }
            input.setAttribute(inputAttributeMap[attr], formatValue(val));
        }
        if (attr === 'maxLength' && val === null) {
            input.removeAttribute('maxlength');
        }
    });
}
function setUserFieldValidationAttr(input, userField) {
    const fieldType = input.getAttribute(_constants.USYS_DATA_ATTRS.fieldType);
    if (!_constants.NO_REQUIRED_ATTRIBUTE.includes(fieldType)) {
        setRequired(input, userField);
    }
    setValidations(input, userField);
}
function matchInputToData(input, userFieldData) {
    const fieldId = input.getAttribute(_constants.USYS_DATA_ATTRS.field);
    if (!fieldId) {
        return null;
    }
    for(let i = 0; i < userFieldData.length; i++){
        if (userFieldData[i].id === fieldId) {
            return userFieldData[i];
        }
    }
    return null;
}
function setFieldValidation(customFieldInputs) {
    asyncGetFieldValidations().then((response)=>{
        const userFieldData = response.data.site.usysFieldSchema;
        if (!userFieldData) return;
        for(let i = 0; i < customFieldInputs.length; i++){
            const input = customFieldInputs[i];
            if (!input || !(input instanceof HTMLInputElement || input instanceof HTMLSelectElement) || input.getAttribute(_constants.USYS_DATA_ATTRS.fieldType) === 'Bool') {
                continue;
            }
            const userField = matchInputToData(input, userFieldData);
            if (!userField) continue;
            setUserFieldValidationAttr(input, userField);
        }
    }).catch((err)=>{
        console.error(err);
    });
}
function getMatchingSiblings(e, pred) {
    const siblings = [];
    if (e.target.parentNode === null) {
        return siblings;
    }
    [].slice.call(e.target.parentNode.children).forEach((element)=>{
        if (pred(element)) {
            siblings.push(element);
        }
    });
    return siblings;
}
function isFormFileUploadWrapper(element) {
    return element.classList.contains('w-file-upload');
}
function getFirstAncestor(element, pred) {
    if (element.parentNode === null) {
        return null;
    }
    if (pred(element)) {
        return element;
    }
    return getFirstAncestor(element.parentNode, pred);
}
function handleFileRemoveLink(cancelRemoveLinkElement, inputElement, props) {
    const { deleteFile, cancelFile } = props;
    cancelRemoveLinkElement.addEventListener('click', function(e) {
        if (e.type === 'keydown') {
            if (e.which !== 13 && e.which !== 32) {
                return;
            }
            e.preventDefault();
        }
        if ((0, _universalUtils.getUserFileKey)(inputElement)) {
            deleteFile();
            return;
        }
        cancelFile();
    });
}
function handleFileUploadInput(element, props) {
    const { showUploading, successUpload, errorUpload, changeFileNameText, disableSubmitButton, filesState } = props;
    const fieldId = element.getAttribute(_constants.USYS_DATA_ATTRS.field);
    element.addEventListener('change', function(e) {
        if (filesState.isUploading) return;
        const file = e.target && e.target.files && e.target.files[0];
        if (!file) {
            return;
        }
        showUploading();
        changeFileNameText(file.name);
        filesState.isUploading = true;
        if (!filesState.isUploading) {
            disableSubmitButton();
        }
        let key = '';
        signFile(file, {
            fieldId
        }).then((res)=>{
            if (!res.data || !res.data.usysGetUploadURL || !res.data.usysGetUploadURL.presignedPOST) {
                throw Error(res);
            }
            const presignedPOST = res.data.usysGetUploadURL.presignedPOST;
            key = res.data.usysGetUploadURL.key;
            const AWSFields = {};
            presignedPOST.fields.forEach((field)=>{
                const _key = field.key;
                const value = field.value;
                AWSFields[_key] = value;
            });
            return (0, _universalUtils.uploadFileToS3)(presignedPOST.url, AWSFields, file);
        }).then(()=>{
            successUpload(key);
        }).catch((err)=>{
            let code = _constants.SERVER_DATA_VALIDATION_ERRORS.DefaultError;
            if (typeof err === 'string') {
                const content = new window.DOMParser().parseFromString(err, 'text/xml');
                const codeElements = content.getElementsByTagName('Code');
                if (codeElements) {
                    code = codeElements[0].innerHTML;
                }
            }
            if (typeof err === 'object' && err.hasOwnProperty('graphQLErrors')) {
                if (err.graphQLErrors[0].code === 'UsysForbiddenFileExtension') {
                    code = _constants.SERVER_DATA_VALIDATION_ERRORS.ExtensionsError;
                }
            }
            errorUpload(code);
        }).finally(()=>{
            filesState.isUploading = false;
        });
    });
}
const WF_SUBMIT_BUTTON_VALUE = 'wf-submit-button-value';
const adaptAWSErrors = (code)=>{
    if (code === 'EntityTooLarge') return _constants.SERVER_DATA_VALIDATION_ERRORS.MinSizeError;
    if (code === 'EntityTooSmall') return _constants.SERVER_DATA_VALIDATION_ERRORS.MaxSizeError;
    return code;
};
function handleFileUploadInputs(customFieldInputs, props) {
    const { disableSubmitButton, enableSubmitButton } = props;
    const filesState = {
        isUploading: false
    };
    customFieldInputs.forEach((el)=>{
        if (el.getAttribute('type') === 'file') {
            const formFileUploadWrapper = getFirstAncestor(el, isFormFileUploadWrapper);
            const formFileDefault = formFileUploadWrapper.querySelector('.w-file-upload-default');
            const formFileSuccess = formFileUploadWrapper.querySelector('.w-file-upload-success');
            const formFileError = formFileUploadWrapper.querySelector('.w-file-upload-error');
            const formFileErrorMsg = formFileError.querySelector('.w-file-upload-error-msg');
            const formFileUploading = formFileUploadWrapper.querySelector('.w-file-upload-uploading');
            const fileUploadFileName = formFileUploadWrapper.querySelector('.w-file-upload-file-name');
            const fileRemoveLink = formFileUploadWrapper.querySelector('.w-file-remove-link');
            const fileUploadLabel = formFileUploadWrapper.querySelector('.w-file-upload-label');
            // eslint-disable-next-line no-inner-declarations
            function showUploading() {
                (0, _utils.addHiddenClass)(formFileDefault);
                (0, _utils.addHiddenClass)(formFileError);
                (0, _utils.addHiddenClass)(formFileSuccess);
                (0, _utils.removeHiddenClass)(formFileUploading);
                formFileUploading.focus();
                disableSubmitButton();
            }
            // eslint-disable-next-line no-inner-declarations
            function successUpload(fileUrl) {
                (0, _utils.addHiddenClass)(formFileDefault);
                (0, _utils.addHiddenClass)(formFileError);
                (0, _utils.addHiddenClass)(formFileUploading);
                (0, _utils.removeHiddenClass)(formFileSuccess);
                formFileSuccess.focus();
                enableSubmitButton();
                (0, _universalUtils.setTempUserFileKey)(el, fileUrl);
            }
            // eslint-disable-next-line no-inner-declarations
            function errorUpload(code = _constants.SERVER_DATA_VALIDATION_ERRORS.DefaultError) {
                const errorText = formFileErrorMsg.getAttribute(adaptAWSErrors(code).toLowerCase());
                (0, _utils.addHiddenClass)(formFileSuccess);
                (0, _utils.addHiddenClass)(formFileUploading);
                (0, _utils.removeHiddenClass)(formFileDefault);
                (0, _utils.removeHiddenClass)(formFileError);
                if (errorText) {
                    formFileErrorMsg.innerHTML = errorText;
                }
                formFileError.focus();
                enableSubmitButton();
            }
            // eslint-disable-next-line no-inner-declarations
            function showDefault() {
                (0, _utils.addHiddenClass)(formFileSuccess);
                (0, _utils.addHiddenClass)(formFileUploading);
                (0, _utils.addHiddenClass)(formFileError);
                (0, _utils.removeHiddenClass)(formFileDefault);
                fileUploadLabel.focus();
            }
            // eslint-disable-next-line no-inner-declarations
            function changeFileNameText(filename) {
                fileUploadFileName.innerHTML = filename;
            }
            // eslint-disable-next-line no-inner-declarations
            function cancelFile() {
                changeFileNameText('');
                (0, _universalUtils.removeTempUserFileKey)(el);
                showDefault();
            }
            // eslint-disable-next-line no-inner-declarations
            function deleteFile() {
                (0, _universalUtils.setUserFileKey)(el, 'DELETE');
                cancelFile();
            }
            handleFileRemoveLink(fileRemoveLink, el, {
                deleteFile,
                cancelFile
            });
            handleFileUploadInput(el, {
                showUploading,
                successUpload,
                errorUpload,
                changeFileNameText,
                fileRemoveLink,
                filesState
            });
        }
    });
}
function handleFields() {
    const userForms = document.querySelectorAll(`form[${_constants.USYS_DATA_ATTRS.formType}]`);
    userForms.forEach((userForm)=>{
        const customFieldInputs = userForm.querySelectorAll(`input[${_constants.USYS_DATA_ATTRS.field}], select[${_constants.USYS_DATA_ATTRS.field}]`);
        const submitButton = userForm.querySelector('input[type="submit"]');
        submitButton.setAttribute(WF_SUBMIT_BUTTON_VALUE, submitButton.value);
        function disableSubmitButton() {
            if (submitButton) {
                (0, _utils.disableSubmit)(submitButton);
            }
        }
        function enableSubmitButton() {
            if (submitButton) {
                submitButton.removeAttribute('disabled');
                submitButton.setAttribute('value', submitButton.getAttribute(WF_SUBMIT_BUTTON_VALUE) || 'Submit');
            }
        }
        if (customFieldInputs.length > 0) {
            setFieldValidation(customFieldInputs);
            handleFileUploadInputs(customFieldInputs, {
                disableSubmitButton,
                enableSubmitButton
            });
        }
        const CHECKBOX_CLASS_NAME = 'w-checkbox-input';
        const CHECKED_CLASS = 'w--redirected-checked';
        const customCheckboxes = document.querySelectorAll(`form[${_constants.USYS_DATA_ATTRS.formType}] input[type="checkbox"]:not(` + CHECKBOX_CLASS_NAME + ')');
        customCheckboxes.forEach((checkbox)=>{
            checkbox.addEventListener('change', function(e) {
                getMatchingSiblings(e, (element)=>{
                    return element.classList.contains(CHECKBOX_CLASS_NAME);
                }).forEach((sibling)=>{
                    sibling.classList.toggle(CHECKED_CLASS);
                });
            });
        });
    });
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzeXNGb3JtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGRpc2FibGVTdWJtaXQsXG4gIHVzZXJTeXN0ZW1zUmVxdWVzdENsaWVudCxcbiAgYWRkSGlkZGVuQ2xhc3MsXG4gIHJlbW92ZUhpZGRlbkNsYXNzLFxufSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7Z2V0RmllbGRWYWxpZGF0aW9uc30gZnJvbSAnLi9xdWVyaWVzJztcbmltcG9ydCB7XG4gIE5PX1JFUVVJUkVEX0FUVFJJQlVURSxcbiAgU0VSVkVSX0RBVEFfVkFMSURBVElPTl9FUlJPUlMsXG4gIFVTWVNfREFUQV9BVFRSUyxcbn0gZnJvbSAnQHBhY2thZ2VzL3N5c3RlbXMvdXNlcnMvY29uc3RhbnRzJztcbmltcG9ydCB7XG4gIHVwbG9hZEZpbGVUb1MzLFxuICBnZXRVc2VyRmlsZUtleSxcbiAgc2V0VGVtcFVzZXJGaWxlS2V5LFxuICBzZXRVc2VyRmlsZUtleSxcbiAgcmVtb3ZlVGVtcFVzZXJGaWxlS2V5LFxufSBmcm9tICdAcGFja2FnZXMvc3lzdGVtcy91c2Vycy91dGlscy91bml2ZXJzYWxVdGlscyc7XG5pbXBvcnQge2dldFVwbG9hZFVSTE11dGF0aW9ufSBmcm9tICcuL211dGF0aW9ucyc7XG4vKiBnbG9iYWwgd2luZG93LCBIVE1MSW5wdXRFbGVtZW50LCBIVE1MU2VsZWN0RWxlbWVudCwgZG9jdW1lbnQgKi9cblxuZnVuY3Rpb24gYXN5bmNHZXRGaWVsZFZhbGlkYXRpb25zKCkge1xuICByZXR1cm4gdXNlclN5c3RlbXNSZXF1ZXN0Q2xpZW50LnF1ZXJ5KHtcbiAgICBxdWVyeTogZ2V0RmllbGRWYWxpZGF0aW9ucyxcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNpZ25GaWxlKGZpbGUsIHtmaWVsZElkfSkge1xuICByZXR1cm4gdXNlclN5c3RlbXNSZXF1ZXN0Q2xpZW50Lm11dGF0ZSh7XG4gICAgbXV0YXRpb246IGdldFVwbG9hZFVSTE11dGF0aW9uLFxuICAgIHZhcmlhYmxlczoge1xuICAgICAgZmllbGRJZCxcbiAgICAgIGZpbGVuYW1lOiBmaWxlLm5hbWUsXG4gICAgfSxcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNldFJlcXVpcmVkKGlucHV0LCB1c2VyRmllbGQpIHtcbiAgaWYgKHVzZXJGaWVsZC5yZXF1aXJlZCA9PSBudWxsKSByZXR1cm47XG4gIGlucHV0LnJlcXVpcmVkID0gdXNlckZpZWxkLnJlcXVpcmVkO1xufVxuXG5jb25zdCBpbnB1dEF0dHJpYnV0ZU1hcCA9IHtcbiAgbWluTGVuZ3RoOiAnbWlubGVuZ3RoJyxcbiAgbWF4TGVuZ3RoOiAnbWF4bGVuZ3RoJyxcbiAgbWluOiAnbWluJyxcbiAgbWF4OiAnbWF4JyxcbiAgc3RlcDogJ3N0ZXAnLFxuICBleHRlbnNpb25zOiAnYWNjZXB0Jyxcbn07XG5cbmNvbnN0IGZvcm1hdFZhbHVlTWFwID0ge1xuICBleHRlbnNpb25zOiBmdW5jdGlvbiBhY2NlcHQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUuam9pbignLCcpO1xuICB9LFxufTtcblxuZnVuY3Rpb24gY29udmVydFRvU3RyKHZhbHVlKSB7XG4gIHJldHVybiBTdHJpbmcodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBzZXRWYWxpZGF0aW9ucyhpbnB1dCwgdXNlckZpZWxkKSB7XG4gIGlmICh1c2VyRmllbGQudmFsaWRhdGlvbnMgPT0gbnVsbCkgcmV0dXJuO1xuXG4gIE9iamVjdC5rZXlzKHVzZXJGaWVsZC52YWxpZGF0aW9ucykubWFwKChhdHRyKSA9PiB7XG4gICAgY29uc3QgdmFsID0gdXNlckZpZWxkLnZhbGlkYXRpb25zW2F0dHJdO1xuXG4gICAgaWYgKFxuICAgICAgYXR0ciA9PT0gJ29wdGlvbnMnICYmXG4gICAgICBBcnJheS5pc0FycmF5KHZhbCkgJiZcbiAgICAgIGlucHV0IGluc3RhbmNlb2YgSFRNTFNlbGVjdEVsZW1lbnRcbiAgICApIHtcbiAgICAgIHZhbC5mb3JFYWNoKChvcHRpb24pID0+IHtcbiAgICAgICAgaWYgKG9wdGlvbi5zbHVnICYmIG9wdGlvbi5uYW1lKSB7XG4gICAgICAgICAgY29uc3Qgb3B0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgICAgb3B0LnZhbHVlID0gb3B0aW9uLnNsdWc7XG4gICAgICAgICAgb3B0LmlubmVySFRNTCA9IG9wdGlvbi5uYW1lO1xuICAgICAgICAgIGlucHV0LmFwcGVuZENoaWxkKG9wdCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh2YWwgIT09IG51bGwgJiYgaW5wdXRBdHRyaWJ1dGVNYXBbYXR0cl0pIHtcbiAgICAgIGxldCBmb3JtYXRWYWx1ZTtcbiAgICAgIGlmIChmb3JtYXRWYWx1ZU1hcFthdHRyXSkge1xuICAgICAgICBmb3JtYXRWYWx1ZSA9IGZvcm1hdFZhbHVlTWFwW2F0dHJdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9ybWF0VmFsdWUgPSBjb252ZXJ0VG9TdHI7XG4gICAgICB9XG5cbiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShpbnB1dEF0dHJpYnV0ZU1hcFthdHRyXSwgZm9ybWF0VmFsdWUodmFsKSk7XG4gICAgfVxuXG4gICAgaWYgKGF0dHIgPT09ICdtYXhMZW5ndGgnICYmIHZhbCA9PT0gbnVsbCkge1xuICAgICAgaW5wdXQucmVtb3ZlQXR0cmlidXRlKCdtYXhsZW5ndGgnKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzZXRVc2VyRmllbGRWYWxpZGF0aW9uQXR0cihpbnB1dCwgdXNlckZpZWxkKSB7XG4gIGNvbnN0IGZpZWxkVHlwZSA9IGlucHV0LmdldEF0dHJpYnV0ZShVU1lTX0RBVEFfQVRUUlMuZmllbGRUeXBlKTtcbiAgaWYgKCFOT19SRVFVSVJFRF9BVFRSSUJVVEUuaW5jbHVkZXMoZmllbGRUeXBlKSkge1xuICAgIHNldFJlcXVpcmVkKGlucHV0LCB1c2VyRmllbGQpO1xuICB9XG4gIHNldFZhbGlkYXRpb25zKGlucHV0LCB1c2VyRmllbGQpO1xufVxuXG5mdW5jdGlvbiBtYXRjaElucHV0VG9EYXRhKGlucHV0LCB1c2VyRmllbGREYXRhKSB7XG4gIGNvbnN0IGZpZWxkSWQgPSBpbnB1dC5nZXRBdHRyaWJ1dGUoVVNZU19EQVRBX0FUVFJTLmZpZWxkKTtcbiAgaWYgKCFmaWVsZElkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB1c2VyRmllbGREYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHVzZXJGaWVsZERhdGFbaV0uaWQgPT09IGZpZWxkSWQpIHtcbiAgICAgIHJldHVybiB1c2VyRmllbGREYXRhW2ldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gc2V0RmllbGRWYWxpZGF0aW9uKGN1c3RvbUZpZWxkSW5wdXRzKSB7XG4gIGFzeW5jR2V0RmllbGRWYWxpZGF0aW9ucygpXG4gICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBjb25zdCB1c2VyRmllbGREYXRhID0gcmVzcG9uc2UuZGF0YS5zaXRlLnVzeXNGaWVsZFNjaGVtYTtcbiAgICAgIGlmICghdXNlckZpZWxkRGF0YSkgcmV0dXJuO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1c3RvbUZpZWxkSW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gY3VzdG9tRmllbGRJbnB1dHNbaV07XG4gICAgICAgIGlmIChcbiAgICAgICAgICAhaW5wdXQgfHxcbiAgICAgICAgICAhKFxuICAgICAgICAgICAgaW5wdXQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50IHx8XG4gICAgICAgICAgICBpbnB1dCBpbnN0YW5jZW9mIEhUTUxTZWxlY3RFbGVtZW50XG4gICAgICAgICAgKSB8fFxuICAgICAgICAgIGlucHV0LmdldEF0dHJpYnV0ZShVU1lTX0RBVEFfQVRUUlMuZmllbGRUeXBlKSA9PT0gJ0Jvb2wnXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVzZXJGaWVsZCA9IG1hdGNoSW5wdXRUb0RhdGEoaW5wdXQsIHVzZXJGaWVsZERhdGEpO1xuICAgICAgICBpZiAoIXVzZXJGaWVsZCkgY29udGludWU7XG4gICAgICAgIHNldFVzZXJGaWVsZFZhbGlkYXRpb25BdHRyKGlucHV0LCB1c2VyRmllbGQpO1xuICAgICAgfVxuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0TWF0Y2hpbmdTaWJsaW5ncyhlLCBwcmVkKSB7XG4gIGNvbnN0IHNpYmxpbmdzID0gW107XG4gIGlmIChlLnRhcmdldC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHNpYmxpbmdzO1xuICB9XG4gIFtdLnNsaWNlLmNhbGwoZS50YXJnZXQucGFyZW50Tm9kZS5jaGlsZHJlbikuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgIGlmIChwcmVkKGVsZW1lbnQpKSB7XG4gICAgICBzaWJsaW5ncy5wdXNoKGVsZW1lbnQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzaWJsaW5ncztcbn1cblxuZnVuY3Rpb24gaXNGb3JtRmlsZVVwbG9hZFdyYXBwZXIoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ3ctZmlsZS11cGxvYWQnKTtcbn1cblxuZnVuY3Rpb24gZ2V0Rmlyc3RBbmNlc3RvcihlbGVtZW50LCBwcmVkKSB7XG4gIGlmIChlbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAocHJlZChlbGVtZW50KSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG4gIHJldHVybiBnZXRGaXJzdEFuY2VzdG9yKGVsZW1lbnQucGFyZW50Tm9kZSwgcHJlZCk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZpbGVSZW1vdmVMaW5rKGNhbmNlbFJlbW92ZUxpbmtFbGVtZW50LCBpbnB1dEVsZW1lbnQsIHByb3BzKSB7XG4gIGNvbnN0IHtkZWxldGVGaWxlLCBjYW5jZWxGaWxlfSA9IHByb3BzO1xuICBjYW5jZWxSZW1vdmVMaW5rRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudHlwZSA9PT0gJ2tleWRvd24nKSB7XG4gICAgICBpZiAoZS53aGljaCAhPT0gMTMgJiYgZS53aGljaCAhPT0gMzIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIGlmIChnZXRVc2VyRmlsZUtleShpbnB1dEVsZW1lbnQpKSB7XG4gICAgICBkZWxldGVGaWxlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNhbmNlbEZpbGUoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZpbGVVcGxvYWRJbnB1dChlbGVtZW50LCBwcm9wcykge1xuICBjb25zdCB7XG4gICAgc2hvd1VwbG9hZGluZyxcbiAgICBzdWNjZXNzVXBsb2FkLFxuICAgIGVycm9yVXBsb2FkLFxuICAgIGNoYW5nZUZpbGVOYW1lVGV4dCxcbiAgICBkaXNhYmxlU3VibWl0QnV0dG9uLFxuICAgIGZpbGVzU3RhdGUsXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgZmllbGRJZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFVTWVNfREFUQV9BVFRSUy5maWVsZCk7XG5cbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChmaWxlc1N0YXRlLmlzVXBsb2FkaW5nKSByZXR1cm47XG4gICAgY29uc3QgZmlsZSA9IGUudGFyZ2V0ICYmIGUudGFyZ2V0LmZpbGVzICYmIGUudGFyZ2V0LmZpbGVzWzBdO1xuICAgIGlmICghZmlsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNob3dVcGxvYWRpbmcoKTtcbiAgICBjaGFuZ2VGaWxlTmFtZVRleHQoZmlsZS5uYW1lKTtcblxuICAgIGZpbGVzU3RhdGUuaXNVcGxvYWRpbmcgPSB0cnVlO1xuXG4gICAgaWYgKCFmaWxlc1N0YXRlLmlzVXBsb2FkaW5nKSB7XG4gICAgICBkaXNhYmxlU3VibWl0QnV0dG9uKCk7XG4gICAgfVxuXG4gICAgbGV0IGtleSA9ICcnO1xuXG4gICAgc2lnbkZpbGUoZmlsZSwge2ZpZWxkSWR9KVxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgIXJlcy5kYXRhIHx8XG4gICAgICAgICAgIXJlcy5kYXRhLnVzeXNHZXRVcGxvYWRVUkwgfHxcbiAgICAgICAgICAhcmVzLmRhdGEudXN5c0dldFVwbG9hZFVSTC5wcmVzaWduZWRQT1NUXG4gICAgICAgICkge1xuICAgICAgICAgIHRocm93IEVycm9yKHJlcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJlc2lnbmVkUE9TVCA9IHJlcy5kYXRhLnVzeXNHZXRVcGxvYWRVUkwucHJlc2lnbmVkUE9TVDtcbiAgICAgICAga2V5ID0gcmVzLmRhdGEudXN5c0dldFVwbG9hZFVSTC5rZXk7XG4gICAgICAgIGNvbnN0IEFXU0ZpZWxkcyA9IHt9O1xuICAgICAgICBwcmVzaWduZWRQT1NULmZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgICAgIGNvbnN0IF9rZXkgPSBmaWVsZC5rZXk7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBmaWVsZC52YWx1ZTtcbiAgICAgICAgICBBV1NGaWVsZHNbX2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB1cGxvYWRGaWxlVG9TMyhwcmVzaWduZWRQT1NULnVybCwgQVdTRmllbGRzLCBmaWxlKTtcbiAgICAgIH0pXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHN1Y2Nlc3NVcGxvYWQoa2V5KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBsZXQgY29kZSA9IFNFUlZFUl9EQVRBX1ZBTElEQVRJT05fRVJST1JTLkRlZmF1bHRFcnJvcjtcbiAgICAgICAgaWYgKHR5cGVvZiBlcnIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgY29uc3QgY29udGVudCA9IG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKFxuICAgICAgICAgICAgZXJyLFxuICAgICAgICAgICAgJ3RleHQveG1sJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgY29kZUVsZW1lbnRzID0gY29udGVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnQ29kZScpO1xuICAgICAgICAgIGlmIChjb2RlRWxlbWVudHMpIHtcbiAgICAgICAgICAgIGNvZGUgPSBjb2RlRWxlbWVudHNbMF0uaW5uZXJIVE1MO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGVyciA9PT0gJ29iamVjdCcgJiYgZXJyLmhhc093blByb3BlcnR5KCdncmFwaFFMRXJyb3JzJykpIHtcbiAgICAgICAgICBpZiAoZXJyLmdyYXBoUUxFcnJvcnNbMF0uY29kZSA9PT0gJ1VzeXNGb3JiaWRkZW5GaWxlRXh0ZW5zaW9uJykge1xuICAgICAgICAgICAgY29kZSA9IFNFUlZFUl9EQVRBX1ZBTElEQVRJT05fRVJST1JTLkV4dGVuc2lvbnNFcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZXJyb3JVcGxvYWQoY29kZSk7XG4gICAgICB9KVxuICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICBmaWxlc1N0YXRlLmlzVXBsb2FkaW5nID0gZmFsc2U7XG4gICAgICB9KTtcbiAgfSk7XG59XG5cbmNvbnN0IFdGX1NVQk1JVF9CVVRUT05fVkFMVUUgPSAnd2Ytc3VibWl0LWJ1dHRvbi12YWx1ZSc7XG5cbmNvbnN0IGFkYXB0QVdTRXJyb3JzID0gKGNvZGUpID0+IHtcbiAgaWYgKGNvZGUgPT09ICdFbnRpdHlUb29MYXJnZScpXG4gICAgcmV0dXJuIFNFUlZFUl9EQVRBX1ZBTElEQVRJT05fRVJST1JTLk1pblNpemVFcnJvcjtcbiAgaWYgKGNvZGUgPT09ICdFbnRpdHlUb29TbWFsbCcpXG4gICAgcmV0dXJuIFNFUlZFUl9EQVRBX1ZBTElEQVRJT05fRVJST1JTLk1heFNpemVFcnJvcjtcbiAgcmV0dXJuIGNvZGU7XG59O1xuXG5mdW5jdGlvbiBoYW5kbGVGaWxlVXBsb2FkSW5wdXRzKGN1c3RvbUZpZWxkSW5wdXRzLCBwcm9wcykge1xuICBjb25zdCB7ZGlzYWJsZVN1Ym1pdEJ1dHRvbiwgZW5hYmxlU3VibWl0QnV0dG9ufSA9IHByb3BzO1xuICBjb25zdCBmaWxlc1N0YXRlID0ge1xuICAgIGlzVXBsb2FkaW5nOiBmYWxzZSxcbiAgfTtcbiAgY3VzdG9tRmllbGRJbnB1dHMuZm9yRWFjaCgoZWwpID0+IHtcbiAgICBpZiAoZWwuZ2V0QXR0cmlidXRlKCd0eXBlJykgPT09ICdmaWxlJykge1xuICAgICAgY29uc3QgZm9ybUZpbGVVcGxvYWRXcmFwcGVyID0gZ2V0Rmlyc3RBbmNlc3RvcihcbiAgICAgICAgZWwsXG4gICAgICAgIGlzRm9ybUZpbGVVcGxvYWRXcmFwcGVyXG4gICAgICApO1xuICAgICAgY29uc3QgZm9ybUZpbGVEZWZhdWx0ID0gZm9ybUZpbGVVcGxvYWRXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICcudy1maWxlLXVwbG9hZC1kZWZhdWx0J1xuICAgICAgKTtcbiAgICAgIGNvbnN0IGZvcm1GaWxlU3VjY2VzcyA9IGZvcm1GaWxlVXBsb2FkV3JhcHBlci5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAnLnctZmlsZS11cGxvYWQtc3VjY2VzcydcbiAgICAgICk7XG4gICAgICBjb25zdCBmb3JtRmlsZUVycm9yID0gZm9ybUZpbGVVcGxvYWRXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICcudy1maWxlLXVwbG9hZC1lcnJvcidcbiAgICAgICk7XG4gICAgICBjb25zdCBmb3JtRmlsZUVycm9yTXNnID0gZm9ybUZpbGVFcnJvci5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAnLnctZmlsZS11cGxvYWQtZXJyb3ItbXNnJ1xuICAgICAgKTtcbiAgICAgIGNvbnN0IGZvcm1GaWxlVXBsb2FkaW5nID0gZm9ybUZpbGVVcGxvYWRXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICcudy1maWxlLXVwbG9hZC11cGxvYWRpbmcnXG4gICAgICApO1xuICAgICAgY29uc3QgZmlsZVVwbG9hZEZpbGVOYW1lID0gZm9ybUZpbGVVcGxvYWRXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICcudy1maWxlLXVwbG9hZC1maWxlLW5hbWUnXG4gICAgICApO1xuXG4gICAgICBjb25zdCBmaWxlUmVtb3ZlTGluayA9IGZvcm1GaWxlVXBsb2FkV3JhcHBlci5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAnLnctZmlsZS1yZW1vdmUtbGluaydcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGZpbGVVcGxvYWRMYWJlbCA9IGZvcm1GaWxlVXBsb2FkV3JhcHBlci5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAnLnctZmlsZS11cGxvYWQtbGFiZWwnXG4gICAgICApO1xuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW5uZXItZGVjbGFyYXRpb25zXG4gICAgICBmdW5jdGlvbiBzaG93VXBsb2FkaW5nKCkge1xuICAgICAgICBhZGRIaWRkZW5DbGFzcyhmb3JtRmlsZURlZmF1bHQpO1xuICAgICAgICBhZGRIaWRkZW5DbGFzcyhmb3JtRmlsZUVycm9yKTtcbiAgICAgICAgYWRkSGlkZGVuQ2xhc3MoZm9ybUZpbGVTdWNjZXNzKTtcbiAgICAgICAgcmVtb3ZlSGlkZGVuQ2xhc3MoZm9ybUZpbGVVcGxvYWRpbmcpO1xuICAgICAgICBmb3JtRmlsZVVwbG9hZGluZy5mb2N1cygpO1xuXG4gICAgICAgIGRpc2FibGVTdWJtaXRCdXR0b24oKTtcbiAgICAgIH1cblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWlubmVyLWRlY2xhcmF0aW9uc1xuICAgICAgZnVuY3Rpb24gc3VjY2Vzc1VwbG9hZChmaWxlVXJsKSB7XG4gICAgICAgIGFkZEhpZGRlbkNsYXNzKGZvcm1GaWxlRGVmYXVsdCk7XG4gICAgICAgIGFkZEhpZGRlbkNsYXNzKGZvcm1GaWxlRXJyb3IpO1xuICAgICAgICBhZGRIaWRkZW5DbGFzcyhmb3JtRmlsZVVwbG9hZGluZyk7XG4gICAgICAgIHJlbW92ZUhpZGRlbkNsYXNzKGZvcm1GaWxlU3VjY2Vzcyk7XG4gICAgICAgIGZvcm1GaWxlU3VjY2Vzcy5mb2N1cygpO1xuICAgICAgICBlbmFibGVTdWJtaXRCdXR0b24oKTtcbiAgICAgICAgc2V0VGVtcFVzZXJGaWxlS2V5KGVsLCBmaWxlVXJsKTtcbiAgICAgIH1cblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWlubmVyLWRlY2xhcmF0aW9uc1xuICAgICAgZnVuY3Rpb24gZXJyb3JVcGxvYWQoY29kZSA9IFNFUlZFUl9EQVRBX1ZBTElEQVRJT05fRVJST1JTLkRlZmF1bHRFcnJvcikge1xuICAgICAgICBjb25zdCBlcnJvclRleHQgPSBmb3JtRmlsZUVycm9yTXNnLmdldEF0dHJpYnV0ZShcbiAgICAgICAgICBhZGFwdEFXU0Vycm9ycyhjb2RlKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICk7XG4gICAgICAgIGFkZEhpZGRlbkNsYXNzKGZvcm1GaWxlU3VjY2Vzcyk7XG4gICAgICAgIGFkZEhpZGRlbkNsYXNzKGZvcm1GaWxlVXBsb2FkaW5nKTtcbiAgICAgICAgcmVtb3ZlSGlkZGVuQ2xhc3MoZm9ybUZpbGVEZWZhdWx0KTtcbiAgICAgICAgcmVtb3ZlSGlkZGVuQ2xhc3MoZm9ybUZpbGVFcnJvcik7XG4gICAgICAgIGlmIChlcnJvclRleHQpIHtcbiAgICAgICAgICBmb3JtRmlsZUVycm9yTXNnLmlubmVySFRNTCA9IGVycm9yVGV4dDtcbiAgICAgICAgfVxuICAgICAgICBmb3JtRmlsZUVycm9yLmZvY3VzKCk7XG4gICAgICAgIGVuYWJsZVN1Ym1pdEJ1dHRvbigpO1xuICAgICAgfVxuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW5uZXItZGVjbGFyYXRpb25zXG4gICAgICBmdW5jdGlvbiBzaG93RGVmYXVsdCgpIHtcbiAgICAgICAgYWRkSGlkZGVuQ2xhc3MoZm9ybUZpbGVTdWNjZXNzKTtcbiAgICAgICAgYWRkSGlkZGVuQ2xhc3MoZm9ybUZpbGVVcGxvYWRpbmcpO1xuICAgICAgICBhZGRIaWRkZW5DbGFzcyhmb3JtRmlsZUVycm9yKTtcbiAgICAgICAgcmVtb3ZlSGlkZGVuQ2xhc3MoZm9ybUZpbGVEZWZhdWx0KTtcbiAgICAgICAgZmlsZVVwbG9hZExhYmVsLmZvY3VzKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbm5lci1kZWNsYXJhdGlvbnNcbiAgICAgIGZ1bmN0aW9uIGNoYW5nZUZpbGVOYW1lVGV4dChmaWxlbmFtZSkge1xuICAgICAgICBmaWxlVXBsb2FkRmlsZU5hbWUuaW5uZXJIVE1MID0gZmlsZW5hbWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbm5lci1kZWNsYXJhdGlvbnNcbiAgICAgIGZ1bmN0aW9uIGNhbmNlbEZpbGUoKSB7XG4gICAgICAgIGNoYW5nZUZpbGVOYW1lVGV4dCgnJyk7XG4gICAgICAgIHJlbW92ZVRlbXBVc2VyRmlsZUtleShlbCk7XG4gICAgICAgIHNob3dEZWZhdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbm5lci1kZWNsYXJhdGlvbnNcbiAgICAgIGZ1bmN0aW9uIGRlbGV0ZUZpbGUoKSB7XG4gICAgICAgIHNldFVzZXJGaWxlS2V5KGVsLCAnREVMRVRFJyk7XG4gICAgICAgIGNhbmNlbEZpbGUoKTtcbiAgICAgIH1cblxuICAgICAgaGFuZGxlRmlsZVJlbW92ZUxpbmsoZmlsZVJlbW92ZUxpbmssIGVsLCB7XG4gICAgICAgIGRlbGV0ZUZpbGUsXG4gICAgICAgIGNhbmNlbEZpbGUsXG4gICAgICB9KTtcblxuICAgICAgaGFuZGxlRmlsZVVwbG9hZElucHV0KGVsLCB7XG4gICAgICAgIHNob3dVcGxvYWRpbmcsXG4gICAgICAgIHN1Y2Nlc3NVcGxvYWQsXG4gICAgICAgIGVycm9yVXBsb2FkLFxuICAgICAgICBjaGFuZ2VGaWxlTmFtZVRleHQsXG4gICAgICAgIGZpbGVSZW1vdmVMaW5rLFxuICAgICAgICBmaWxlc1N0YXRlLFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUZpZWxkcygpIHtcbiAgY29uc3QgdXNlckZvcm1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICBgZm9ybVske1VTWVNfREFUQV9BVFRSUy5mb3JtVHlwZX1dYFxuICApO1xuXG4gIHVzZXJGb3Jtcy5mb3JFYWNoKCh1c2VyRm9ybSkgPT4ge1xuICAgIGNvbnN0IGN1c3RvbUZpZWxkSW5wdXRzID0gdXNlckZvcm0ucXVlcnlTZWxlY3RvckFsbChcbiAgICAgIGBpbnB1dFske1VTWVNfREFUQV9BVFRSUy5maWVsZH1dLCBzZWxlY3RbJHtVU1lTX0RBVEFfQVRUUlMuZmllbGR9XWBcbiAgICApO1xuXG4gICAgY29uc3Qgc3VibWl0QnV0dG9uID0gdXNlckZvcm0ucXVlcnlTZWxlY3RvcignaW5wdXRbdHlwZT1cInN1Ym1pdFwiXScpO1xuICAgIHN1Ym1pdEJ1dHRvbi5zZXRBdHRyaWJ1dGUoV0ZfU1VCTUlUX0JVVFRPTl9WQUxVRSwgc3VibWl0QnV0dG9uLnZhbHVlKTtcblxuICAgIGZ1bmN0aW9uIGRpc2FibGVTdWJtaXRCdXR0b24oKSB7XG4gICAgICBpZiAoc3VibWl0QnV0dG9uKSB7XG4gICAgICAgIGRpc2FibGVTdWJtaXQoc3VibWl0QnV0dG9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmFibGVTdWJtaXRCdXR0b24oKSB7XG4gICAgICBpZiAoc3VibWl0QnV0dG9uKSB7XG4gICAgICAgIHN1Ym1pdEJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gICAgICAgIHN1Ym1pdEJ1dHRvbi5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgJ3ZhbHVlJyxcbiAgICAgICAgICBzdWJtaXRCdXR0b24uZ2V0QXR0cmlidXRlKFdGX1NVQk1JVF9CVVRUT05fVkFMVUUpIHx8ICdTdWJtaXQnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGN1c3RvbUZpZWxkSW5wdXRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHNldEZpZWxkVmFsaWRhdGlvbihjdXN0b21GaWVsZElucHV0cyk7XG4gICAgICBoYW5kbGVGaWxlVXBsb2FkSW5wdXRzKGN1c3RvbUZpZWxkSW5wdXRzLCB7XG4gICAgICAgIGRpc2FibGVTdWJtaXRCdXR0b24sXG4gICAgICAgIGVuYWJsZVN1Ym1pdEJ1dHRvbixcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IENIRUNLQk9YX0NMQVNTX05BTUUgPSAndy1jaGVja2JveC1pbnB1dCc7XG4gICAgY29uc3QgQ0hFQ0tFRF9DTEFTUyA9ICd3LS1yZWRpcmVjdGVkLWNoZWNrZWQnO1xuXG4gICAgY29uc3QgY3VzdG9tQ2hlY2tib3hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICBgZm9ybVske1VTWVNfREFUQV9BVFRSUy5mb3JtVHlwZX1dIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXTpub3QoYCArXG4gICAgICAgIENIRUNLQk9YX0NMQVNTX05BTUUgK1xuICAgICAgICAnKSdcbiAgICApO1xuXG4gICAgY3VzdG9tQ2hlY2tib3hlcy5mb3JFYWNoKChjaGVja2JveCkgPT4ge1xuICAgICAgY2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZ2V0TWF0Y2hpbmdTaWJsaW5ncyhlLCAoZWxlbWVudCkgPT4ge1xuICAgICAgICAgIHJldHVybiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDSEVDS0JPWF9DTEFTU19OQU1FKTtcbiAgICAgICAgfSkuZm9yRWFjaCgoc2libGluZykgPT4ge1xuICAgICAgICAgIHNpYmxpbmcuY2xhc3NMaXN0LnRvZ2dsZShDSEVDS0VEX0NMQVNTKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXSwibmFtZXMiOlsiaGFuZGxlRmllbGRzIiwiYXN5bmNHZXRGaWVsZFZhbGlkYXRpb25zIiwidXNlclN5c3RlbXNSZXF1ZXN0Q2xpZW50IiwicXVlcnkiLCJnZXRGaWVsZFZhbGlkYXRpb25zIiwic2lnbkZpbGUiLCJmaWxlIiwiZmllbGRJZCIsIm11dGF0ZSIsIm11dGF0aW9uIiwiZ2V0VXBsb2FkVVJMTXV0YXRpb24iLCJ2YXJpYWJsZXMiLCJmaWxlbmFtZSIsIm5hbWUiLCJzZXRSZXF1aXJlZCIsImlucHV0IiwidXNlckZpZWxkIiwicmVxdWlyZWQiLCJpbnB1dEF0dHJpYnV0ZU1hcCIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsIm1pbiIsIm1heCIsInN0ZXAiLCJleHRlbnNpb25zIiwiZm9ybWF0VmFsdWVNYXAiLCJhY2NlcHQiLCJ2YWx1ZSIsImpvaW4iLCJjb252ZXJ0VG9TdHIiLCJTdHJpbmciLCJzZXRWYWxpZGF0aW9ucyIsInZhbGlkYXRpb25zIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImF0dHIiLCJ2YWwiLCJBcnJheSIsImlzQXJyYXkiLCJIVE1MU2VsZWN0RWxlbWVudCIsImZvckVhY2giLCJvcHRpb24iLCJzbHVnIiwib3B0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJmb3JtYXRWYWx1ZSIsInNldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldFVzZXJGaWVsZFZhbGlkYXRpb25BdHRyIiwiZmllbGRUeXBlIiwiZ2V0QXR0cmlidXRlIiwiVVNZU19EQVRBX0FUVFJTIiwiTk9fUkVRVUlSRURfQVRUUklCVVRFIiwiaW5jbHVkZXMiLCJtYXRjaElucHV0VG9EYXRhIiwidXNlckZpZWxkRGF0YSIsImZpZWxkIiwiaSIsImxlbmd0aCIsImlkIiwic2V0RmllbGRWYWxpZGF0aW9uIiwiY3VzdG9tRmllbGRJbnB1dHMiLCJ0aGVuIiwicmVzcG9uc2UiLCJkYXRhIiwic2l0ZSIsInVzeXNGaWVsZFNjaGVtYSIsIkhUTUxJbnB1dEVsZW1lbnQiLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsImdldE1hdGNoaW5nU2libGluZ3MiLCJlIiwicHJlZCIsInNpYmxpbmdzIiwidGFyZ2V0IiwicGFyZW50Tm9kZSIsInNsaWNlIiwiY2FsbCIsImNoaWxkcmVuIiwiZWxlbWVudCIsInB1c2giLCJpc0Zvcm1GaWxlVXBsb2FkV3JhcHBlciIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiZ2V0Rmlyc3RBbmNlc3RvciIsImhhbmRsZUZpbGVSZW1vdmVMaW5rIiwiY2FuY2VsUmVtb3ZlTGlua0VsZW1lbnQiLCJpbnB1dEVsZW1lbnQiLCJwcm9wcyIsImRlbGV0ZUZpbGUiLCJjYW5jZWxGaWxlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInR5cGUiLCJ3aGljaCIsInByZXZlbnREZWZhdWx0IiwiZ2V0VXNlckZpbGVLZXkiLCJoYW5kbGVGaWxlVXBsb2FkSW5wdXQiLCJzaG93VXBsb2FkaW5nIiwic3VjY2Vzc1VwbG9hZCIsImVycm9yVXBsb2FkIiwiY2hhbmdlRmlsZU5hbWVUZXh0IiwiZGlzYWJsZVN1Ym1pdEJ1dHRvbiIsImZpbGVzU3RhdGUiLCJpc1VwbG9hZGluZyIsImZpbGVzIiwia2V5IiwicmVzIiwidXN5c0dldFVwbG9hZFVSTCIsInByZXNpZ25lZFBPU1QiLCJFcnJvciIsIkFXU0ZpZWxkcyIsImZpZWxkcyIsIl9rZXkiLCJ1cGxvYWRGaWxlVG9TMyIsInVybCIsImNvZGUiLCJTRVJWRVJfREFUQV9WQUxJREFUSU9OX0VSUk9SUyIsIkRlZmF1bHRFcnJvciIsImNvbnRlbnQiLCJ3aW5kb3ciLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJjb2RlRWxlbWVudHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImhhc093blByb3BlcnR5IiwiZ3JhcGhRTEVycm9ycyIsIkV4dGVuc2lvbnNFcnJvciIsImZpbmFsbHkiLCJXRl9TVUJNSVRfQlVUVE9OX1ZBTFVFIiwiYWRhcHRBV1NFcnJvcnMiLCJNaW5TaXplRXJyb3IiLCJNYXhTaXplRXJyb3IiLCJoYW5kbGVGaWxlVXBsb2FkSW5wdXRzIiwiZW5hYmxlU3VibWl0QnV0dG9uIiwiZWwiLCJmb3JtRmlsZVVwbG9hZFdyYXBwZXIiLCJmb3JtRmlsZURlZmF1bHQiLCJxdWVyeVNlbGVjdG9yIiwiZm9ybUZpbGVTdWNjZXNzIiwiZm9ybUZpbGVFcnJvciIsImZvcm1GaWxlRXJyb3JNc2ciLCJmb3JtRmlsZVVwbG9hZGluZyIsImZpbGVVcGxvYWRGaWxlTmFtZSIsImZpbGVSZW1vdmVMaW5rIiwiZmlsZVVwbG9hZExhYmVsIiwiYWRkSGlkZGVuQ2xhc3MiLCJyZW1vdmVIaWRkZW5DbGFzcyIsImZvY3VzIiwiZmlsZVVybCIsInNldFRlbXBVc2VyRmlsZUtleSIsImVycm9yVGV4dCIsInRvTG93ZXJDYXNlIiwic2hvd0RlZmF1bHQiLCJyZW1vdmVUZW1wVXNlckZpbGVLZXkiLCJzZXRVc2VyRmlsZUtleSIsInVzZXJGb3JtcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtVHlwZSIsInVzZXJGb3JtIiwic3VibWl0QnV0dG9uIiwiZGlzYWJsZVN1Ym1pdCIsIkNIRUNLQk9YX0NMQVNTX05BTUUiLCJDSEVDS0VEX0NMQVNTIiwiY3VzdG9tQ2hlY2tib3hlcyIsImNoZWNrYm94Iiwic2libGluZyIsInRvZ2dsZSJdLCJtYXBwaW5ncyI6Ijs7OzsrQkFnWmdCQTs7O2VBQUFBOzs7dUJBM1lUO3lCQUMyQjsyQkFLM0I7Z0NBT0E7MkJBQzRCO0FBQ25DLGdFQUFnRSxHQUVoRSxTQUFTQztJQUNQLE9BQU9DLCtCQUF3QixDQUFDQyxLQUFLLENBQUM7UUFDcENBLE9BQU9DLDRCQUFtQjtJQUM1QjtBQUNGO0FBRUEsU0FBU0MsU0FBU0MsSUFBSSxFQUFFLEVBQUNDLE9BQU8sRUFBQztJQUMvQixPQUFPTCwrQkFBd0IsQ0FBQ00sTUFBTSxDQUFDO1FBQ3JDQyxVQUFVQywrQkFBb0I7UUFDOUJDLFdBQVc7WUFDVEo7WUFDQUssVUFBVU4sS0FBS08sSUFBSTtRQUNyQjtJQUNGO0FBQ0Y7QUFFQSxTQUFTQyxZQUFZQyxLQUFLLEVBQUVDLFNBQVM7SUFDbkMsSUFBSUEsVUFBVUMsUUFBUSxJQUFJLE1BQU07SUFDaENGLE1BQU1FLFFBQVEsR0FBR0QsVUFBVUMsUUFBUTtBQUNyQztBQUVBLE1BQU1DLG9CQUFvQjtJQUN4QkMsV0FBVztJQUNYQyxXQUFXO0lBQ1hDLEtBQUs7SUFDTEMsS0FBSztJQUNMQyxNQUFNO0lBQ05DLFlBQVk7QUFDZDtBQUVBLE1BQU1DLGlCQUFpQjtJQUNyQkQsWUFBWSxTQUFTRSxPQUFPQyxLQUFLO1FBQy9CLE9BQU9BLE1BQU1DLElBQUksQ0FBQztJQUNwQjtBQUNGO0FBRUEsU0FBU0MsYUFBYUYsS0FBSztJQUN6QixPQUFPRyxPQUFPSDtBQUNoQjtBQUVBLFNBQVNJLGVBQWVoQixLQUFLLEVBQUVDLFNBQVM7SUFDdEMsSUFBSUEsVUFBVWdCLFdBQVcsSUFBSSxNQUFNO0lBRW5DQyxPQUFPQyxJQUFJLENBQUNsQixVQUFVZ0IsV0FBVyxFQUFFRyxHQUFHLENBQUMsQ0FBQ0M7UUFDdEMsTUFBTUMsTUFBTXJCLFVBQVVnQixXQUFXLENBQUNJLEtBQUs7UUFFdkMsSUFDRUEsU0FBUyxhQUNURSxNQUFNQyxPQUFPLENBQUNGLFFBQ2R0QixpQkFBaUJ5QixtQkFDakI7WUFDQUgsSUFBSUksT0FBTyxDQUFDLENBQUNDO2dCQUNYLElBQUlBLE9BQU9DLElBQUksSUFBSUQsT0FBTzdCLElBQUksRUFBRTtvQkFDOUIsTUFBTStCLE1BQU1DLFNBQVNDLGFBQWEsQ0FBQztvQkFDbkNGLElBQUlqQixLQUFLLEdBQUdlLE9BQU9DLElBQUk7b0JBQ3ZCQyxJQUFJRyxTQUFTLEdBQUdMLE9BQU83QixJQUFJO29CQUMzQkUsTUFBTWlDLFdBQVcsQ0FBQ0o7Z0JBQ3BCO1lBQ0Y7UUFDRjtRQUVBLElBQUlQLFFBQVEsUUFBUW5CLGlCQUFpQixDQUFDa0IsS0FBSyxFQUFFO1lBQzNDLElBQUlhO1lBQ0osSUFBSXhCLGNBQWMsQ0FBQ1csS0FBSyxFQUFFO2dCQUN4QmEsY0FBY3hCLGNBQWMsQ0FBQ1csS0FBSztZQUNwQyxPQUFPO2dCQUNMYSxjQUFjcEI7WUFDaEI7WUFFQWQsTUFBTW1DLFlBQVksQ0FBQ2hDLGlCQUFpQixDQUFDa0IsS0FBSyxFQUFFYSxZQUFZWjtRQUMxRDtRQUVBLElBQUlELFNBQVMsZUFBZUMsUUFBUSxNQUFNO1lBQ3hDdEIsTUFBTW9DLGVBQWUsQ0FBQztRQUN4QjtJQUNGO0FBQ0Y7QUFFQSxTQUFTQywyQkFBMkJyQyxLQUFLLEVBQUVDLFNBQVM7SUFDbEQsTUFBTXFDLFlBQVl0QyxNQUFNdUMsWUFBWSxDQUFDQywwQkFBZSxDQUFDRixTQUFTO0lBQzlELElBQUksQ0FBQ0csZ0NBQXFCLENBQUNDLFFBQVEsQ0FBQ0osWUFBWTtRQUM5Q3ZDLFlBQVlDLE9BQU9DO0lBQ3JCO0lBQ0FlLGVBQWVoQixPQUFPQztBQUN4QjtBQUVBLFNBQVMwQyxpQkFBaUIzQyxLQUFLLEVBQUU0QyxhQUFhO0lBQzVDLE1BQU1wRCxVQUFVUSxNQUFNdUMsWUFBWSxDQUFDQywwQkFBZSxDQUFDSyxLQUFLO0lBQ3hELElBQUksQ0FBQ3JELFNBQVM7UUFDWixPQUFPO0lBQ1Q7SUFDQSxJQUFLLElBQUlzRCxJQUFJLEdBQUdBLElBQUlGLGNBQWNHLE1BQU0sRUFBRUQsSUFBSztRQUM3QyxJQUFJRixhQUFhLENBQUNFLEVBQUUsQ0FBQ0UsRUFBRSxLQUFLeEQsU0FBUztZQUNuQyxPQUFPb0QsYUFBYSxDQUFDRSxFQUFFO1FBQ3pCO0lBQ0Y7SUFDQSxPQUFPO0FBQ1Q7QUFFQSxTQUFTRyxtQkFBbUJDLGlCQUFpQjtJQUMzQ2hFLDJCQUNHaUUsSUFBSSxDQUFDLENBQUNDO1FBQ0wsTUFBTVIsZ0JBQWdCUSxTQUFTQyxJQUFJLENBQUNDLElBQUksQ0FBQ0MsZUFBZTtRQUN4RCxJQUFJLENBQUNYLGVBQWU7UUFFcEIsSUFBSyxJQUFJRSxJQUFJLEdBQUdBLElBQUlJLGtCQUFrQkgsTUFBTSxFQUFFRCxJQUFLO1lBQ2pELE1BQU05QyxRQUFRa0QsaUJBQWlCLENBQUNKLEVBQUU7WUFDbEMsSUFDRSxDQUFDOUMsU0FDRCxDQUNFQSxDQUFBQSxpQkFBaUJ3RCxvQkFDakJ4RCxpQkFBaUJ5QixpQkFBZ0IsS0FFbkN6QixNQUFNdUMsWUFBWSxDQUFDQywwQkFBZSxDQUFDRixTQUFTLE1BQU0sUUFDbEQ7Z0JBQ0E7WUFDRjtZQUNBLE1BQU1yQyxZQUFZMEMsaUJBQWlCM0MsT0FBTzRDO1lBQzFDLElBQUksQ0FBQzNDLFdBQVc7WUFDaEJvQywyQkFBMkJyQyxPQUFPQztRQUNwQztJQUNGLEdBQ0N3RCxLQUFLLENBQUMsQ0FBQ0M7UUFDTkMsUUFBUUMsS0FBSyxDQUFDRjtJQUNoQjtBQUNKO0FBRUEsU0FBU0csb0JBQW9CQyxDQUFDLEVBQUVDLElBQUk7SUFDbEMsTUFBTUMsV0FBVyxFQUFFO0lBQ25CLElBQUlGLEVBQUVHLE1BQU0sQ0FBQ0MsVUFBVSxLQUFLLE1BQU07UUFDaEMsT0FBT0Y7SUFDVDtJQUNBLEVBQUUsQ0FBQ0csS0FBSyxDQUFDQyxJQUFJLENBQUNOLEVBQUVHLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDRyxRQUFRLEVBQUUzQyxPQUFPLENBQUMsQ0FBQzRDO1FBQ25ELElBQUlQLEtBQUtPLFVBQVU7WUFDakJOLFNBQVNPLElBQUksQ0FBQ0Q7UUFDaEI7SUFDRjtJQUNBLE9BQU9OO0FBQ1Q7QUFFQSxTQUFTUSx3QkFBd0JGLE9BQU87SUFDdEMsT0FBT0EsUUFBUUcsU0FBUyxDQUFDQyxRQUFRLENBQUM7QUFDcEM7QUFFQSxTQUFTQyxpQkFBaUJMLE9BQU8sRUFBRVAsSUFBSTtJQUNyQyxJQUFJTyxRQUFRSixVQUFVLEtBQUssTUFBTTtRQUMvQixPQUFPO0lBQ1Q7SUFDQSxJQUFJSCxLQUFLTyxVQUFVO1FBQ2pCLE9BQU9BO0lBQ1Q7SUFDQSxPQUFPSyxpQkFBaUJMLFFBQVFKLFVBQVUsRUFBRUg7QUFDOUM7QUFFQSxTQUFTYSxxQkFBcUJDLHVCQUF1QixFQUFFQyxZQUFZLEVBQUVDLEtBQUs7SUFDeEUsTUFBTSxFQUFDQyxVQUFVLEVBQUVDLFVBQVUsRUFBQyxHQUFHRjtJQUNqQ0Ysd0JBQXdCSyxnQkFBZ0IsQ0FBQyxTQUFTLFNBQVVwQixDQUFDO1FBQzNELElBQUlBLEVBQUVxQixJQUFJLEtBQUssV0FBVztZQUN4QixJQUFJckIsRUFBRXNCLEtBQUssS0FBSyxNQUFNdEIsRUFBRXNCLEtBQUssS0FBSyxJQUFJO2dCQUNwQztZQUNGO1lBRUF0QixFQUFFdUIsY0FBYztRQUNsQjtRQUNBLElBQUlDLElBQUFBLDhCQUFjLEVBQUNSLGVBQWU7WUFDaENFO1lBQ0E7UUFDRjtRQUNBQztJQUNGO0FBQ0Y7QUFFQSxTQUFTTSxzQkFBc0JqQixPQUFPLEVBQUVTLEtBQUs7SUFDM0MsTUFBTSxFQUNKUyxhQUFhLEVBQ2JDLGFBQWEsRUFDYkMsV0FBVyxFQUNYQyxrQkFBa0IsRUFDbEJDLG1CQUFtQixFQUNuQkMsVUFBVSxFQUNYLEdBQUdkO0lBQ0osTUFBTXZGLFVBQVU4RSxRQUFRL0IsWUFBWSxDQUFDQywwQkFBZSxDQUFDSyxLQUFLO0lBRTFEeUIsUUFBUVksZ0JBQWdCLENBQUMsVUFBVSxTQUFVcEIsQ0FBQztRQUM1QyxJQUFJK0IsV0FBV0MsV0FBVyxFQUFFO1FBQzVCLE1BQU12RyxPQUFPdUUsRUFBRUcsTUFBTSxJQUFJSCxFQUFFRyxNQUFNLENBQUM4QixLQUFLLElBQUlqQyxFQUFFRyxNQUFNLENBQUM4QixLQUFLLENBQUMsRUFBRTtRQUM1RCxJQUFJLENBQUN4RyxNQUFNO1lBQ1Q7UUFDRjtRQUVBaUc7UUFDQUcsbUJBQW1CcEcsS0FBS08sSUFBSTtRQUU1QitGLFdBQVdDLFdBQVcsR0FBRztRQUV6QixJQUFJLENBQUNELFdBQVdDLFdBQVcsRUFBRTtZQUMzQkY7UUFDRjtRQUVBLElBQUlJLE1BQU07UUFFVjFHLFNBQVNDLE1BQU07WUFBQ0M7UUFBTyxHQUNwQjJELElBQUksQ0FBQyxDQUFDOEM7WUFDTCxJQUNFLENBQUNBLElBQUk1QyxJQUFJLElBQ1QsQ0FBQzRDLElBQUk1QyxJQUFJLENBQUM2QyxnQkFBZ0IsSUFDMUIsQ0FBQ0QsSUFBSTVDLElBQUksQ0FBQzZDLGdCQUFnQixDQUFDQyxhQUFhLEVBQ3hDO2dCQUNBLE1BQU1DLE1BQU1IO1lBQ2Q7WUFDQSxNQUFNRSxnQkFBZ0JGLElBQUk1QyxJQUFJLENBQUM2QyxnQkFBZ0IsQ0FBQ0MsYUFBYTtZQUM3REgsTUFBTUMsSUFBSTVDLElBQUksQ0FBQzZDLGdCQUFnQixDQUFDRixHQUFHO1lBQ25DLE1BQU1LLFlBQVksQ0FBQztZQUNuQkYsY0FBY0csTUFBTSxDQUFDNUUsT0FBTyxDQUFDLENBQUNtQjtnQkFDNUIsTUFBTTBELE9BQU8xRCxNQUFNbUQsR0FBRztnQkFDdEIsTUFBTXBGLFFBQVFpQyxNQUFNakMsS0FBSztnQkFDekJ5RixTQUFTLENBQUNFLEtBQUssR0FBRzNGO1lBQ3BCO1lBQ0EsT0FBTzRGLElBQUFBLDhCQUFjLEVBQUNMLGNBQWNNLEdBQUcsRUFBRUosV0FBVzlHO1FBQ3RELEdBQ0M0RCxJQUFJLENBQUM7WUFDSnNDLGNBQWNPO1FBQ2hCLEdBQ0N2QyxLQUFLLENBQUMsQ0FBQ0M7WUFDTixJQUFJZ0QsT0FBT0Msd0NBQTZCLENBQUNDLFlBQVk7WUFDckQsSUFBSSxPQUFPbEQsUUFBUSxVQUFVO2dCQUMzQixNQUFNbUQsVUFBVSxJQUFJQyxPQUFPQyxTQUFTLEdBQUdDLGVBQWUsQ0FDcER0RCxLQUNBO2dCQUVGLE1BQU11RCxlQUFlSixRQUFRSyxvQkFBb0IsQ0FBQztnQkFDbEQsSUFBSUQsY0FBYztvQkFDaEJQLE9BQU9PLFlBQVksQ0FBQyxFQUFFLENBQUNqRixTQUFTO2dCQUNsQztZQUNGO1lBQ0EsSUFBSSxPQUFPMEIsUUFBUSxZQUFZQSxJQUFJeUQsY0FBYyxDQUFDLGtCQUFrQjtnQkFDbEUsSUFBSXpELElBQUkwRCxhQUFhLENBQUMsRUFBRSxDQUFDVixJQUFJLEtBQUssOEJBQThCO29CQUM5REEsT0FBT0Msd0NBQTZCLENBQUNVLGVBQWU7Z0JBQ3REO1lBQ0Y7WUFDQTNCLFlBQVlnQjtRQUNkLEdBQ0NZLE9BQU8sQ0FBQztZQUNQekIsV0FBV0MsV0FBVyxHQUFHO1FBQzNCO0lBQ0o7QUFDRjtBQUVBLE1BQU15Qix5QkFBeUI7QUFFL0IsTUFBTUMsaUJBQWlCLENBQUNkO0lBQ3RCLElBQUlBLFNBQVMsa0JBQ1gsT0FBT0Msd0NBQTZCLENBQUNjLFlBQVk7SUFDbkQsSUFBSWYsU0FBUyxrQkFDWCxPQUFPQyx3Q0FBNkIsQ0FBQ2UsWUFBWTtJQUNuRCxPQUFPaEI7QUFDVDtBQUVBLFNBQVNpQix1QkFBdUJ6RSxpQkFBaUIsRUFBRTZCLEtBQUs7SUFDdEQsTUFBTSxFQUFDYSxtQkFBbUIsRUFBRWdDLGtCQUFrQixFQUFDLEdBQUc3QztJQUNsRCxNQUFNYyxhQUFhO1FBQ2pCQyxhQUFhO0lBQ2Y7SUFDQTVDLGtCQUFrQnhCLE9BQU8sQ0FBQyxDQUFDbUc7UUFDekIsSUFBSUEsR0FBR3RGLFlBQVksQ0FBQyxZQUFZLFFBQVE7WUFDdEMsTUFBTXVGLHdCQUF3Qm5ELGlCQUM1QmtELElBQ0FyRDtZQUVGLE1BQU11RCxrQkFBa0JELHNCQUFzQkUsYUFBYSxDQUN6RDtZQUVGLE1BQU1DLGtCQUFrQkgsc0JBQXNCRSxhQUFhLENBQ3pEO1lBRUYsTUFBTUUsZ0JBQWdCSixzQkFBc0JFLGFBQWEsQ0FDdkQ7WUFFRixNQUFNRyxtQkFBbUJELGNBQWNGLGFBQWEsQ0FDbEQ7WUFFRixNQUFNSSxvQkFBb0JOLHNCQUFzQkUsYUFBYSxDQUMzRDtZQUVGLE1BQU1LLHFCQUFxQlAsc0JBQXNCRSxhQUFhLENBQzVEO1lBR0YsTUFBTU0saUJBQWlCUixzQkFBc0JFLGFBQWEsQ0FDeEQ7WUFHRixNQUFNTyxrQkFBa0JULHNCQUFzQkUsYUFBYSxDQUN6RDtZQUdGLGlEQUFpRDtZQUNqRCxTQUFTeEM7Z0JBQ1BnRCxJQUFBQSxxQkFBYyxFQUFDVDtnQkFDZlMsSUFBQUEscUJBQWMsRUFBQ047Z0JBQ2ZNLElBQUFBLHFCQUFjLEVBQUNQO2dCQUNmUSxJQUFBQSx3QkFBaUIsRUFBQ0w7Z0JBQ2xCQSxrQkFBa0JNLEtBQUs7Z0JBRXZCOUM7WUFDRjtZQUVBLGlEQUFpRDtZQUNqRCxTQUFTSCxjQUFja0QsT0FBTztnQkFDNUJILElBQUFBLHFCQUFjLEVBQUNUO2dCQUNmUyxJQUFBQSxxQkFBYyxFQUFDTjtnQkFDZk0sSUFBQUEscUJBQWMsRUFBQ0o7Z0JBQ2ZLLElBQUFBLHdCQUFpQixFQUFDUjtnQkFDbEJBLGdCQUFnQlMsS0FBSztnQkFDckJkO2dCQUNBZ0IsSUFBQUEsa0NBQWtCLEVBQUNmLElBQUljO1lBQ3pCO1lBRUEsaURBQWlEO1lBQ2pELFNBQVNqRCxZQUFZZ0IsT0FBT0Msd0NBQTZCLENBQUNDLFlBQVk7Z0JBQ3BFLE1BQU1pQyxZQUFZVixpQkFBaUI1RixZQUFZLENBQzdDaUYsZUFBZWQsTUFBTW9DLFdBQVc7Z0JBRWxDTixJQUFBQSxxQkFBYyxFQUFDUDtnQkFDZk8sSUFBQUEscUJBQWMsRUFBQ0o7Z0JBQ2ZLLElBQUFBLHdCQUFpQixFQUFDVjtnQkFDbEJVLElBQUFBLHdCQUFpQixFQUFDUDtnQkFDbEIsSUFBSVcsV0FBVztvQkFDYlYsaUJBQWlCbkcsU0FBUyxHQUFHNkc7Z0JBQy9CO2dCQUNBWCxjQUFjUSxLQUFLO2dCQUNuQmQ7WUFDRjtZQUVBLGlEQUFpRDtZQUNqRCxTQUFTbUI7Z0JBQ1BQLElBQUFBLHFCQUFjLEVBQUNQO2dCQUNmTyxJQUFBQSxxQkFBYyxFQUFDSjtnQkFDZkksSUFBQUEscUJBQWMsRUFBQ047Z0JBQ2ZPLElBQUFBLHdCQUFpQixFQUFDVjtnQkFDbEJRLGdCQUFnQkcsS0FBSztZQUN2QjtZQUVBLGlEQUFpRDtZQUNqRCxTQUFTL0MsbUJBQW1COUYsUUFBUTtnQkFDbEN3SSxtQkFBbUJyRyxTQUFTLEdBQUduQztZQUNqQztZQUVBLGlEQUFpRDtZQUNqRCxTQUFTb0Y7Z0JBQ1BVLG1CQUFtQjtnQkFDbkJxRCxJQUFBQSxxQ0FBcUIsRUFBQ25CO2dCQUN0QmtCO1lBQ0Y7WUFFQSxpREFBaUQ7WUFDakQsU0FBUy9EO2dCQUNQaUUsSUFBQUEsOEJBQWMsRUFBQ3BCLElBQUk7Z0JBQ25CNUM7WUFDRjtZQUVBTCxxQkFBcUIwRCxnQkFBZ0JULElBQUk7Z0JBQ3ZDN0M7Z0JBQ0FDO1lBQ0Y7WUFFQU0sc0JBQXNCc0MsSUFBSTtnQkFDeEJyQztnQkFDQUM7Z0JBQ0FDO2dCQUNBQztnQkFDQTJDO2dCQUNBekM7WUFDRjtRQUNGO0lBQ0Y7QUFDRjtBQUVPLFNBQVM1RztJQUNkLE1BQU1pSyxZQUFZcEgsU0FBU3FILGdCQUFnQixDQUN6QyxDQUFDLEtBQUssRUFBRTNHLDBCQUFlLENBQUM0RyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBR3JDRixVQUFVeEgsT0FBTyxDQUFDLENBQUMySDtRQUNqQixNQUFNbkcsb0JBQW9CbUcsU0FBU0YsZ0JBQWdCLENBQ2pELENBQUMsTUFBTSxFQUFFM0csMEJBQWUsQ0FBQ0ssS0FBSyxDQUFDLFVBQVUsRUFBRUwsMEJBQWUsQ0FBQ0ssS0FBSyxDQUFDLENBQUMsQ0FBQztRQUdyRSxNQUFNeUcsZUFBZUQsU0FBU3JCLGFBQWEsQ0FBQztRQUM1Q3NCLGFBQWFuSCxZQUFZLENBQUNvRix3QkFBd0IrQixhQUFhMUksS0FBSztRQUVwRSxTQUFTZ0Y7WUFDUCxJQUFJMEQsY0FBYztnQkFDaEJDLElBQUFBLG9CQUFhLEVBQUNEO1lBQ2hCO1FBQ0Y7UUFFQSxTQUFTMUI7WUFDUCxJQUFJMEIsY0FBYztnQkFDaEJBLGFBQWFsSCxlQUFlLENBQUM7Z0JBQzdCa0gsYUFBYW5ILFlBQVksQ0FDdkIsU0FDQW1ILGFBQWEvRyxZQUFZLENBQUNnRiwyQkFBMkI7WUFFekQ7UUFDRjtRQUVBLElBQUlyRSxrQkFBa0JILE1BQU0sR0FBRyxHQUFHO1lBQ2hDRSxtQkFBbUJDO1lBQ25CeUUsdUJBQXVCekUsbUJBQW1CO2dCQUN4QzBDO2dCQUNBZ0M7WUFDRjtRQUNGO1FBRUEsTUFBTTRCLHNCQUFzQjtRQUM1QixNQUFNQyxnQkFBZ0I7UUFFdEIsTUFBTUMsbUJBQW1CNUgsU0FBU3FILGdCQUFnQixDQUNoRCxDQUFDLEtBQUssRUFBRTNHLDBCQUFlLENBQUM0RyxRQUFRLENBQUMsNkJBQTZCLENBQUMsR0FDN0RJLHNCQUNBO1FBR0pFLGlCQUFpQmhJLE9BQU8sQ0FBQyxDQUFDaUk7WUFDeEJBLFNBQVN6RSxnQkFBZ0IsQ0FBQyxVQUFVLFNBQVVwQixDQUFDO2dCQUM3Q0Qsb0JBQW9CQyxHQUFHLENBQUNRO29CQUN0QixPQUFPQSxRQUFRRyxTQUFTLENBQUNDLFFBQVEsQ0FBQzhFO2dCQUNwQyxHQUFHOUgsT0FBTyxDQUFDLENBQUNrSTtvQkFDVkEsUUFBUW5GLFNBQVMsQ0FBQ29GLE1BQU0sQ0FBQ0o7Z0JBQzNCO1lBQ0Y7UUFDRjtJQUNGO0FBQ0YifQ==

}),
56897: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/* globals
 window,
 HTMLElement,
 */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    addHiddenClass: function() {
        return addHiddenClass;
    },
    disableSubmit: function() {
        return disableSubmit;
    },
    getDomParser: function() {
        return getDomParser;
    },
    getErrorAttrName: function() {
        return getErrorAttrName;
    },
    getRedirectPath: function() {
        return getRedirectPath;
    },
    getSignupErrorCode: function() {
        return getSignupErrorCode;
    },
    handleErrorNode: function() {
        return handleErrorNode;
    },
    handleRedirect: function() {
        return handleRedirect;
    },
    hideElement: function() {
        return hideElement;
    },
    redirectWithUsrdir: function() {
        return redirectWithUsrdir;
    },
    removeHiddenClass: function() {
        return removeHiddenClass;
    },
    resetSubmit: function() {
        return resetSubmit;
    },
    showAndFocusElement: function() {
        return showAndFocusElement;
    },
    showElement: function() {
        return showElement;
    },
    userFormError: function() {
        return userFormError;
    },
    userSystemsRequestClient: function() {
        return userSystemsRequestClient;
    }
});
const _apolloClient = __webpack_require__(25195);
const _constants = __webpack_require__(7462);
/**
 * SECURITY NOTE:
 * This route is under anti-bot protection via rate limiting and/or PerimeterX. If you deprecate or
 * migrate this route, or modify the path name for this route, notify the #security channel. Also update
 * the file https://github.com/webflow/webflow-proxy/blob/dev/etc/perimeterx-enabled-routes.txt
 * Failing to do the above can result in a security incident
 */ const GQL_QUERY_PATH = '/.wf_graphql/usys/apollo';
const userSystemsRequestClient = (0, _apolloClient.createApolloClient)({
    path: GQL_QUERY_PATH,
    useCsrf: true,
    retryConfig: {
        maxAttempts: 5
    }
});
function addHiddenClass(el) {
    if (el) {
        el.classList.add('w-hidden');
    }
}
function removeHiddenClass(el) {
    if (el) {
        el.classList.remove('w-hidden');
    }
}
function showElement(el) {
    if (el) {
        el.style.display = 'block';
    }
}
function showAndFocusElement(el) {
    if (el) {
        el.style.display = 'block';
        el.focus();
    }
}
function hideElement(el) {
    if (el) {
        el.style.display = 'none';
    }
}
function getDomParser() {
    const domParser = new window.DOMParser();
    return {
        /**
     * Returns an html node for an encoded string
     * @param {string} str - Encoded string to parse
     */ getHtmlFromString (str) {
            const decodedString = decodeURIComponent(str);
            const parsedHtml = domParser.parseFromString(decodedString, 'text/html');
            if (!parsedHtml || !parsedHtml.body || !parsedHtml.body.firstChild) return null;
            return parsedHtml.body.firstChild;
        }
    };
}
const getErrorAttrName = (errorAttr, errorCode)=>{
    const formattedErrorCode = errorCode.replace('_', '-').toLowerCase();
    return `${errorAttr}-${formattedErrorCode}-error`;
};
const handleErrorNode = (errorMsgNode, errorStateNode, errorCode, errorAttrPrefix, defaultErrorCopy)=>{
    // get the error copy from the data attribute
    const errorAttr = getErrorAttrName(errorAttrPrefix, errorCode);
    const errorCopy = errorMsgNode && errorMsgNode.getAttribute(errorAttr);
    // announce the contents of the div to ATs
    errorMsgNode.setAttribute('aria-live', 'assertive');
    // set the message text to the error message or default copy if it is null
    errorMsgNode.textContent = errorCopy ? errorCopy : defaultErrorCopy;
    // show the error state Element
    showElement(errorStateNode);
};
function disableSubmit(submit) {
    if (!submit) return '';
    // Disable submit
    submit.setAttribute('disabled', 'true');
    // Store previous value
    const value = submit.getAttribute('value');
    // Show wait text
    const waitText = submit.getAttribute('data-wait');
    if (waitText) submit.setAttribute('value', waitText);
    return value ?? '';
}
function resetSubmit(submit, text) {
    if (!submit) return;
    // Reenable submit
    submit.removeAttribute('disabled');
    // Reset text
    submit.setAttribute('value', text);
}
function getRedirectPath() {
    const queryString = window.location.search;
    const redirectParam = queryString.match(/[?|&]usredir=([^@&?=]+)/g);
    if (!redirectParam) return undefined;
    const encodedPath = redirectParam[0].substring('?usredir='.length);
    return decodeURIComponent(encodedPath);
}
function redirectWithUsrdir(location) {
    const redirectParam = getRedirectPath();
    let encodedPath;
    if (redirectParam) {
        // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
        encodedPath = redirectParam[0].substring('?usredir='.length);
    } else {
        encodedPath = encodeURIComponent(window.location.pathname);
    }
    // @ts-expect-error - TS2322 - Type 'string' is not assignable to type 'Location | (string & Location)'.
    window.location = location + `?usredir=${encodedPath}`;
}
// Test if path has a /, ., or @ at the beginning. If so, remove it.
function normalizedRedirectPath(path) {
    // @ts-expect-error - TS2345 - Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
    const hasLeadingSymbol = /\/|\.|\@/g.test(path[0]);
    return hasLeadingSymbol ? path.substring(1) : path;
}
function handleRedirect(defaultRedirectPath, includeDelay = false) {
    const redirectPath = getRedirectPath();
    const redirectUrl = (()=>{
        if (redirectPath) {
            return `${window.location.origin}/${normalizedRedirectPath(redirectPath)}`;
        }
        if (defaultRedirectPath) {
            return `${window.location.origin}/${normalizedRedirectPath(defaultRedirectPath)}`;
        }
        return;
    })();
    if (!redirectUrl) return;
    return includeDelay ? setTimeout(()=>window.Webflow.location(redirectUrl), 3000) : window.Webflow.location(redirectUrl);
}
const wrapperSelectors = [
    '.w-file-upload-error'
];
const setErrorMsg = (// @ts-expect-error - TS7006 - Parameter 'wrapper' implicitly has an 'any' type.
wrapper, // @ts-expect-error - TS7006 - Parameter 'fieldElements' implicitly has an 'any' type.
fieldElements, name)=>{
    for(let i = 0; i < fieldElements.length; ++i){
        const errorText = fieldElements[i].getAttribute(name);
        if (errorText) {
            fieldElements[i].innerHTML = errorText;
            removeHiddenClass(wrapper);
            return true;
        }
    }
};
const handleValidationErrors = (form, failedValidations)=>{
    const wrappers = [];
    wrapperSelectors.forEach((wrapperSelector)=>{
        const _wrappers = form.querySelectorAll(wrapperSelector);
        for(let i = 0; i < _wrappers.length; ++i){
            wrappers.push(_wrappers[i]);
        }
    });
    wrappers.forEach((wrapper)=>{
        for(let i = 0; i < failedValidations.length; ++i){
            const failedValidation = failedValidations[i];
            // @ts-expect-error - TS18048 - 'failedValidation' is possibly 'undefined'.
            const name = failedValidation.name;
            // @ts-expect-error - TS18048 - 'failedValidation' is possibly 'undefined'.
            const fieldId = failedValidation.fieldId;
            const fieldElements = wrapper.querySelectorAll('[' + _constants.USYS_DATA_ATTRS.field + '="' + fieldId + '"]');
            if (fieldElements && setErrorMsg(wrapper, fieldElements, name)) {
                break;
            }
        }
    });
};
// error handling
const defaultErrorCopy = // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
_constants.signUpErrorStates[_constants.SIGNUP_UI_ERROR_CODES.GENERAL_ERROR].copy;
const userFormError = (form, errorState, formType)=>(error)=>{
        if (errorState === null || form === null) return;
        const errorMsgNode = errorState.querySelector(`.${_constants.ERROR_MSG_CLASS}`);
        const failedValidations = error.graphQLErrors?.[0]?.failedValidations;
        if (failedValidations) {
            handleValidationErrors(form, failedValidations);
        }
        // if there isn't an error code, send an empty string so a generic error message appears
        const elementErrorCode = error?.graphQLErrors?.[0]?.code ?? '';
        const errorCode = getSignupErrorCode(elementErrorCode);
        handleErrorNode(errorMsgNode, errorState, errorCode, _constants.ERROR_ATTRIBUTE_PREFIX[formType], defaultErrorCopy);
    };
const getSignupErrorCode = (error)=>{
    let errorCode;
    switch(error){
        case 'UsysInvalidUserData':
            errorCode = _constants.SIGNUP_UI_ERROR_CODES.VALIDATION_FAILED;
            break;
        case 'UsysUnauthorizedEmail':
            errorCode = _constants.SIGNUP_UI_ERROR_CODES.NOT_ALLOWED;
            break;
        case 'UsysMustUseInvitation':
            errorCode = _constants.SIGNUP_UI_ERROR_CODES.USE_INVITE_EMAIL;
            break;
        case 'UsysDuplicateEmail':
            errorCode = _constants.SIGNUP_UI_ERROR_CODES.EMAIL_ALREADY_EXIST;
            break;
        case 'UsysInvalidEmail':
            errorCode = _constants.SIGNUP_UI_ERROR_CODES.INVALID_EMAIL;
            break;
        case 'UsysInvalidPassword':
            errorCode = _constants.SIGNUP_UI_ERROR_CODES.INVALID_PASSWORD;
            break;
        case 'UsysInvalidToken':
            errorCode = _constants.SIGNUP_UI_ERROR_CODES.NOT_VERIFIED;
            break;
        case 'UsysExpiredToken':
            errorCode = _constants.SIGNUP_UI_ERROR_CODES.EXPIRED_TOKEN;
            break;
        default:
            errorCode = _constants.SIGNUP_UI_ERROR_CODES.GENERAL_ERROR;
    }
    return errorCode;
};

//# sourceMappingURL=data:application/json;base64,

}),
62467: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    appendUserInputClasses: function() {
        return appendUserInputClasses;
    },
    getTempUserFileKey: function() {
        return getTempUserFileKey;
    },
    getUserFileKey: function() {
        return getUserFileKey;
    },
    parseWfUsysVariant: function() {
        return parseWfUsysVariant;
    },
    removeTempUserFileKey: function() {
        return removeTempUserFileKey;
    },
    setTempUserFileKey: function() {
        return setTempUserFileKey;
    },
    setUserFileKey: function() {
        return setUserFileKey;
    },
    uploadFileToS3: function() {
        return uploadFileToS3;
    }
});
const _constants = __webpack_require__(7462);
const appendUserInputClasses = (node, classes)=>{
    const updatedClasses = classes.push('w-input');
    if (node.getIn([
        'data',
        'attr',
        'disabled'
    ])) {
        return updatedClasses.push('w-input-disabled');
    }
    return updatedClasses;
};
const parseWfUsysVariant = (wfUsysVariant)=>{
    if (!wfUsysVariant) return [];
    let results = [];
    for (const wfUsysVariantKey of wfUsysVariant.split(',')){
        if (// @ts-expect-error - TS2345 - Argument of type 'string' is not assignable to parameter of type '"LOGGED_IN" | "ADMIN_ALWAYS_VISIBLE"'.
        _constants.USER_ACCESS_META_OPTIONS.includes(wfUsysVariantKey) && // @ts-expect-error - TS2345 - Argument of type 'string' is not assignable to parameter of type '"LOGGED_IN" | "ADMIN_ALWAYS_VISIBLE"'.
        !results.includes(wfUsysVariantKey)) {
            results.push(wfUsysVariantKey);
        } else {
            // This is the error case
            console.error(`UnexpectedWfUsysVariant: Renderer received unexpected wf-usys-variant`);
            results = [];
            break;
        }
    }
    return results;
};
function uploadFileToS3(url, fields, file) {
    return new Promise((resolve, reject)=>{
        const formData = new FormData();
        Object.entries(fields).forEach(([key, value])=>{
            formData.append(key, value);
        });
        formData.append('file', file);
        fetch(url, {
            method: 'POST',
            body: formData
        }).then((response)=>{
            if (response.ok) {
                // @ts-expect-error - TS2794 - Expected 1 arguments, but got 0. Did you forget to include 'void' in your type argument to 'Promise'?
                resolve();
            } else {
                return response.text();
            }
        }).then((text)=>{
            reject(text);
        });
    });
}
const getUserFileKey = (element)=>{
    return element.getAttribute(_constants.USYS_DATA_ATTRS.fileUploadKey);
};
const setUserFileKey = (element, value)=>{
    element.setAttribute(_constants.USYS_DATA_ATTRS.fileUploadKey, value);
};
const getTempUserFileKey = (element)=>{
    return element.getAttribute(_constants.USYS_DATA_ATTRS.unsavedFileUploadKey);
};
const setTempUserFileKey = (element, value)=>{
    element.setAttribute(_constants.USYS_DATA_ATTRS.unsavedFileUploadKey, value);
};
const removeTempUserFileKey = (element)=>{
    element.removeAttribute(_constants.USYS_DATA_ATTRS.unsavedFileUploadKey);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtBYnN0cmFjdE5vZGVUeXBlfSBmcm9tICdAcGFja2FnZXMvc3lzdGVtcy9jb3JlL0Fic3RyYWN0Tm9kZSc7XG5pbXBvcnQgdHlwZSB7Q2xhc3Nlc0xpc3R9IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL3dmZGwnO1xuXG5pbXBvcnQge1xuICB0eXBlIFVzZXJBY2Nlc3NNZXRhLFxuICB0eXBlIFVzZXJBY2Vzc01ldGFPcHRpb24sXG4gIFVTRVJfQUNDRVNTX01FVEFfT1BUSU9OUyxcbiAgVVNZU19EQVRBX0FUVFJTLFxufSBmcm9tICdAcGFja2FnZXMvc3lzdGVtcy91c2Vycy9jb25zdGFudHMnO1xuXG5leHBvcnQgY29uc3QgYXBwZW5kVXNlcklucHV0Q2xhc3NlcyA9IChcbiAgbm9kZTogQWJzdHJhY3ROb2RlVHlwZSxcbiAgY2xhc3NlczogQ2xhc3Nlc0xpc3RcbikgPT4ge1xuICBjb25zdCB1cGRhdGVkQ2xhc3NlcyA9IGNsYXNzZXMucHVzaCgndy1pbnB1dCcpO1xuICBpZiAobm9kZS5nZXRJbihbJ2RhdGEnLCAnYXR0cicsICdkaXNhYmxlZCddKSkge1xuICAgIHJldHVybiB1cGRhdGVkQ2xhc3Nlcy5wdXNoKCd3LWlucHV0LWRpc2FibGVkJyk7XG4gIH1cbiAgcmV0dXJuIHVwZGF0ZWRDbGFzc2VzO1xufTtcblxuZXhwb3J0IGNvbnN0IHBhcnNlV2ZVc3lzVmFyaWFudCA9ICh3ZlVzeXNWYXJpYW50Pzogc3RyaW5nKTogVXNlckFjY2Vzc01ldGEgPT4ge1xuICBpZiAoIXdmVXN5c1ZhcmlhbnQpIHJldHVybiBbXTtcblxuICBsZXQgcmVzdWx0czogQXJyYXk8VXNlckFjZXNzTWV0YU9wdGlvbj4gPSBbXTtcblxuICBmb3IgKGNvbnN0IHdmVXN5c1ZhcmlhbnRLZXkgb2Ygd2ZVc3lzVmFyaWFudC5zcGxpdCgnLCcpKSB7XG4gICAgaWYgKFxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTMjM0NSAtIEFyZ3VtZW50IG9mIHR5cGUgJ3N0cmluZycgaXMgbm90IGFzc2lnbmFibGUgdG8gcGFyYW1ldGVyIG9mIHR5cGUgJ1wiTE9HR0VEX0lOXCIgfCBcIkFETUlOX0FMV0FZU19WSVNJQkxFXCInLlxuICAgICAgVVNFUl9BQ0NFU1NfTUVUQV9PUFRJT05TLmluY2x1ZGVzKHdmVXN5c1ZhcmlhbnRLZXkpICYmXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVFMyMzQ1IC0gQXJndW1lbnQgb2YgdHlwZSAnc3RyaW5nJyBpcyBub3QgYXNzaWduYWJsZSB0byBwYXJhbWV0ZXIgb2YgdHlwZSAnXCJMT0dHRURfSU5cIiB8IFwiQURNSU5fQUxXQVlTX1ZJU0lCTEVcIicuXG4gICAgICAhcmVzdWx0cy5pbmNsdWRlcyh3ZlVzeXNWYXJpYW50S2V5KVxuICAgICkge1xuICAgICAgcmVzdWx0cy5wdXNoKHdmVXN5c1ZhcmlhbnRLZXkgYXMgVXNlckFjZXNzTWV0YU9wdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoaXMgaXMgdGhlIGVycm9yIGNhc2VcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIGBVbmV4cGVjdGVkV2ZVc3lzVmFyaWFudDogUmVuZGVyZXIgcmVjZWl2ZWQgdW5leHBlY3RlZCB3Zi11c3lzLXZhcmlhbnRgXG4gICAgICApO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdXBsb2FkRmlsZVRvUzMoXG4gIHVybDogc3RyaW5nLFxuICBmaWVsZHM6IGFueSxcbiAgZmlsZTogRmlsZVxuKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShcbiAgICAoXG4gICAgICByZXNvbHZlOiAocmVzdWx0OiBQcm9taXNlPHVuZGVmaW5lZD4gfCB1bmRlZmluZWQpID0+IHZvaWQsXG4gICAgICByZWplY3Q6IChlcnJvcj86IGFueSkgPT4gdm9pZFxuICAgICkgPT4ge1xuICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgIE9iamVjdC5lbnRyaWVzKGZpZWxkcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdOiBbYW55LCBhbnldKSA9PiB7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgIH0pO1xuXG4gICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlKTtcbiAgICAgIGZldGNoKHVybCwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogZm9ybURhdGEsXG4gICAgICB9KVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzI3OTQgLSBFeHBlY3RlZCAxIGFyZ3VtZW50cywgYnV0IGdvdCAwLiBEaWQgeW91IGZvcmdldCB0byBpbmNsdWRlICd2b2lkJyBpbiB5b3VyIHR5cGUgYXJndW1lbnQgdG8gJ1Byb21pc2UnP1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKHRleHQpID0+IHtcbiAgICAgICAgICByZWplY3QodGV4dCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgKTtcbn1cblxuZXhwb3J0IGNvbnN0IGdldFVzZXJGaWxlS2V5ID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiB7XG4gIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShVU1lTX0RBVEFfQVRUUlMuZmlsZVVwbG9hZEtleSk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0VXNlckZpbGVLZXkgPSAoZWxlbWVudDogRWxlbWVudCwgdmFsdWU6IHN0cmluZykgPT4ge1xuICBlbGVtZW50LnNldEF0dHJpYnV0ZShVU1lTX0RBVEFfQVRUUlMuZmlsZVVwbG9hZEtleSwgdmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFRlbXBVc2VyRmlsZUtleSA9IChlbGVtZW50OiBIVE1MRWxlbWVudCkgPT4ge1xuICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoVVNZU19EQVRBX0FUVFJTLnVuc2F2ZWRGaWxlVXBsb2FkS2V5KTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRUZW1wVXNlckZpbGVLZXkgPSAoZWxlbWVudDogSFRNTEVsZW1lbnQsIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoVVNZU19EQVRBX0FUVFJTLnVuc2F2ZWRGaWxlVXBsb2FkS2V5LCB2YWx1ZSk7XG59O1xuXG5leHBvcnQgY29uc3QgcmVtb3ZlVGVtcFVzZXJGaWxlS2V5ID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiB7XG4gIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFVTWVNfREFUQV9BVFRSUy51bnNhdmVkRmlsZVVwbG9hZEtleSk7XG59O1xuIl0sIm5hbWVzIjpbImFwcGVuZFVzZXJJbnB1dENsYXNzZXMiLCJnZXRUZW1wVXNlckZpbGVLZXkiLCJnZXRVc2VyRmlsZUtleSIsInBhcnNlV2ZVc3lzVmFyaWFudCIsInJlbW92ZVRlbXBVc2VyRmlsZUtleSIsInNldFRlbXBVc2VyRmlsZUtleSIsInNldFVzZXJGaWxlS2V5IiwidXBsb2FkRmlsZVRvUzMiLCJub2RlIiwiY2xhc3NlcyIsInVwZGF0ZWRDbGFzc2VzIiwicHVzaCIsImdldEluIiwid2ZVc3lzVmFyaWFudCIsInJlc3VsdHMiLCJ3ZlVzeXNWYXJpYW50S2V5Iiwic3BsaXQiLCJVU0VSX0FDQ0VTU19NRVRBX09QVElPTlMiLCJpbmNsdWRlcyIsImNvbnNvbGUiLCJlcnJvciIsInVybCIsImZpZWxkcyIsImZpbGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJPYmplY3QiLCJlbnRyaWVzIiwiZm9yRWFjaCIsImtleSIsInZhbHVlIiwiYXBwZW5kIiwiZmV0Y2giLCJtZXRob2QiLCJib2R5IiwidGhlbiIsInJlc3BvbnNlIiwib2siLCJ0ZXh0IiwiZWxlbWVudCIsImdldEF0dHJpYnV0ZSIsIlVTWVNfREFUQV9BVFRSUyIsImZpbGVVcGxvYWRLZXkiLCJzZXRBdHRyaWJ1dGUiLCJ1bnNhdmVkRmlsZVVwbG9hZEtleSIsInJlbW92ZUF0dHJpYnV0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFVYUEsc0JBQXNCO2VBQXRCQTs7SUFnRkFDLGtCQUFrQjtlQUFsQkE7O0lBUkFDLGNBQWM7ZUFBZEE7O0lBN0RBQyxrQkFBa0I7ZUFBbEJBOztJQTZFQUMscUJBQXFCO2VBQXJCQTs7SUFKQUMsa0JBQWtCO2VBQWxCQTs7SUFSQUMsY0FBYztlQUFkQTs7SUF2Q0dDLGNBQWM7ZUFBZEE7OzsyQkF2Q1Q7QUFFQSxNQUFNUCx5QkFBeUIsQ0FDcENRLE1BQ0FDO0lBRUEsTUFBTUMsaUJBQWlCRCxRQUFRRSxJQUFJLENBQUM7SUFDcEMsSUFBSUgsS0FBS0ksS0FBSyxDQUFDO1FBQUM7UUFBUTtRQUFRO0tBQVcsR0FBRztRQUM1QyxPQUFPRixlQUFlQyxJQUFJLENBQUM7SUFDN0I7SUFDQSxPQUFPRDtBQUNUO0FBRU8sTUFBTVAscUJBQXFCLENBQUNVO0lBQ2pDLElBQUksQ0FBQ0EsZUFBZSxPQUFPLEVBQUU7SUFFN0IsSUFBSUMsVUFBc0MsRUFBRTtJQUU1QyxLQUFLLE1BQU1DLG9CQUFvQkYsY0FBY0csS0FBSyxDQUFDLEtBQU07UUFDdkQsSUFDRSx1SUFBdUk7UUFDdklDLG1DQUF3QixDQUFDQyxRQUFRLENBQUNILHFCQUNsQyx1SUFBdUk7UUFDdkksQ0FBQ0QsUUFBUUksUUFBUSxDQUFDSCxtQkFDbEI7WUFDQUQsUUFBUUgsSUFBSSxDQUFDSTtRQUNmLE9BQU87WUFDTCx5QkFBeUI7WUFDekJJLFFBQVFDLEtBQUssQ0FDWCxDQUFDLHFFQUFxRSxDQUFDO1lBRXpFTixVQUFVLEVBQUU7WUFDWjtRQUNGO0lBQ0Y7SUFFQSxPQUFPQTtBQUNUO0FBRU8sU0FBU1AsZUFDZGMsR0FBVyxFQUNYQyxNQUFXLEVBQ1hDLElBQVU7SUFFVixPQUFPLElBQUlDLFFBQ1QsQ0FDRUMsU0FDQUM7UUFFQSxNQUFNQyxXQUFXLElBQUlDO1FBQ3JCQyxPQUFPQyxPQUFPLENBQUNSLFFBQVFTLE9BQU8sQ0FBQyxDQUFDLENBQUNDLEtBQUtDLE1BQWtCO1lBQ3RETixTQUFTTyxNQUFNLENBQUNGLEtBQUtDO1FBQ3ZCO1FBRUFOLFNBQVNPLE1BQU0sQ0FBQyxRQUFRWDtRQUN4QlksTUFBTWQsS0FBSztZQUNUZSxRQUFRO1lBQ1JDLE1BQU1WO1FBQ1IsR0FDR1csSUFBSSxDQUFDLENBQUNDO1lBQ0wsSUFBSUEsU0FBU0MsRUFBRSxFQUFFO2dCQUNmLG9JQUFvSTtnQkFDcElmO1lBQ0YsT0FBTztnQkFDTCxPQUFPYyxTQUFTRSxJQUFJO1lBQ3RCO1FBQ0YsR0FDQ0gsSUFBSSxDQUFDLENBQUNHO1lBQ0xmLE9BQU9lO1FBQ1Q7SUFDSjtBQUVKO0FBRU8sTUFBTXZDLGlCQUFpQixDQUFDd0M7SUFDN0IsT0FBT0EsUUFBUUMsWUFBWSxDQUFDQywwQkFBZSxDQUFDQyxhQUFhO0FBQzNEO0FBRU8sTUFBTXZDLGlCQUFpQixDQUFDb0MsU0FBa0JUO0lBQy9DUyxRQUFRSSxZQUFZLENBQUNGLDBCQUFlLENBQUNDLGFBQWEsRUFBRVo7QUFDdEQ7QUFFTyxNQUFNaEMscUJBQXFCLENBQUN5QztJQUNqQyxPQUFPQSxRQUFRQyxZQUFZLENBQUNDLDBCQUFlLENBQUNHLG9CQUFvQjtBQUNsRTtBQUVPLE1BQU0xQyxxQkFBcUIsQ0FBQ3FDLFNBQXNCVDtJQUN2RFMsUUFBUUksWUFBWSxDQUFDRiwwQkFBZSxDQUFDRyxvQkFBb0IsRUFBRWQ7QUFDN0Q7QUFFTyxNQUFNN0Isd0JBQXdCLENBQUNzQztJQUNwQ0EsUUFBUU0sZUFBZSxDQUFDSiwwQkFBZSxDQUFDRyxvQkFBb0I7QUFDOUQifQ==

}),
99866: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    buildApolloClientUri: function() {
        return buildApolloClientUri;
    },
    createApolloClient: function() {
        return createApolloClient;
    }
});
const _client = __webpack_require__(12522);
const _batchhttp = __webpack_require__(8012);
const _error = __webpack_require__(25064);
const _fetchWithCsrf = __webpack_require__(22393);
const _helpers = __webpack_require__(21650);
const createApolloClient = ({ origin = '', path, publicationId, previewKey, ssrMode = false, credentials = 'same-origin', headers = {}, useCsrf = false, retryConfig, onError, disableBatching = false, customLinks = [] })=>{
    const uri = buildApolloClientUri({
        origin,
        path,
        publicationId,
        previewKey
    });
    const requestHeaders = {
        Accept: 'application/json'
    };
    Object.keys(headers).forEach((headerKey)=>{
        // @ts-expect-error - TS2322 - Type 'string | undefined' is not assignable to type 'string'.
        requestHeaders[headerKey] = headers[headerKey];
    });
    const batchLinkArgs = {
        uri,
        headers: requestHeaders,
        credentials
    };
    // Disable batching
    if (disableBatching) {
        batchLinkArgs.batchMax = 1;
        batchLinkArgs.batchInterval = 0;
    }
    // Fetch using a CSRF token if toggled
    if (useCsrf) {
        batchLinkArgs.fetch = _fetchWithCsrf.fetchWithCsrf;
    }
    const batchLink = new _batchhttp.BatchHttpLink(batchLinkArgs);
    const links = [];
    if (retryConfig) {
        links.push((0, _helpers.createRetryLink)(retryConfig));
    }
    if (onError) {
        links.push((0, _error.onError)(onError));
    }
    const apolloClient = new _client.ApolloClient({
        link: _client.ApolloLink.from([
            ...customLinks,
            ...links,
            batchLink
        ]),
        cache: new _client.InMemoryCache({
            dataIdFromObject: (object)=>{
                switch(object.__typename){
                    case 'sku_props':
                        return undefined;
                    case 'commerce_subscription':
                        {
                            return object._id;
                        }
                    case 'collections':
                        // `collections` does not have an ID, so we must
                        // use a hard-coded string so that Apollo cache
                        // can merge the `collections` objects together.
                        return object.__typename;
                    case 'CMSNamespace':
                        // `CMSNamespace` does not have an ID, so we must
                        // use a hard-coded string so that Apollo cache
                        // can merge the `CMSNamespace` objects together.
                        return object.__typename;
                    default:
                        {
                            if (object.cmsLocaleId) {
                                return `${object.id}_${object.cmsLocaleId}`;
                            }
                            return object.id;
                        }
                }
            }
        }),
        ssrMode
    });
    return apolloClient;
};
const buildApolloClientUri = ({ origin = '', path, publicationId, previewKey })=>{
    const params = [];
    if (publicationId) {
        params.push(`pub=${publicationId}`);
    }
    if (previewKey) {
        params.push(`preview=${previewKey}`);
    }
    // Replace multiple slashes with single slashes
    const cleanPath = `${origin}${path}`.replace(/([^:])\/\/+/g, '$1/');
    return `${cleanPath}${params.length ? `?${params.join('&')}` : ''}`;
};

//# sourceMappingURL=data:application/json;base64,

}),
22393: (function (__unused_webpack_module, exports) {
"use strict";
/* globals
  window,
  document,
  */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    fetchWithCsrf: function() {
        return fetchWithCsrf;
    },
    getLocalCsrfCookie: function() {
        return getLocalCsrfCookie;
    }
});
const WF_CSRF_COOKIE_REGEX = '(^|;)\\s*wf-csrf\\s*=\\s*([^;]+)';
const WF_CSRF_URI = '/.wf_graphql/csrf';
let hasFetchedCsrfCookie = false;
function fetchWithCsrf(uri, options) {
    if (window.Webflow.env('design') || window.Webflow.env('preview')) {
        return fetch(uri, options);
    }
    const localCsrvCookie = getLocalCsrfCookie();
    const requestHeaders = options?.headers || {};
    return new Promise((resolve, reject)=>{
        if (hasFetchedCsrfCookie && localCsrvCookie) {
            requestHeaders['X-Wf-Csrf'] = localCsrvCookie;
            resolve(fetch(uri, {
                ...options,
                headers: requestHeaders
            }));
        } else {
            fetch(WF_CSRF_URI, {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            }).then(()=>{
                const newWfCsrfCookie = getLocalCsrfCookie();
                if (newWfCsrfCookie) {
                    hasFetchedCsrfCookie = true;
                    requestHeaders['X-Wf-Csrf'] = newWfCsrfCookie;
                    resolve(fetch(uri, {
                        ...options,
                        headers: requestHeaders
                    }));
                } else {
                    reject(new Error('Did not receive CSRF token'));
                }
            }).catch((err)=>reject(err));
        }
    });
}
function getLocalCsrfCookie() {
    const wfCsrfCookieArray = document.cookie.match(WF_CSRF_COOKIE_REGEX);
    return wfCsrfCookieArray ? wfCsrfCookieArray.pop() : null;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZldGNoV2l0aENzcmYudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsc1xuICB3aW5kb3csXG4gIGRvY3VtZW50LFxuICAqL1xuXG5jb25zdCBXRl9DU1JGX0NPT0tJRV9SRUdFWCA9ICcoXnw7KVxcXFxzKndmLWNzcmZcXFxccyo9XFxcXHMqKFteO10rKSc7XG5jb25zdCBXRl9DU1JGX1VSSSA9ICcvLndmX2dyYXBocWwvY3NyZic7XG5cbmxldCBoYXNGZXRjaGVkQ3NyZkNvb2tpZSA9IGZhbHNlO1xuXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2hXaXRoQ3NyZihcbiAgdXJpOiBzdHJpbmcsXG4gIG9wdGlvbnM/OiBSZXF1ZXN0SW5pdCAmIHtcbiAgICAvLyBPdmVycmlkZSBgaGVhZGVyczogSGVhZGVyc0luaXRgIHdpdGggYSBzaW1wbGVyIHR5cGU6XG4gICAgaGVhZGVycz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG4gIH1cbik6IFByb21pc2U8UmVzcG9uc2U+IHtcbiAgaWYgKHdpbmRvdy5XZWJmbG93LmVudignZGVzaWduJykgfHwgd2luZG93LldlYmZsb3cuZW52KCdwcmV2aWV3JykpIHtcbiAgICByZXR1cm4gZmV0Y2godXJpLCBvcHRpb25zKTtcbiAgfVxuXG4gIGNvbnN0IGxvY2FsQ3NydkNvb2tpZSA9IGdldExvY2FsQ3NyZkNvb2tpZSgpO1xuICBjb25zdCByZXF1ZXN0SGVhZGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IG9wdGlvbnM/LmhlYWRlcnMgfHwge307XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKFxuICAgIChcbiAgICAgIHJlc29sdmU6IChyZXN1bHQ6IFByb21pc2U8UmVzcG9uc2U+IHwgUmVzcG9uc2UpID0+IHZvaWQsXG4gICAgICByZWplY3Q6IChlcnJvcj86IGFueSkgPT4gdm9pZFxuICAgICkgPT4ge1xuICAgICAgaWYgKGhhc0ZldGNoZWRDc3JmQ29va2llICYmIGxvY2FsQ3NydkNvb2tpZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1snWC1XZi1Dc3JmJ10gPSBsb2NhbENzcnZDb29raWU7XG4gICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgZmV0Y2godXJpLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogcmVxdWVzdEhlYWRlcnMsXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZldGNoKFdGX0NTUkZfVVJJLCB7XG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJyxcbiAgICAgICAgICBoZWFkZXJzOiB7J1gtUmVxdWVzdGVkLVdpdGgnOiAnWE1MSHR0cFJlcXVlc3QnfSxcbiAgICAgICAgfSlcbiAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdXZkNzcmZDb29raWUgPSBnZXRMb2NhbENzcmZDb29raWUoKTtcbiAgICAgICAgICAgIGlmIChuZXdXZkNzcmZDb29raWUpIHtcbiAgICAgICAgICAgICAgaGFzRmV0Y2hlZENzcmZDb29raWUgPSB0cnVlO1xuICAgICAgICAgICAgICByZXF1ZXN0SGVhZGVyc1snWC1XZi1Dc3JmJ10gPSBuZXdXZkNzcmZDb29raWU7XG4gICAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgICAgZmV0Y2godXJpLCB7XG4gICAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgaGVhZGVyczogcmVxdWVzdEhlYWRlcnMsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0RpZCBub3QgcmVjZWl2ZSBDU1JGIHRva2VuJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKChlcnIpID0+IHJlamVjdChlcnIpKTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbENzcmZDb29raWUoKSB7XG4gIGNvbnN0IHdmQ3NyZkNvb2tpZUFycmF5ID0gZG9jdW1lbnQuY29va2llLm1hdGNoKFdGX0NTUkZfQ09PS0lFX1JFR0VYKTtcbiAgcmV0dXJuIHdmQ3NyZkNvb2tpZUFycmF5ID8gd2ZDc3JmQ29va2llQXJyYXkucG9wKCkgOiBudWxsO1xufVxuIl0sIm5hbWVzIjpbImZldGNoV2l0aENzcmYiLCJnZXRMb2NhbENzcmZDb29raWUiLCJXRl9DU1JGX0NPT0tJRV9SRUdFWCIsIldGX0NTUkZfVVJJIiwiaGFzRmV0Y2hlZENzcmZDb29raWUiLCJ1cmkiLCJvcHRpb25zIiwid2luZG93IiwiV2ViZmxvdyIsImVudiIsImZldGNoIiwibG9jYWxDc3J2Q29va2llIiwicmVxdWVzdEhlYWRlcnMiLCJoZWFkZXJzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJtZXRob2QiLCJjcmVkZW50aWFscyIsInRoZW4iLCJuZXdXZkNzcmZDb29raWUiLCJFcnJvciIsImNhdGNoIiwiZXJyIiwid2ZDc3JmQ29va2llQXJyYXkiLCJkb2N1bWVudCIsImNvb2tpZSIsIm1hdGNoIiwicG9wIl0sIm1hcHBpbmdzIjoiQUFBQTs7O0VBR0U7Ozs7Ozs7Ozs7O0lBT2NBLGFBQWE7ZUFBYkE7O0lBc0RBQyxrQkFBa0I7ZUFBbEJBOzs7QUEzRGhCLE1BQU1DLHVCQUF1QjtBQUM3QixNQUFNQyxjQUFjO0FBRXBCLElBQUlDLHVCQUF1QjtBQUVwQixTQUFTSixjQUNkSyxHQUFXLEVBQ1hDLE9BR0M7SUFFRCxJQUFJQyxPQUFPQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxhQUFhRixPQUFPQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxZQUFZO1FBQ2pFLE9BQU9DLE1BQU1MLEtBQUtDO0lBQ3BCO0lBRUEsTUFBTUssa0JBQWtCVjtJQUN4QixNQUFNVyxpQkFBeUNOLFNBQVNPLFdBQVcsQ0FBQztJQUVwRSxPQUFPLElBQUlDLFFBQ1QsQ0FDRUMsU0FDQUM7UUFFQSxJQUFJWix3QkFBd0JPLGlCQUFpQjtZQUMzQ0MsY0FBYyxDQUFDLFlBQVksR0FBR0Q7WUFDOUJJLFFBQ0VMLE1BQU1MLEtBQUs7Z0JBQ1QsR0FBR0MsT0FBTztnQkFDVk8sU0FBU0Q7WUFDWDtRQUVKLE9BQU87WUFDTEYsTUFBTVAsYUFBYTtnQkFDakJjLFFBQVE7Z0JBQ1JDLGFBQWE7Z0JBQ2JMLFNBQVM7b0JBQUMsb0JBQW9CO2dCQUFnQjtZQUNoRCxHQUNHTSxJQUFJLENBQUM7Z0JBQ0osTUFBTUMsa0JBQWtCbkI7Z0JBQ3hCLElBQUltQixpQkFBaUI7b0JBQ25CaEIsdUJBQXVCO29CQUN2QlEsY0FBYyxDQUFDLFlBQVksR0FBR1E7b0JBQzlCTCxRQUNFTCxNQUFNTCxLQUFLO3dCQUNULEdBQUdDLE9BQU87d0JBQ1ZPLFNBQVNEO29CQUNYO2dCQUVKLE9BQU87b0JBQ0xJLE9BQU8sSUFBSUssTUFBTTtnQkFDbkI7WUFDRixHQUNDQyxLQUFLLENBQUMsQ0FBQ0MsTUFBUVAsT0FBT087UUFDM0I7SUFDRjtBQUVKO0FBRU8sU0FBU3RCO0lBQ2QsTUFBTXVCLG9CQUFvQkMsU0FBU0MsTUFBTSxDQUFDQyxLQUFLLENBQUN6QjtJQUNoRCxPQUFPc0Isb0JBQW9CQSxrQkFBa0JJLEdBQUcsS0FBSztBQUN2RCJ9

}),
21650: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createRetryLink: function() {
        return createRetryLink;
    },
    waitForInFlightQueries: function() {
        return waitForInFlightQueries;
    }
});
const _retry = __webpack_require__(65822);
const ERROR_METRIC_NAME = 'webflow.renderer.apollo.request.error';
const waitForInFlightQueries = (apolloClient)=>{
    // @ts-expect-error - Property 'queryManager' is private and only accessible within class 'ApolloClient<TCacheShape>'
    if (!apolloClient || !apolloClient.queryManager) {
        return Promise.resolve(null);
    }
    const { // @ts-expect-error - Property 'queryManager' is private and only accessible within class 'ApolloClient<TCacheShape>'
    queryManager: { queries } } = apolloClient;
    const promises = Array.from(queries.values()).reduce(// @ts-expect-error - TS2345 - Argument of type '(memo: any[], { observableQuery }: { observableQuery: any; }) => any[]' is not assignable to parameter of type '(previousValue: any[], currentValue: unknown, currentIndex: number, array: unknown[]) => any[]'.
    (memo, { observableQuery })=>{
        const loading = observableQuery && observableQuery.getCurrentResult().loading || false;
        return loading ? memo.concat(observableQuery.result()) : memo;
    }, []);
    // @ts-expect-error - TS2769 - No overload matches this call.
    return Promise.all(promises).then(()=>null);
};
const createRetryLink = ({ maxAttempts = 1, retryOnCorsErrors = true, retriedServerErrors = 'all', metricsLogger })=>{
    return new _retry.RetryLink({
        attempts: (count, operation, error)=>{
            const tags = [];
            let ret = false;
            if (count >= maxAttempts) {
                tags.push('max_attempts:true');
            } else {
                tags.push('max_attempts:false');
                if (error && (retriedServerErrors === 'all' && error.statusCode >= 500 || retriedServerErrors === 'bad-gateway' && error.statusCode === 502)) {
                    // if the request fails, let's try it again because it was probably
                    // a temporary issue.
                    tags.push('reason:server_error');
                    tags.push(`status_code:${error.statusCode}`);
                    ret = true;
                } else if (retryOnCorsErrors && error && error.result && error.result.code === 'BadCrossOriginRequest') {
                    // if CORS fails, it means we used a stale token so we can try it again
                    // with the correct one
                    tags.push('reason:cors_error');
                    ret = true;
                }
            }
            tags.push(`attempt:${count}`, `retry:${ret}`);
            metricsLogger?.logDistributionMetric(ERROR_METRIC_NAME, 1, ...tags);
            return ret;
        },
        delay: (count)=>{
            // delay in ms
            return count * 500 + Math.random() * 500;
        }
    });
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSZXRyeUxpbmt9IGZyb20gJ0BhcG9sbG8vY2xpZW50L2xpbmsvcmV0cnknO1xuaW1wb3J0IHtBcG9sbG9NZXRyaWNzTG9nZ2VyfSBmcm9tICcuL2Fwb2xsb01ldHJpY3NMb2dnZXInO1xuaW1wb3J0IHtBcG9sbG9DbGllbnRTdGF0ZVR5cGV9IGZyb20gJ0BwYWNrYWdlcy9zeXN0ZW1zL2Rlc2lnbmVyL2Fwb2xsby1jbGllbnQnO1xuXG5jb25zdCBFUlJPUl9NRVRSSUNfTkFNRSA9ICd3ZWJmbG93LnJlbmRlcmVyLmFwb2xsby5yZXF1ZXN0LmVycm9yJztcblxuZXhwb3J0IGNvbnN0IHdhaXRGb3JJbkZsaWdodFF1ZXJpZXMgPSAoXG4gIGFwb2xsb0NsaWVudDogQXBvbGxvQ2xpZW50U3RhdGVUeXBlXG4pOiBQcm9taXNlPG51bGw+ID0+IHtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFByb3BlcnR5ICdxdWVyeU1hbmFnZXInIGlzIHByaXZhdGUgYW5kIG9ubHkgYWNjZXNzaWJsZSB3aXRoaW4gY2xhc3MgJ0Fwb2xsb0NsaWVudDxUQ2FjaGVTaGFwZT4nXG4gIGlmICghYXBvbGxvQ2xpZW50IHx8ICFhcG9sbG9DbGllbnQucXVlcnlNYW5hZ2VyKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgfVxuXG4gIGNvbnN0IHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gUHJvcGVydHkgJ3F1ZXJ5TWFuYWdlcicgaXMgcHJpdmF0ZSBhbmQgb25seSBhY2Nlc3NpYmxlIHdpdGhpbiBjbGFzcyAnQXBvbGxvQ2xpZW50PFRDYWNoZVNoYXBlPidcbiAgICBxdWVyeU1hbmFnZXI6IHtxdWVyaWVzfSxcbiAgfSA9IGFwb2xsb0NsaWVudDtcblxuICBjb25zdCBwcm9taXNlcyA9IEFycmF5LmZyb20ocXVlcmllcy52YWx1ZXMoKSkucmVkdWNlPEFycmF5PGFueT4+KFxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBUUzIzNDUgLSBBcmd1bWVudCBvZiB0eXBlICcobWVtbzogYW55W10sIHsgb2JzZXJ2YWJsZVF1ZXJ5IH06IHsgb2JzZXJ2YWJsZVF1ZXJ5OiBhbnk7IH0pID0+IGFueVtdJyBpcyBub3QgYXNzaWduYWJsZSB0byBwYXJhbWV0ZXIgb2YgdHlwZSAnKHByZXZpb3VzVmFsdWU6IGFueVtdLCBjdXJyZW50VmFsdWU6IHVua25vd24sIGN1cnJlbnRJbmRleDogbnVtYmVyLCBhcnJheTogdW5rbm93bltdKSA9PiBhbnlbXScuXG4gICAgKG1lbW8sIHtvYnNlcnZhYmxlUXVlcnl9KSA9PiB7XG4gICAgICBjb25zdCBsb2FkaW5nID1cbiAgICAgICAgKG9ic2VydmFibGVRdWVyeSAmJiBvYnNlcnZhYmxlUXVlcnkuZ2V0Q3VycmVudFJlc3VsdCgpLmxvYWRpbmcpIHx8XG4gICAgICAgIGZhbHNlO1xuICAgICAgcmV0dXJuIGxvYWRpbmcgPyBtZW1vLmNvbmNhdChvYnNlcnZhYmxlUXVlcnkucmVzdWx0KCkpIDogbWVtbztcbiAgICB9LFxuICAgIFtdXG4gICk7XG5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFRTMjc2OSAtIE5vIG92ZXJsb2FkIG1hdGNoZXMgdGhpcyBjYWxsLlxuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oKCkgPT4gbnVsbCk7XG59O1xuXG5leHBvcnQgdHlwZSBSZXRyeUxpbmtDb25maWcgPSB7XG4gIG1heEF0dGVtcHRzPzogbnVtYmVyO1xuICByZXRyeU9uQ29yc0Vycm9ycz86IGJvb2xlYW47XG4gIHJldHJpZWRTZXJ2ZXJFcnJvcnM/OiAnYmFkLWdhdGV3YXknIHwgJ2FsbCc7XG4gIG1ldHJpY3NMb2dnZXI/OiBBcG9sbG9NZXRyaWNzTG9nZ2VyO1xufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVJldHJ5TGluayA9ICh7XG4gIG1heEF0dGVtcHRzID0gMSxcbiAgcmV0cnlPbkNvcnNFcnJvcnMgPSB0cnVlLFxuICByZXRyaWVkU2VydmVyRXJyb3JzID0gJ2FsbCcsXG4gIG1ldHJpY3NMb2dnZXIsXG59OiBSZXRyeUxpbmtDb25maWcpOiBSZXRyeUxpbmsgPT4ge1xuICByZXR1cm4gbmV3IFJldHJ5TGluayh7XG4gICAgYXR0ZW1wdHM6IChjb3VudCwgb3BlcmF0aW9uLCBlcnJvcikgPT4ge1xuICAgICAgY29uc3QgdGFncyA9IFtdO1xuICAgICAgbGV0IHJldCA9IGZhbHNlO1xuICAgICAgaWYgKGNvdW50ID49IG1heEF0dGVtcHRzKSB7XG4gICAgICAgIHRhZ3MucHVzaCgnbWF4X2F0dGVtcHRzOnRydWUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhZ3MucHVzaCgnbWF4X2F0dGVtcHRzOmZhbHNlJyk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBlcnJvciAmJlxuICAgICAgICAgICgocmV0cmllZFNlcnZlckVycm9ycyA9PT0gJ2FsbCcgJiYgZXJyb3Iuc3RhdHVzQ29kZSA+PSA1MDApIHx8XG4gICAgICAgICAgICAocmV0cmllZFNlcnZlckVycm9ycyA9PT0gJ2JhZC1nYXRld2F5JyAmJiBlcnJvci5zdGF0dXNDb2RlID09PSA1MDIpKVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBpZiB0aGUgcmVxdWVzdCBmYWlscywgbGV0J3MgdHJ5IGl0IGFnYWluIGJlY2F1c2UgaXQgd2FzIHByb2JhYmx5XG4gICAgICAgICAgLy8gYSB0ZW1wb3JhcnkgaXNzdWUuXG4gICAgICAgICAgdGFncy5wdXNoKCdyZWFzb246c2VydmVyX2Vycm9yJyk7XG4gICAgICAgICAgdGFncy5wdXNoKGBzdGF0dXNfY29kZToke2Vycm9yLnN0YXR1c0NvZGV9YCk7XG4gICAgICAgICAgcmV0ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICByZXRyeU9uQ29yc0Vycm9ycyAmJlxuICAgICAgICAgIGVycm9yICYmXG4gICAgICAgICAgZXJyb3IucmVzdWx0ICYmXG4gICAgICAgICAgZXJyb3IucmVzdWx0LmNvZGUgPT09ICdCYWRDcm9zc09yaWdpblJlcXVlc3QnXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIGlmIENPUlMgZmFpbHMsIGl0IG1lYW5zIHdlIHVzZWQgYSBzdGFsZSB0b2tlbiBzbyB3ZSBjYW4gdHJ5IGl0IGFnYWluXG4gICAgICAgICAgLy8gd2l0aCB0aGUgY29ycmVjdCBvbmVcbiAgICAgICAgICB0YWdzLnB1c2goJ3JlYXNvbjpjb3JzX2Vycm9yJyk7XG4gICAgICAgICAgcmV0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0YWdzLnB1c2goYGF0dGVtcHQ6JHtjb3VudH1gLCBgcmV0cnk6JHtyZXR9YCk7XG4gICAgICBtZXRyaWNzTG9nZ2VyPy5sb2dEaXN0cmlidXRpb25NZXRyaWMoRVJST1JfTUVUUklDX05BTUUsIDEsIC4uLnRhZ3MpO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9LFxuICAgIGRlbGF5OiAoY291bnQpID0+IHtcbiAgICAgIC8vIGRlbGF5IGluIG1zXG4gICAgICByZXR1cm4gY291bnQgKiA1MDAgKyBNYXRoLnJhbmRvbSgpICogNTAwO1xuICAgIH0sXG4gIH0pO1xufTtcbiJdLCJuYW1lcyI6WyJjcmVhdGVSZXRyeUxpbmsiLCJ3YWl0Rm9ySW5GbGlnaHRRdWVyaWVzIiwiRVJST1JfTUVUUklDX05BTUUiLCJhcG9sbG9DbGllbnQiLCJxdWVyeU1hbmFnZXIiLCJQcm9taXNlIiwicmVzb2x2ZSIsInF1ZXJpZXMiLCJwcm9taXNlcyIsIkFycmF5IiwiZnJvbSIsInZhbHVlcyIsInJlZHVjZSIsIm1lbW8iLCJvYnNlcnZhYmxlUXVlcnkiLCJsb2FkaW5nIiwiZ2V0Q3VycmVudFJlc3VsdCIsImNvbmNhdCIsInJlc3VsdCIsImFsbCIsInRoZW4iLCJtYXhBdHRlbXB0cyIsInJldHJ5T25Db3JzRXJyb3JzIiwicmV0cmllZFNlcnZlckVycm9ycyIsIm1ldHJpY3NMb2dnZXIiLCJSZXRyeUxpbmsiLCJhdHRlbXB0cyIsImNvdW50Iiwib3BlcmF0aW9uIiwiZXJyb3IiLCJ0YWdzIiwicmV0IiwicHVzaCIsInN0YXR1c0NvZGUiLCJjb2RlIiwibG9nRGlzdHJpYnV0aW9uTWV0cmljIiwiZGVsYXkiLCJNYXRoIiwicmFuZG9tIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQXlDYUEsZUFBZTtlQUFmQTs7SUFuQ0FDLHNCQUFzQjtlQUF0QkE7Ozt1QkFOVztBQUl4QixNQUFNQyxvQkFBb0I7QUFFbkIsTUFBTUQseUJBQXlCLENBQ3BDRTtJQUVBLHFIQUFxSDtJQUNySCxJQUFJLENBQUNBLGdCQUFnQixDQUFDQSxhQUFhQyxZQUFZLEVBQUU7UUFDL0MsT0FBT0MsUUFBUUMsT0FBTyxDQUFDO0lBQ3pCO0lBRUEsTUFBTSxFQUNKLHFIQUFxSDtJQUNySEYsY0FBYyxFQUFDRyxPQUFPLEVBQUMsRUFDeEIsR0FBR0o7SUFFSixNQUFNSyxXQUFXQyxNQUFNQyxJQUFJLENBQUNILFFBQVFJLE1BQU0sSUFBSUMsTUFBTSxDQUNsRCxpUUFBaVE7SUFDalEsQ0FBQ0MsTUFBTSxFQUFDQyxlQUFlLEVBQUM7UUFDdEIsTUFBTUMsVUFDSixBQUFDRCxtQkFBbUJBLGdCQUFnQkUsZ0JBQWdCLEdBQUdELE9BQU8sSUFDOUQ7UUFDRixPQUFPQSxVQUFVRixLQUFLSSxNQUFNLENBQUNILGdCQUFnQkksTUFBTSxNQUFNTDtJQUMzRCxHQUNBLEVBQUU7SUFHSiw2REFBNkQ7SUFDN0QsT0FBT1IsUUFBUWMsR0FBRyxDQUFDWCxVQUFVWSxJQUFJLENBQUMsSUFBTTtBQUMxQztBQVNPLE1BQU1wQixrQkFBa0IsQ0FBQyxFQUM5QnFCLGNBQWMsQ0FBQyxFQUNmQyxvQkFBb0IsSUFBSSxFQUN4QkMsc0JBQXNCLEtBQUssRUFDM0JDLGFBQWEsRUFDRztJQUNoQixPQUFPLElBQUlDLGdCQUFTLENBQUM7UUFDbkJDLFVBQVUsQ0FBQ0MsT0FBT0MsV0FBV0M7WUFDM0IsTUFBTUMsT0FBTyxFQUFFO1lBQ2YsSUFBSUMsTUFBTTtZQUNWLElBQUlKLFNBQVNOLGFBQWE7Z0JBQ3hCUyxLQUFLRSxJQUFJLENBQUM7WUFDWixPQUFPO2dCQUNMRixLQUFLRSxJQUFJLENBQUM7Z0JBQ1YsSUFDRUgsU0FDQyxDQUFBLEFBQUNOLHdCQUF3QixTQUFTTSxNQUFNSSxVQUFVLElBQUksT0FDcERWLHdCQUF3QixpQkFBaUJNLE1BQU1JLFVBQVUsS0FBSyxHQUFHLEdBQ3BFO29CQUNBLG1FQUFtRTtvQkFDbkUscUJBQXFCO29CQUNyQkgsS0FBS0UsSUFBSSxDQUFDO29CQUNWRixLQUFLRSxJQUFJLENBQUMsQ0FBQyxZQUFZLEVBQUVILE1BQU1JLFVBQVUsQ0FBQyxDQUFDO29CQUMzQ0YsTUFBTTtnQkFDUixPQUFPLElBQ0xULHFCQUNBTyxTQUNBQSxNQUFNWCxNQUFNLElBQ1pXLE1BQU1YLE1BQU0sQ0FBQ2dCLElBQUksS0FBSyx5QkFDdEI7b0JBQ0EsdUVBQXVFO29CQUN2RSx1QkFBdUI7b0JBQ3ZCSixLQUFLRSxJQUFJLENBQUM7b0JBQ1ZELE1BQU07Z0JBQ1I7WUFDRjtZQUVBRCxLQUFLRSxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUVMLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFSSxJQUFJLENBQUM7WUFDNUNQLGVBQWVXLHNCQUFzQmpDLG1CQUFtQixNQUFNNEI7WUFDOUQsT0FBT0M7UUFDVDtRQUNBSyxPQUFPLENBQUNUO1lBQ04sY0FBYztZQUNkLE9BQU9BLFFBQVEsTUFBTVUsS0FBS0MsTUFBTSxLQUFLO1FBQ3ZDO0lBQ0Y7QUFDRiJ9

}),
25195: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createApolloClient: function() {
        return _createApolloClient.createApolloClient;
    },
    waitForInFlightQueries: function() {
        return _helpers.waitForInFlightQueries;
    }
});
const _createApolloClient = __webpack_require__(99866);
const _helpers = __webpack_require__(21650);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7Y3JlYXRlQXBvbGxvQ2xpZW50fSBmcm9tICcuL2NyZWF0ZUFwb2xsb0NsaWVudCc7XG5leHBvcnQge3R5cGUgQXBvbGxvTWV0cmljc0xvZ2dlcn0gZnJvbSAnLi9hcG9sbG9NZXRyaWNzTG9nZ2VyJztcbmV4cG9ydCB7d2FpdEZvckluRmxpZ2h0UXVlcmllc30gZnJvbSAnLi9oZWxwZXJzJztcbiJdLCJuYW1lcyI6WyJjcmVhdGVBcG9sbG9DbGllbnQiLCJ3YWl0Rm9ySW5GbGlnaHRRdWVyaWVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQUFRQSxrQkFBa0I7ZUFBbEJBLHNDQUFrQjs7SUFFbEJDLHNCQUFzQjtlQUF0QkEsK0JBQXNCOzs7b0NBRkc7eUJBRUkifQ==

}),
51522: (function (__unused_webpack_module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    None: function() {
        return None;
    },
    Some: function() {
        return Some;
    },
    fromNullable: function() {
        return fromNullable;
    },
    maybe: function() {
        return maybe;
    },
    of: function() {
        return of;
    }
});
const { create } = Object;
const returnThis = function() {
    return this;
};
const VALUE = Symbol();
const FOLD = Symbol();
const None = create({
    map: returnThis,
    chain: returnThis,
    alt: (alternativeOption)=>alternativeOption,
    ap: returnThis,
    concat: (other)=>other,
    /**
   * Returns a default fallback value if the `Option` is a `None`.
   */ [FOLD]: (fallback)=>fallback
});
const Some = (value)=>{
    const object = create(SomePrototype);
    object[VALUE] = value;
    return object;
};
const SomePrototype = {
    /**
   * Transform the value inside of a `Option` by applying a unary function to it.
   */ map (f) {
        return Some(f(this[VALUE]));
    },
    /**
   * Sequence computations by applying a function to the value
   * contained in the `Option`. The function must return an `Option`.
   */ chain (f) {
        return f(this[VALUE]);
    },
    /**
   * Provide an alternative option that will be returned if this option is None.
   */ alt: returnThis,
    /**
   * Allows you to apply the Option's value with another Option's value,
   * returning another Option.
   */ ap (m) {
        return m.map(this[VALUE]);
    },
    concat (other) {
        return other[FOLD](this, (otherValue)=>Some(this[VALUE].concat(otherValue)));
    },
    /**
   * Applies a function to the value contained in an `Option`
   * if the `Option` is a `Some`.
   */ [FOLD] (fallback, mapValue) {
        return mapValue(this[VALUE]);
    }
};
const fromNullable = (value)=>value == null ? None : Some(value);
const maybe = (fallback)=>(mapValue)=>(option)=>option[FOLD](fallback, mapValue);
const of = Some;

//# sourceMappingURL=data:application/json;base64,

}),
16387: (function (__unused_webpack_module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Err: function() {
        return Err;
    },
    Ok: function() {
        return Ok;
    },
    either: function() {
        return either;
    },
    of: function() {
        return of;
    }
});
const { create } = Object;
const returnThis = function() {
    return this;
};
const VALUE = Symbol();
const ERROR = Symbol();
const FOLD = Symbol();
const Err = (error)=>{
    const object = create(ErrPrototype);
    object[ERROR] = error;
    return object;
};
const Ok = (value)=>{
    const object = create(OkPrototype);
    object[VALUE] = value;
    return object;
};
const ErrPrototype = {
    map: returnThis,
    chain: returnThis,
    ap: returnThis,
    [FOLD]: function(errorHandler, _) {
        return errorHandler(this[ERROR]);
    }
};
const OkPrototype = {
    map (f) {
        return Ok(f(this[VALUE]));
    },
    chain (f) {
        return f(this[VALUE]);
    },
    ap (m) {
        return m.map(this[VALUE]);
    },
    [FOLD]: function(errorHandler, valueHandler) {
        return valueHandler(this[VALUE]);
    }
};
const either = (mapErr)=>(mapVal)=>(result)=>result[FOLD](mapErr, mapVal);
const of = Ok;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtjcmVhdGV9ID0gT2JqZWN0O1xuXG5jb25zdCByZXR1cm5UaGlzID0gZnVuY3Rpb24gPFQ+KHRoaXM6IFQpOiBUIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5jb25zdCBWQUxVRTogdW5pcXVlIHN5bWJvbCA9IFN5bWJvbCgpO1xuY29uc3QgRVJST1I6IHVuaXF1ZSBzeW1ib2wgPSBTeW1ib2woKTtcbmNvbnN0IEZPTEQ6IHVuaXF1ZSBzeW1ib2wgPSBTeW1ib2woKTtcblxuLy8gIyBSZXN1bHRcbi8vXG4vLyBSZXN1bHQgaXMgYSBkYXRhIHR5cGUgZm9yIHJlcHJlc2VudGluZyByZXN1bHRzIGZyb20gY29tcHV0YXRpb25zIHRoYXQgbWF5XG4vLyBmYWlsIGJ5IGdpdmluZyB0aGUgdXNlciBhIGNvbnRyb2xsYWJsZSB3YXkgdG8gcHJvcGFnYXRlIGVycm9ycy4gYFJlc3VsdGAgaXNcbi8vIGFsc28ga25vd24gYXMgYEVpdGhlcmAgaW4gb3RoZXIgbGFuZ3VhZ2VzIGFuZCBsaWJyYXJpZXMuXG4vL1xuLy8gYGBganNcbi8vIGltcG9ydCB7RXJyLCBPa30gZnJvbSAnQHBhY2thZ2VzL3V0aWxpdGllcy9mcC9yZXN1bHQnXG4vL1xuLy8gY29uc3Qgc2FmZURpdmlkZSA9IChhLCBiKSA9PiBiID09PSAwXG4vLyAgID8gRXJyKCdDYW5ub3QgZGl2aWRlIGJ5IDAuJylcbi8vICAgOiBPayhhIC8gYilcbi8vIGBgYFxuLy9cbi8vIE5vdGljZSBpbiB0aGUgdXNhZ2UgZXhhbXBsZSBhYm92ZSBob3cgaW4gdGhlIGNhc2Ugb2YgYSBmYWlsdXJlIHRoZSBlcnJvclxuLy8gbWVzc2FnZSBpcyB3cmFwcGVkIGluIGBFcnJgIHdoaWxlIG90aGVyd2lzZSB0aGUgcmVzdWx0IGlzIHJldHVybmVkIHdyYXBwZWRcbi8vIGluIGBPa2AuIGBFcnJgIGFuZCBgT2tgIGFyZSB0aGUgY29uc3RydWN0b3JzIGZvciB0aGUgYFJlc3VsdGAgdHlwZS5cbi8vXG4vLyBDb25zdW1pbmcgYSB2YWx1ZSBvZiB0aGlzIHR5cGUgaW52b2x2ZXMgc29tZWhvdyDigJxlbmhhbmNpbmfigJ0gYSByZWd1bGFyXG4vLyBmdW5jdGlvbiB0byB3b3JrIG9uIHZhbHVlcyBvZiB0eXBlIGBSZXN1bHRgLiBUaGlzIGlzIGRvbmUgYnkgYXBwbHlpbmdcbi8vIHRoZSBmYW1pbGlhciBgbWFwYCBmdW5jdGlvbiB0byBvdXIgb3JpZ2luYWwgZnVuY3Rpb246XG4vL1xuLy8gYGBganNcbi8vIGltcG9ydCB7bWFwfSBmcm9tICdAcGFja2FnZXMvdXRpbGl0aWVzL2ZwL3V0aWxzJ1xuLy9cbi8vIGNvbnN0IG9yaWdpbmFsRG91YmxlID0gYSA9PiBhICsgYVxuLy8gY29uc3QgZG91YmxlID0gbWFwKG9yaWdpbmFsRG91YmxlKVxuLy8gYGBgXG4vL1xuLy8gVGhpcyBgZG91YmxlYCBmdW5jdGlvbiBjYW4gbm93IHNhZmVseSBiZSBhcHBsaWVkIHRvIGEgYFJlc3VsdGAgdmFsdWU6XG4vL1xuLy8gYGBganNcbi8vIGNvbnN0IHJlc3VsdDEgPSBkb3VibGUoc2FmZURpdmlkZSg2LCAyKSkgLy8gPT4gT2soMylcbi8vIGNvbnN0IHJlc3VsdDIgPSBkb3VibGUoc2FmZURpdmlkZSg2LCAwKSkgLy8gPT4gRXJyKCdDYW5ub3QgZGl2aWRlIGJ5IDAuJylcbi8vIGBgYFxuLy9cbi8vIE5vdGljZSBob3cgb3VyIGBkb3VibGVgIGZ1bmN0aW9uIHdvcmtzIGp1c3QgZmluZSwgZXZlbiBpZiB0aGUgcmVzdWx0IG9mIHRoZVxuLy8gZGl2aXNpb24gaXMgYW4gZXJyb3IsIGJ5IHBhc3NpbmcgdGhhdCBlcnJvciBhbG9uZy4gSW4gY2FzZXMgd2hlcmUgd2Ugb25seVxuLy8gY2FyZSBhYm91dCB0aGUgc3VjY2Vzc2Z1bCByZXN1bHQgdGhpcyBpcyBhbGwgd2UgbmVlZCB0byBkby4gV2hlbiB3ZSBuZWVkIHRvXG4vLyB0YWtlIHRoZSB2YWx1ZSBvdXQgb2YgdGhlIGBSZXN1bHRgIGJveCB3ZSBjYW4gbWFrZSB1c2Ugb2YgYGVpdGhlcmA6XG4vL1xuLy8gYGBganNcbi8vIGNvbnN0IG51bWJlcjEgPSBlaXRoZXIoZXJyb3IgPT4gMCkodmFsID0+IHZhbCkocmVzdWx0MSkgLy8gPT4gM1xuLy8gY29uc3QgbnVtYmVyMiA9IGVpdGhlcihlcnJvciA9PiAwKSh2YWwgPT4gdmFsKShyZXN1bHQyKSAvLyA9PiAwXG4vLyBgYGBcbi8vXG4vLyBUaGUgYGVpdGhlcmAgZnVuY3Rpb24gdGFrZXMgdGhyZWUgYXJndW1lbnRzLCBhIGZ1bmN0aW9uIGZvciBoYW5kbGluZyB0aGUgRXJyXG4vLyBjYXNlLCBhIGZ1bmN0aW9uIGZvciBoYW5kbGluZyB0aGUgT2sgY2FzZSBhbmQgdGhlIHJlc3VsdC4gQm90aCBoYW5kbGVyc1xuLy8gc2hvdWxkIHJldHVybiB2YWx1ZXMgb2YgdGhlIHNhbWUgdHlwZS5cblxuZXhwb3J0IGludGVyZmFjZSBSZXN1bHQ8RSwgQT4ge1xuICAvKipcbiAgICogVHJhbnNmb3JtIHRoZSB2YWx1ZSBpbnNpZGUgb2YgYSBgUmVzdWx0YCBieSBhcHBseWluZyBhIHVuYXJ5IGZ1bmN0aW9uIHRvIGl0LlxuICAgKi9cbiAgbWFwOiA8Qj4oZjogKHg6IEEpID0+IEIpID0+IFJlc3VsdDxFLCBCPjtcbiAgLyoqXG4gICAqIFNlcXVlbmNlIGNvbXB1dGF0aW9ucyB0aGF0IG1heSBmYWlsIGJ5IGFwcGx5aW5nIGEgZnVuY3Rpb24gdG8gdGhlIHZhbHVlXG4gICAqIGNvbnRhaW5lZCBpbiB0aGUgYFJlc3VsdGAsIHdoZXJlIHRoZSBmdW5jdGlvbiBhbHNvIHJldHVybnMgYSBgUmVzdWx0YC5cbiAgICovXG4gIGNoYWluOiA8Qj4oZjogKHg6IEEpID0+IFJlc3VsdDxFLCBCPikgPT4gUmVzdWx0PEUsIEI+O1xuICAvKipcbiAgICogQWxsb3dzIHlvdSB0byBhcHBseSB0aGUgUmVzdWx0J3MgdmFsdWUgd2l0aCBhbm90aGVyIFJlc3VsdCdzIHZhbHVlLFxuICAgKiByZXR1cm5pbmcgYW5vdGhlciBSZXN1bHQuXG4gICAqL1xuICBhcDogPEIsIEM+KHRoaXM6IFJlc3VsdDxFLCAoeDogQikgPT4gQz4sIHg6IFJlc3VsdDxFLCBCPikgPT4gUmVzdWx0PEUsIEM+O1xuICBbRk9MRF06IDxCPihlcnI6IChlOiBFKSA9PiBCLCBvazogKGE6IEEpID0+IEIpID0+IEI7XG59XG5cbnR5cGUgRXJyVDxFLCBBPiA9IFJlc3VsdDxFLCBBPiAmIHtbRVJST1JdOiBFfTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBjb25zdCBFcnIgPSA8RT4oZXJyb3I6IEUpOiBSZXN1bHQ8RSwgYW55PiA9PiB7XG4gIGNvbnN0IG9iamVjdCA9IGNyZWF0ZShFcnJQcm90b3R5cGUpO1xuICBvYmplY3RbRVJST1JdID0gZXJyb3I7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG50eXBlIE9rVDxFLCBBPiA9IFJlc3VsdDxFLCBBPiAmIHtbVkFMVUVdOiBBfTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBjb25zdCBPayA9IDxBPih2YWx1ZTogQSk6IFJlc3VsdDxhbnksIEE+ID0+IHtcbiAgY29uc3Qgb2JqZWN0ID0gY3JlYXRlKE9rUHJvdG90eXBlKTtcbiAgb2JqZWN0W1ZBTFVFXSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcblxuY29uc3QgRXJyUHJvdG90eXBlID0ge1xuICBtYXA6IHJldHVyblRoaXMsXG4gIGNoYWluOiByZXR1cm5UaGlzLFxuICBhcDogcmV0dXJuVGhpcyxcbiAgW0ZPTERdOiBmdW5jdGlvbiA8RSwgQSwgQj4oXG4gICAgdGhpczogRXJyVDxFLCBBPixcbiAgICBlcnJvckhhbmRsZXI6IChlOiBFKSA9PiBCLFxuICAgIF86IChhOiBBKSA9PiBCXG4gICkge1xuICAgIHJldHVybiBlcnJvckhhbmRsZXIodGhpc1tFUlJPUl0pO1xuICB9LFxufTtcblxuY29uc3QgT2tQcm90b3R5cGUgPSB7XG4gIG1hcDxFLCBBLCBCPih0aGlzOiBPa1Q8RSwgQT4sIGY6ICh4OiBBKSA9PiBCKTogUmVzdWx0PEUsIEI+IHtcbiAgICByZXR1cm4gT2soZih0aGlzW1ZBTFVFXSkpO1xuICB9LFxuXG4gIGNoYWluPEUsIEEsIEI+KHRoaXM6IE9rVDxFLCBBPiwgZjogKHg6IEEpID0+IFJlc3VsdDxFLCBCPik6IFJlc3VsdDxFLCBCPiB7XG4gICAgcmV0dXJuIGYodGhpc1tWQUxVRV0pO1xuICB9LFxuXG4gIGFwPEUsIEEsIEI+KHRoaXM6IE9rVDxFLCAoeDogQSkgPT4gQj4sIG06IFJlc3VsdDxFLCBBPik6IFJlc3VsdDxFLCBCPiB7XG4gICAgcmV0dXJuIG0ubWFwKHRoaXNbVkFMVUVdKTtcbiAgfSxcblxuICBbRk9MRF06IGZ1bmN0aW9uIDxFLCBBLCBCPihcbiAgICB0aGlzOiBPa1Q8RSwgQT4sXG4gICAgZXJyb3JIYW5kbGVyOiAoZTogRSkgPT4gQixcbiAgICB2YWx1ZUhhbmRsZXI6IChhOiBBKSA9PiBCXG4gICkge1xuICAgIHJldHVybiB2YWx1ZUhhbmRsZXIodGhpc1tWQUxVRV0pO1xuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IGVpdGhlciA9XG4gIDxFLCBCPihtYXBFcnI6IChlOiBFKSA9PiBCKSA9PlxuICA8QT4obWFwVmFsOiAoYTogQSkgPT4gQikgPT5cbiAgKHJlc3VsdDogUmVzdWx0PEUsIEE+KSA9PlxuICAgIHJlc3VsdFtGT0xEXShtYXBFcnIsIG1hcFZhbCk7XG5cbmV4cG9ydCBjb25zdCBvZiA9IE9rO1xuIl0sIm5hbWVzIjpbIkVyciIsIk9rIiwiZWl0aGVyIiwib2YiLCJjcmVhdGUiLCJPYmplY3QiLCJyZXR1cm5UaGlzIiwiVkFMVUUiLCJTeW1ib2wiLCJFUlJPUiIsIkZPTEQiLCJlcnJvciIsIm9iamVjdCIsIkVyclByb3RvdHlwZSIsInZhbHVlIiwiT2tQcm90b3R5cGUiLCJtYXAiLCJjaGFpbiIsImFwIiwiZXJyb3JIYW5kbGVyIiwiXyIsImYiLCJtIiwidmFsdWVIYW5kbGVyIiwibWFwRXJyIiwibWFwVmFsIiwicmVzdWx0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQWlGYUEsR0FBRztlQUFIQTs7SUFTQUMsRUFBRTtlQUFGQTs7SUF5Q0FDLE1BQU07ZUFBTkE7O0lBTUFDLEVBQUU7ZUFBRkE7OztBQXpJYixNQUFNLEVBQUNDLE1BQU0sRUFBQyxHQUFHQztBQUVqQixNQUFNQyxhQUFhO0lBQ2pCLE9BQU8sSUFBSTtBQUNiO0FBRUEsTUFBTUMsUUFBdUJDO0FBQzdCLE1BQU1DLFFBQXVCRDtBQUM3QixNQUFNRSxPQUFzQkY7QUF5RXJCLE1BQU1SLE1BQU0sQ0FBSVc7SUFDckIsTUFBTUMsU0FBU1IsT0FBT1M7SUFDdEJELE1BQU0sQ0FBQ0gsTUFBTSxHQUFHRTtJQUNoQixPQUFPQztBQUNUO0FBS08sTUFBTVgsS0FBSyxDQUFJYTtJQUNwQixNQUFNRixTQUFTUixPQUFPVztJQUN0QkgsTUFBTSxDQUFDTCxNQUFNLEdBQUdPO0lBQ2hCLE9BQU9GO0FBQ1Q7QUFFQSxNQUFNQyxlQUFlO0lBQ25CRyxLQUFLVjtJQUNMVyxPQUFPWDtJQUNQWSxJQUFJWjtJQUNKLENBQUNJLEtBQUssRUFBRSxTQUVOUyxZQUF5QixFQUN6QkMsQ0FBYztRQUVkLE9BQU9ELGFBQWEsSUFBSSxDQUFDVixNQUFNO0lBQ2pDO0FBQ0Y7QUFFQSxNQUFNTSxjQUFjO0lBQ2xCQyxLQUE4QkssQ0FBYztRQUMxQyxPQUFPcEIsR0FBR29CLEVBQUUsSUFBSSxDQUFDZCxNQUFNO0lBQ3pCO0lBRUFVLE9BQWdDSSxDQUF5QjtRQUN2RCxPQUFPQSxFQUFFLElBQUksQ0FBQ2QsTUFBTTtJQUN0QjtJQUVBVyxJQUF1Q0ksQ0FBZTtRQUNwRCxPQUFPQSxFQUFFTixHQUFHLENBQUMsSUFBSSxDQUFDVCxNQUFNO0lBQzFCO0lBRUEsQ0FBQ0csS0FBSyxFQUFFLFNBRU5TLFlBQXlCLEVBQ3pCSSxZQUF5QjtRQUV6QixPQUFPQSxhQUFhLElBQUksQ0FBQ2hCLE1BQU07SUFDakM7QUFDRjtBQUVPLE1BQU1MLFNBQ1gsQ0FBT3NCLFNBQ1AsQ0FBSUMsU0FDSixDQUFDQyxTQUNDQSxNQUFNLENBQUNoQixLQUFLLENBQUNjLFFBQVFDO0FBRWxCLE1BQU10QixLQUFLRiJ9

}),
56574: (function (__unused_webpack_module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Const: function() {
        return Const;
    },
    getConst: function() {
        return getConst;
    },
    of: function() {
        return of;
    }
});
const { create } = Object;
const VALUE = Symbol();
const prototype = {
    map () {
        return this;
    }
};
const Const = (value)=>{
    const object = create(prototype);
    object[VALUE] = value;
    return object;
};
const of = Const;
const getConst = (con)=>con[VALUE];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvbnN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtjcmVhdGV9ID0gT2JqZWN0O1xuXG5jb25zdCBWQUxVRTogdW5pcXVlIHN5bWJvbCA9IFN5bWJvbCgpO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbnN0VHlwZTxDLCBBPiB7XG4gIFtWQUxVRV06IEM7XG4gIG1hcDogPEI+KGY6ICh4OiBBKSA9PiBCKSA9PiBDb25zdFR5cGU8QywgQj47XG59XG5cbmNvbnN0IHByb3RvdHlwZSA9IHtcbiAgbWFwKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IENvbnN0ID0gPEMsIEE+KHZhbHVlOiBDKTogQ29uc3RUeXBlPEMsIEE+ID0+IHtcbiAgY29uc3Qgb2JqZWN0ID0gY3JlYXRlKHByb3RvdHlwZSk7XG4gIG9iamVjdFtWQUxVRV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG5cbmV4cG9ydCBjb25zdCBvZiA9IENvbnN0O1xuZXhwb3J0IGNvbnN0IGdldENvbnN0ID0gPEEsIEM+KGNvbjogQ29uc3RUeXBlPEMsIEE+KTogQyA9PiBjb25bVkFMVUVdO1xuIl0sIm5hbWVzIjpbIkNvbnN0IiwiZ2V0Q29uc3QiLCJvZiIsImNyZWF0ZSIsIk9iamVjdCIsIlZBTFVFIiwiU3ltYm9sIiwicHJvdG90eXBlIiwibWFwIiwidmFsdWUiLCJvYmplY3QiLCJjb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBZWFBLEtBQUs7ZUFBTEE7O0lBT0FDLFFBQVE7ZUFBUkE7O0lBREFDLEVBQUU7ZUFBRkE7OztBQXJCYixNQUFNLEVBQUNDLE1BQU0sRUFBQyxHQUFHQztBQUVqQixNQUFNQyxRQUF1QkM7QUFPN0IsTUFBTUMsWUFBWTtJQUNoQkM7UUFDRSxPQUFPLElBQUk7SUFDYjtBQUNGO0FBRU8sTUFBTVIsUUFBUSxDQUFPUztJQUMxQixNQUFNQyxTQUFTUCxPQUFPSTtJQUN0QkcsTUFBTSxDQUFDTCxNQUFNLEdBQUdJO0lBQ2hCLE9BQU9DO0FBQ1Q7QUFFTyxNQUFNUixLQUFLRjtBQUNYLE1BQU1DLFdBQVcsQ0FBT1UsTUFBNEJBLEdBQUcsQ0FBQ04sTUFBTSJ9

}),
64552: (function (__unused_webpack_module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Identity: function() {
        return Identity;
    },
    of: function() {
        return of;
    },
    runIdentity: function() {
        return runIdentity;
    }
});
const { create } = Object;
const VALUE = Symbol();
const prototype = {
    map (f) {
        return Identity(f(this[VALUE]));
    }
};
const Identity = (value)=>{
    const object = create(prototype);
    object[VALUE] = value;
    return object;
};
const of = Identity;
const runIdentity = (object)=>object[VALUE];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIklkZW50aXR5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtjcmVhdGV9ID0gT2JqZWN0O1xuXG5jb25zdCBWQUxVRTogdW5pcXVlIHN5bWJvbCA9IFN5bWJvbCgpO1xuXG5leHBvcnQgaW50ZXJmYWNlIElkZW50aXR5VHlwZTxBPiB7XG4gIFtWQUxVRV06IEE7XG4gIG1hcDogPEI+KGY6ICh4OiBBKSA9PiBCKSA9PiBJZGVudGl0eVR5cGU8Qj47XG59XG5cbmNvbnN0IHByb3RvdHlwZSA9IHtcbiAgbWFwPEEsIEI+KHRoaXM6IElkZW50aXR5VHlwZTxBPiwgZjogKHg6IEEpID0+IEIpIHtcbiAgICByZXR1cm4gSWRlbnRpdHkoZih0aGlzW1ZBTFVFXSkpO1xuICB9LFxufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IElkZW50aXR5ID0gPEE+KHZhbHVlOiBBKTogSWRlbnRpdHlUeXBlPEE+ID0+IHtcbiAgY29uc3Qgb2JqZWN0ID0gY3JlYXRlKHByb3RvdHlwZSk7XG4gIG9iamVjdFtWQUxVRV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG5cbmV4cG9ydCBjb25zdCBvZiA9IElkZW50aXR5O1xuZXhwb3J0IGNvbnN0IHJ1bklkZW50aXR5ID0gPEE+KG9iamVjdDogSWRlbnRpdHlUeXBlPEE+KTogQSA9PiBvYmplY3RbVkFMVUVdO1xuIl0sIm5hbWVzIjpbIklkZW50aXR5Iiwib2YiLCJydW5JZGVudGl0eSIsImNyZWF0ZSIsIk9iamVjdCIsIlZBTFVFIiwiU3ltYm9sIiwicHJvdG90eXBlIiwibWFwIiwiZiIsInZhbHVlIiwib2JqZWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQWVhQSxRQUFRO2VBQVJBOztJQU1BQyxFQUFFO2VBQUZBOztJQUNBQyxXQUFXO2VBQVhBOzs7QUF0QmIsTUFBTSxFQUFDQyxNQUFNLEVBQUMsR0FBR0M7QUFFakIsTUFBTUMsUUFBdUJDO0FBTzdCLE1BQU1DLFlBQVk7SUFDaEJDLEtBQWlDQyxDQUFjO1FBQzdDLE9BQU9ULFNBQVNTLEVBQUUsSUFBSSxDQUFDSixNQUFNO0lBQy9CO0FBQ0Y7QUFFTyxNQUFNTCxXQUFXLENBQUlVO0lBQzFCLE1BQU1DLFNBQVNSLE9BQU9JO0lBQ3RCSSxNQUFNLENBQUNOLE1BQU0sR0FBR0s7SUFDaEIsT0FBT0M7QUFDVDtBQUVPLE1BQU1WLEtBQUtEO0FBQ1gsTUFBTUUsY0FBYyxDQUFJUyxTQUErQkEsTUFBTSxDQUFDTixNQUFNIn0=

}),
1242: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";

Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    add: function() {
        return add;
    },
    adjust: function() {
        return adjust;
    },
    allPass: function() {
        return allPass;
    },
    anyPass: function() {
        return anyPass;
    },
    append: function() {
        return append;
    },
    assoc: function() {
        return assoc;
    },
    blackbird: function() {
        return blackbird;
    },
    both: function() {
        return both;
    },
    complement: function() {
        return complement;
    },
    compose: function() {
        return compose;
    },
    concat: function() {
        return concat;
    },
    concatTo: function() {
        return concatTo;
    },
    constant: function() {
        return constant;
    },
    constantFalse: function() {
        return constantFalse;
    },
    constantIdentity: function() {
        return constantIdentity;
    },
    constantNone: function() {
        return constantNone;
    },
    constantTrue: function() {
        return constantTrue;
    },
    dissoc: function() {
        return dissoc;
    },
    either: function() {
        return either;
    },
    emptyArray: function() {
        return emptyArray;
    },
    emptyObject: function() {
        return emptyObject;
    },
    entries: function() {
        return entries;
    },
    equals: function() {
        return equals;
    },
    errToOption: function() {
        return errToOption;
    },
    extractArray: function() {
        return extractArray;
    },
    extractBool: function() {
        return extractBool;
    },
    extractFunctionFromOption: function() {
        return extractFunctionFromOption;
    },
    extractFunctionFromResult: function() {
        return extractFunctionFromResult;
    },
    filter: function() {
        return filter;
    },
    find: function() {
        return find;
    },
    flat: function() {
        return flat;
    },
    flatMap: function() {
        return flatMap;
    },
    flip: function() {
        return flip;
    },
    getDeepestValues: function() {
        return getDeepestValues;
    },
    has: function() {
        return has;
    },
    head: function() {
        return head;
    },
    identity: function() {
        return identity;
    },
    inc: function() {
        return inc;
    },
    isNil: function() {
        return isNil;
    },
    last: function() {
        return last;
    },
    length: function() {
        return length;
    },
    lens: function() {
        return lens;
    },
    lensProp: function() {
        return lensProp;
    },
    lookup: function() {
        return lookup;
    },
    lookupWithDefault: function() {
        return lookupWithDefault;
    },
    map: function() {
        return map;
    },
    mapArray: function() {
        return mapArray;
    },
    mapValues: function() {
        return mapValues;
    },
    match: function() {
        return match;
    },
    max: function() {
        return max;
    },
    noneToErr: function() {
        return noneToErr;
    },
    not: function() {
        return not;
    },
    notEqual: function() {
        return notEqual;
    },
    notNil: function() {
        return notNil;
    },
    nth: function() {
        return nth;
    },
    objOf: function() {
        return objOf;
    },
    objectKeys: function() {
        return objectKeys;
    },
    okToOption: function() {
        return okToOption;
    },
    omit: function() {
        return omit;
    },
    optionToArray: function() {
        return optionToArray;
    },
    optionToBool: function() {
        return optionToBool;
    },
    over: function() {
        return over;
    },
    parseIntWithRadix: function() {
        return parseIntWithRadix;
    },
    pick: function() {
        return pick;
    },
    pickBy: function() {
        return pickBy;
    },
    pipe: function() {
        return pipe;
    },
    prop: function() {
        return prop;
    },
    reduce: function() {
        return reduce;
    },
    reduceObject: function() {
        return reduceObject;
    },
    replace: function() {
        return replace;
    },
    resultToBool: function() {
        return resultToBool;
    },
    safeParseInt: function() {
        return safeParseInt;
    },
    set: function() {
        return set;
    },
    split: function() {
        return split;
    },
    substitution: function() {
        return substitution;
    },
    tail: function() {
        return tail;
    },
    tap: function() {
        return tap;
    },
    test: function() {
        return test;
    },
    thrush: function() {
        return thrush;
    },
    traverseObjectResults: function() {
        return traverseObjectResults;
    },
    traverseOptions: function() {
        return traverseOptions;
    },
    traverseResults: function() {
        return traverseResults;
    },
    union: function() {
        return union;
    },
    unionTo: function() {
        return unionTo;
    },
    unionWith: function() {
        return unionWith;
    },
    values: function() {
        return values;
    },
    view: function() {
        return view;
    },
    when: function() {
        return when;
    },
    zip: function() {
        return zip;
    },
    zipCat: function() {
        return zipCat;
    },
    zipWith: function() {
        return zipWith;
    }
});
const _Const = __webpack_require__(56574);
const _Identity = __webpack_require__(64552);
const _option = __webpack_require__(51522);
const _result = __webpack_require__(16387);
const objectKeys = Object.keys;
let emptyArray = [];
let emptyObject = {};
if (false) {}
const identity = (x)=>x;
const constant = (x)=>(_)=>x;
const compose = (f)=>(g)=>(x)=>f(g(x));
const blackbird = (f)=>(g)=>(x)=>(y)=>f(g(x)(y));
const flip = (f)=>(x)=>(y)=>f(y)(x);
const thrush = (x)=>(f)=>f(x);
const substitution = (f)=>(g)=>(x)=>f(x)(g(x));
const constantFalse = constant(false);
const constantTrue = constant(true);
const not = (x)=>!x;
const complement = compose(not);
const anyPass = (preds)=>(value)=>preds.some(thrush(value));
const allPass = (preds)=>(value)=>preds.every(thrush(value));
const optionToBool = (0, _option.maybe)(false)(constantTrue);
const resultToBool = (0, _result.either)(constantFalse)(constantTrue);
const equals = (x)=>(y)=>x === y;
const notEqual = (x)=>(y)=>x !== y;
const isNil = (value)=>value == null;
const notNil = complement(isNil);
const either = (predicateA, predicateB)=>(...args)=>predicateA(...args) || predicateB(...args);
const both = (predicateA, predicateB)=>(...args)=>predicateA(...args) && predicateB(...args);
const when = (predicate)=>(whenTrueFn)=>(value)=>predicate(value) ? whenTrueFn(value) : value;
const has = (key)=>(object)=>Object.hasOwn(object, key);
const prop = (key)=>(object)=>object[key];
const assocReducer = (acc, key)=>{
    acc.result[key] = acc.source[key];
    return acc;
};
const assoc = (key)=>{
    const hasKey = has(key);
    return (value)=>(object)=>{
            if (hasKey(object) && object[key] === value) {
                return object;
            }
            const result = objectKeys(object).reduce(assocReducer, {
                source: object,
                result: {}
            }).result;
            result[key] = value;
            return result;
        };
};
const dissocReducer = (acc, key)=>{
    if (acc.exclude !== key) {
        acc.result[key] = acc.source[key];
    }
    return acc;
};
const dissoc = (key)=>{
    const hasKey = has(key);
    return (object)=>hasKey(object) ? objectKeys(object).reduce(dissocReducer, {
            source: object,
            result: {},
            exclude: key
        }).result : object;
};
const adjust = (f)=>(key)=>{
        const hasKey = has(key);
        return (obj)=>hasKey(obj) ? assoc(key)(f(obj[key]))(obj) : obj;
    };
const unionWith = (combine)=>(first)=>first === emptyObject ? identity : (second)=>{
            if (second === emptyObject) return first;
            let changedFromFirst = false;
            let changedFromSecond = false;
            const result = {};
            for(const key in second){
                const secondVal = second[key];
                if (key in first) {
                    const firstVal = first[key];
                    const finalVal = combine(firstVal)(secondVal);
                    if (finalVal !== secondVal) {
                        changedFromSecond = true;
                    }
                    if (finalVal !== firstVal) {
                        changedFromFirst = true;
                    }
                    result[key] = finalVal;
                } else {
                    changedFromFirst = true;
                    result[key] = secondVal;
                }
            }
            for(const key in first){
                if (key in result) continue;
                changedFromSecond = true;
                result[key] = first[key];
            }
            if (!changedFromFirst) return first;
            if (!changedFromSecond) return second;
            return result;
        };
const union = unionWith(constant);
const unionTo = flip(union);
const omitReducer = (acc, key)=>{
    if (acc.exclude.includes(key)) {
        acc.changed = true;
    } else {
        // @ts-expect-error - TS2322 - Type 'a | undefined' is not assignable to type 'a'.
        acc.result[key] = acc.source[key];
    }
    return acc;
};
const omit = (keys)=>{
    const len = keys.length;
    if (len === 0) {
        return identity;
    }
    if (len === 1) {
        // @ts-expect-error - TS2345 - Argument of type 'string | undefined' is not assignable to parameter of type 'string'.
        return dissoc(keys[0]);
    }
    return (object)=>{
        const { result, changed } = objectKeys(object).reduce(omitReducer, {
            source: object,
            exclude: keys,
            changed: false,
            result: {}
        });
        return changed ? result : object;
    };
};
const pickReducer = (acc, key)=>{
    if (Object.hasOwn(acc.source, key)) {
        acc.result[key] = acc.source[key];
    }
    return acc;
};
const pick = (keys)=>(source)=>keys.reduce(pickReducer, {
            source,
            result: {}
        }).result;
const pickByReducer = (acc, key)=>{
    const value = acc.source[key];
    // @ts-expect-error - TS2345 - Argument of type 'undefined' is not assignable to parameter of type 'never'.
    if (acc.predicate(value)) {
        acc.result[key] = value;
    } else {
        acc.changed = true;
    }
    return acc;
};
const pickBy = (predicate)=>(object)=>{
        const { result, changed } = objectKeys(object).reduce(pickByReducer, {
            source: object,
            predicate,
            changed: false,
            result: {}
        });
        return changed ? result : object;
    };
const lookup = (key)=>{
    const hasKey = has(key);
    return (object)=>hasKey(object) ? (0, _option.Some)(object[key]) : _option.None;
};
const lookupWithDefault = (defaultValue)=>(key)=>{
        const hasKey = has(key);
        return (object)=>hasKey(object) ? object[key] : defaultValue;
    };
const find = (pred)=>// @ts-expect-error - TS2322 - Type '(array: a[]) => Option<a> | Option<a | undefined>' is not assignable to type '(arg1: a[]) => Option<a>'.
    (array)=>{
        const index = array.findIndex(pred);
        return index === -1 ? _option.None : (0, _option.Some)(array[index]);
    };
const pipe = (fns)=>(initialValue)=>fns.reduce((value, fn)=>fn(value), initialValue);
const zipWith = (f)=>(xs)=>(ys)=>{
            const rv = [];
            let idx = 0;
            const len = Math.min(xs.length, ys.length);
            while(idx < len){
                // @ts-expect-error - TS2345 - Argument of type 'a | undefined' is not assignable to parameter of type 'a'. | TS2345 - Argument of type 'b | undefined' is not assignable to parameter of type 'b'.
                rv[idx] = f(xs[idx])(ys[idx]);
                idx += 1;
            }
            return rv;
        };
const zip = zipWith((x)=>(y)=>[
            x,
            y
        ]);
function getMinLength(arrays) {
    if (arrays.length === 0) return 0;
    // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
    if (arrays.length === 1) return arrays[0].length;
    // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
    let min = arrays[0].length;
    for(let i = 1, len = arrays.length; i < len; i++){
        // @ts-expect-error - TS2532 - Object is possibly 'undefined'.
        const arr_len = arrays[i].length;
        if (arr_len < min) min = arr_len;
    }
    return min;
}
function zipCat(fn) {
    return function zipCat_inner(arrays) {
        // Find the length of the shortest array to know the max number of zip items.
        const zipLength = getMinLength(arrays);
        // Create a single array reference to store our items into.
        const rv = [];
        // For each array
        for(let i = 0, len = arrays.length; i < len; i++){
            const array = arrays[i];
            // For each index in the current array
            // @ts-expect-error - TS18048 - 'array' is possibly 'undefined'.
            for(let j = 0, array_len = array.length; j < array_len; j++){
                // @ts-expect-error - TS18048 - 'array' is possibly 'undefined'.
                const item = array[j];
                // For each index that falls in the zip range
                if (j < zipLength) {
                    const existing = rv[j];
                    // Check if we have a previously calculated value for this zip index.
                    // If we do then we call the zip fn on the existing result and the current item,
                    // then save it back at the zip index.
                    if (typeof existing !== 'undefined') {
                        // @ts-expect-error - TS2345 - Argument of type 'T | undefined' is not assignable to parameter of type 'T'.
                        rv[j] = fn(existing)(item);
                    } else {
                        // @ts-expect-error - TS2322 - Type 'T | undefined' is not assignable to type 'T'.
                        rv[j] = item;
                    }
                } else {
                    // @ts-expect-error - TS2345 - Argument of type 'T | undefined' is not assignable to parameter of type 'T'.
                    rv.push(item);
                }
            }
        }
        return rv;
    };
}
const map = (f)=>(xs)=>xs.map(f);
const mapArray = (f)=>(xs)=>{
        let changed = false;
        const ys = xs.reduce((res, x)=>{
            const newX = f(x);
            // @ts-expect-error - TS2367 - This comparison appears to be unintentional because the types 'b' and 'a' have no overlap.
            if (newX !== x) {
                changed = true;
            }
            res.push(newX);
            return res;
        }, []);
        // @ts-expect-error - TS2352 - Conversion of type 'a[]' to type 'b[]' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.
        return changed ? ys : xs;
    };
const filter = (f)=>(xs)=>xs.filter(f);
const reduce = (reducer)=>(init)=>(xs)=>xs.reduce(reducer, init);
const reduceObject = (reducer)=>(init)=>(obj)=>// @ts-expect-error - TS2345 - Argument of type 'a | undefined' is not assignable to parameter of type 'a'.
            objectKeys(obj).reduce((result, key)=>reducer(result)(obj[key]), init);
const objOf = (key)=>(value)=>({
            [key]: value
        });
const concat = (ys)=>ys.length ? (xs)=>xs.length ? xs.concat(ys) : ys : identity;
const concatTo = flip(concat);
const append = (value)=>concat([
        value
    ]);
const constantIdentity = constant(identity);
const add = (x)=>(y)=>x + y;
const inc = (x)=>x + 1;
const max = (x)=>(y)=>x > y ? x : y;
const parseIntWithRadix = (radix)=>(num)=>{
        const parsed = parseInt(num, radix);
        return isNaN(parsed) ? _option.None : (0, _option.Some)(parsed);
    };
const safeParseInt = parseIntWithRadix(10);
const head = (xs)=>// @ts-expect-error - TS2322 - Type 'Option<any> | Option<a | undefined>' is not assignable to type 'Option<a>'.
    xs.length ? (0, _option.Some)(xs[0]) : _option.None;
const last = (xs)=>// @ts-expect-error - TS2322 - Type 'Option<any> | Option<a | undefined>' is not assignable to type 'Option<a>'.
    xs.length ? (0, _option.Some)(xs[xs.length - 1]) : _option.None;
const tail = (xs)=>xs.slice(1);
const length = (xs)=>xs.length;
const flatMap = (f)=>reduce((result, item)=>{
        const ys = f(item);
        if (!ys.length) {
            return result;
        }
        const nextResult = result.length ? result : [];
        nextResult.push.apply(nextResult, ys); // eslint-disable-line prefer-spread
        return nextResult;
    })(emptyArray);
const flat = flatMap(identity);
const test = (regex)=>(string)=>{
        regex.lastIndex = 0;
        const result = regex.test(string);
        regex.lastIndex = 0;
        return result;
    };
const match = (regex)=>(string)=>{
        const result = string.match(regex);
        return result ? (0, _option.Some)(result[0]) : _option.None;
    };
const replace = (pattern)=>(replacement)=>(string)=>string.replace(pattern, replacement);
const split = (pattern)=>(string)=>string.split(pattern);
const lens = (getter)=>(setter)=>(toFunctor)=>(target)=>toFunctor(getter(target)).map((focus)=>setter(focus)(target));
const lensProp = (key)=>lens(prop(key))(assoc(key));
const view = // @ts-expect-error Argument of type '<A>(arg1: (arg2: A) => unknown) => (arg3: A) => unknown' is not assignable to parameter of type '(arg1: unknown) => (arg3: unknown) => unknown'.  Types of parameters 'arg1' and 'arg1' are incompatible.  Type 'unknown' is not assignable to type '(arg2: unknown) => unknown'.
compose(compose(_Const.getConst))(thrush(_Const.Const));
const over = (l)=>(f)=>{
        const toFunctor = compose(_Identity.Identity)(f);
        // @ts-expect-error - TS2322 - Type '(arg1: s) => unknown' is not assignable to type '(arg1: s) => t'. | TS2345 - Argument of type '<a>(object: IdentityType<a>) => a' is not assignable to parameter of type '(arg1: unknown) => unknown'. | TS2345 - Argument of type '(arg1: a) => IdentityType<unknown>' is not assignable to parameter of type '(arg1: a) => Functor<b>'.
        return compose(_Identity.runIdentity)(l(toFunctor));
    };
const set = (l)=>compose(over(l))(constant);
const constantNone = constant(_option.None);
const noneToErr = (error)=>(0, _option.maybe)((0, _result.Err)(error))(_result.Ok);
const okToOption = // eslint-disable-next-line @typescript-eslint/no-explicit-any
(0, _result.either)(constantNone)(_option.Some);
const errToOption = // eslint-disable-next-line @typescript-eslint/no-explicit-any
(0, _result.either)(_option.Some)(constantNone);
const tap = (unsafeFn)=>(value)=>{
        unsafeFn(value);
        return value;
    };
const extractBool = (0, _option.maybe)(false)(identity);
const extractArray = (0, _option.maybe)(emptyArray)(identity);
const extractFunctionFromOption = (0, _option.maybe)(identity)(identity);
const extractFunctionFromResult = (0, _result.either)(constantIdentity)(identity);
const optionToArray = (0, _option.maybe)(emptyArray)(Array.of);
const optionOfEmptyArray = (0, _option.Some)(emptyArray);
const traverseOptions = (f)=>(xs)=>xs.reduce((option, x)=>f(x).map(append).ap(option), optionOfEmptyArray);
const resultOfEmptyArray = (0, _result.Ok)(emptyArray);
const traverseResults = (f)=>(xs)=>xs.reduce((result, x)=>f(x).map(append).ap(result), resultOfEmptyArray);
const resultOfEmptyObject = (0, _result.Ok)(emptyObject);
const traverseObjectResults = (f)=>(obj)=>objectKeys(obj).reduce((result, key)=>f(obj[key]).map(assoc(key)).ap(result), resultOfEmptyObject);
const mapValues = (f)=>(obj)=>{
        let changed = false;
        const newObj = objectKeys(obj).reduce((result, key)=>{
            const oldVal = obj[key];
            // @ts-expect-error - TS2345 - Argument of type 'a | undefined' is not assignable to parameter of type 'a'.
            const newVal = f(oldVal);
            if (oldVal !== newVal) {
                changed = true;
            }
            result[key] = newVal;
            return result;
        }, {});
        return changed ? newObj : obj;
    };
const values = (obj)=>// @ts-expect-error - TS2322 - Type '(T | undefined)[]' is not assignable to type 'T[]'.
    Object.keys(obj).map((k)=>obj[k]);
const entries = (obj)=>{
    const keys = Object.keys(obj);
    // @ts-expect-error - TS2322 - Type '[string, any][]' is not assignable to type '[V, T][]'. | TS7053 - Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Partial<Record<V, T>>'.
    return keys.map((key)=>[
            key,
            obj[key]
        ]);
};
const getDeepestValues = (obj)=>{
    // @ts-expect-error - TS2322 - Type '(T | undefined)[]' is not assignable to type 'T[]'.
    return Object.keys(obj).flatMap((k)=>obj[k] && typeof obj[k] === 'object' ? getDeepestValues(obj[k]) : [
            obj[k]
        ]);
};
const nth = (index)=>(a)=>index < 0 || index >= a.length ? _option.None : (0, _option.Some)(a[index]);

//# sourceMappingURL=data:application/json;base64,

}),
23056: (function (__unused_webpack_module, exports, __webpack_require__) {
"use strict";
/* eslint-disable @typescript-eslint/ban-types */ 
Object.defineProperty(exports, "__esModule", ({
    value: true
}));
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    cacheMemo: function() {
        return cacheMemo;
    },
    isEqual: function() {
        return isEqual;
    },
    memoize: function() {
        return memoize;
    },
    once: function() {
        return once;
    },
    singleMemo: function() {
        return singleMemo;
    },
    weakMemo: function() {
        return weakMemo;
    }
});
const _reselect = __webpack_require__(14445);
const _lrucache = __webpack_require__(77825);
const _isBoolean = /*#__PURE__*/ _interop_require_default(__webpack_require__(81247));
const _isFunction = /*#__PURE__*/ _interop_require_default(__webpack_require__(56644));
const _isObject = /*#__PURE__*/ _interop_require_default(__webpack_require__(28532));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const True = {
    '@webflow/Boolean': true
};
const False = {
    '@webflow/Boolean': false
};
/*
 * Inlined Immutable v3.8.1 `is` to reduce webflow.js bundle size
 * Source: https://github.com/immutable-js/immutable-js/blob/v3.8.1/src/is.js
 */ const is = (valueA, valueB)=>{
    // eslint-disable-next-line no-self-compare
    if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
        return true;
    }
    if (!valueA || !valueB) {
        return false;
    }
    if (typeof valueA.valueOf === 'function' && typeof valueB.valueOf === 'function') {
        valueA = valueA.valueOf();
        valueB = valueB.valueOf();
        // eslint-disable-next-line no-self-compare
        if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
            return true;
        }
        if (!valueA || !valueB) {
            return false;
        }
    }
    if (typeof valueA.equals === 'function' && typeof valueB.equals === 'function' && valueA.equals(valueB)) {
        return true;
    }
    return false;
};
const isEqual = (a, b)=>{
    if (is(a, b)) {
        return true;
    }
    if (typeof a !== 'object' || a === null || typeof b !== 'object' || b === null) {
        return false;
    }
    for(const k in a){
        if (!is(a[k], b[k])) {
            return false;
        }
    }
    return Object.keys(a).length === Object.keys(b).length;
};
function memoize(fn) {
    // We need to cast `fn` to some ungodly type because `lruMemoize` expects
    // (...args: any[]) => any, but we want to be more strict about the type of `fn`.
    // In other words, if we accept the same type than `lruMemoize` does, we
    // stop requesting fn to be properly typed (as it infers that both arguments
    // and return type are already `any`). For further discussion about this:
    // https://github.com/webflow/webflow/pull/85516/files#r2128406623
    return (0, _reselect.lruMemoize)(fn, isEqual);
}
function weakMemo(fn) {
    if (false) {}
    const map = new WeakMap();
    // @ts-expect-error - TS2322 - Type '{ (arg: any): any; displayName: string; }' is not assignable to type 'F'. | TS7006 - Parameter 'arg' implicitly has an 'any' type.
    const memFn = (arg)=>{
        if (!(0, _isObject.default)(arg) && !(0, _isBoolean.default)(arg)) {
            const errorMessage = `Expected an object or boolean as an argument to "${// @ts-expect-error - TS2339 - Property 'displayName' does not exist on type 'F'.
            fn.displayName || fn.name}()", but received ${String(arg)}.`;
            const fnString = fn.toString();
            if (false) {}
            throw new WeakMemoError({
                message: errorMessage,
                memFn
            });
        }
        const key = typeof arg === 'boolean' ? arg && True || False : arg;
        // Flow doesn't seem to like True/False since they don't always
        // fit the expected type of `arg`
        if (!map.has(key)) {
            map.set(key, fn(arg));
        }
        const result = map.get(key);
        return result;
    };
    if (false) {}
    return memFn;
}
const cacheMemo = (depth)=>{
    /**
   * Returns a memoized version of a "trivially hashable" function passed as parameter, with a fixed cache size.
   *
   * A "trivially hashable" function takes a single string as an argument and therefore does not need to be hashed.
   *
   * This is a pretty significant optimization if your function needs to be called very frequently.
   *
   * @param  {Function} fn          The function to memoize.
   * @return {Function}             The memoized function.
   */ const memoizeFn = (fn)=>{
        const cache = new _lrucache.LRUCache({
            max: depth || 1
        });
        // @ts-expect-error - TS2322 - Type '(arg: F) => unknown' is not assignable to type 'F'.
        return function(arg) {
            if (!cache.has(arg)) {
                cache.set(arg, fn(arg));
            }
            return cache.get(arg);
        };
    };
    return memoizeFn;
};
/**
 * A simple memoization function for usage with primitives or single argument
 * arguments of identity equality.
 */ const defaultLastArg = Symbol();
const singleMemo = (fn)=>{
    let lastArg = defaultLastArg;
    // @ts-expect-error - TS7034 - Variable 'lastResult' implicitly has type 'any' in some locations where its type cannot be determined.
    let lastResult;
    // @ts-expect-error - TS2322 - Type '(arg: F) => any' is not assignable to type 'F'.
    return (arg)=>{
        // @ts-expect-error - TS2367 - This condition will always return 'true' since the types 'F' and 'symbol' have no overlap.
        if (arg !== lastArg) {
            lastResult = fn(arg);
            // @ts-expect-error - TS2322 - Type 'F' is not assignable to type 'symbol'.
            lastArg = arg;
        }
        // @ts-expect-error - TS7005 - Variable 'lastResult' implicitly has an 'any' type.
        return lastResult;
    };
};
const once = (fn)=>{
    let result;
    return ()=>{
        if (fn) {
            result = fn();
            // @ts-expect-error - TS2322 - Type 'undefined' is not assignable to type '(arg1: undefined) => a'.
            fn = undefined;
        }
        return result;
    };
};
class WeakMemoError extends TypeError {
    constructor(opts){
        super();
        if (TypeError.captureStackTrace) {
            TypeError.captureStackTrace(this, opts.memFn);
        }
        this.name = 'WeakMemoError';
        this.message = opts.message;
    }
}
function syntaxHighlight(fnSource) {
    const keywords = /\b(function|return|const|let|if|else|throw|for|while|switch|case|break|continue|default|new|delete|typeof|instanceof|void|this|class)\b/g;
    const literals = /\b(true|false|null|undefined)\b/g;
    const strings = /(['"`][^'"`]*['"`])/g; // Matches single, double, or backticks (template literals)
    const numbers = /\b(\d+(\.\d+)?(e[+-]?\d+)?|NaN|Infinity)\b/gi; // Matches integers, floats, and scientific notation
    const operators = /[=+\-*\/%<>!&|^~?]/g;
    const comments = /(\/\/[^\n]*|\/\*[\s\S]*?\*\/)/g;
    const parentheses = /[\(\)\[\]\{\}]/g; // Matches (), [], {}
    // Apply syntax highlighting via ANSI escape codes
    return fnSource.replace(parentheses, (match)=>`\x1b[37m${match}\x1b[0m`) // white for parentheses and brackets
    .replace(comments, (match)=>`\x1b[90m${match}\x1b[0m`) // gray for comments
    .replace(strings, (match)=>`\x1b[32m${match}\x1b[0m`) // green for strings and template literals
    .replace(literals, (match)=>`\x1b[33m${match}\x1b[0m`) // yellow for literals (true, false, null, undefined)
    .replace(keywords, (match)=>`\x1b[35m${match}\x1b[0m`) // magenta for keywords
    .replace(numbers, (match)=>`\x1b[36m${match}\x1b[0m`) // cyan for numbers
    .replace(operators, (match)=>`\x1b[31m${match}\x1b[0m`); // red for operators
}

//# sourceMappingURL=data:application/json;base64,

}),
2292: (function () {
"use strict";
/* (ignored) */

}),

}]);